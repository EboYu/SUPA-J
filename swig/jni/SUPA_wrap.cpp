/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include "/home/yinbo/disk/workspace/SUPA-J/SVF/include/Util/BasicTypes.h"
#include "/home/yinbo/disk/workspace/SUPA-J/SVF/include/Util/PTAStat.h"
#include "/home/yinbo/disk/workspace/SUPA-J/SVF/include/Util/SVFUtil.h"
#include "/home/yinbo/disk/workspace/SUPA-J/SVF/include/Util/SVFModule.h"
#include "/home/yinbo/disk/workspace/SUPA-J/SVF/include/MemoryModel/PointerAnalysis.h"
#include "/home/yinbo/disk/workspace/SUPA-J/SVF/include/DDA/DDAVFSolver.h"
#include "/home/yinbo/disk/workspace/SUPA-J/SVF/include/DDA/DDAStat.h"
#include "/home/yinbo/disk/workspace/SUPA-J/SVF/include/DDA/DDAClient.h"
#include "/home/yinbo/disk/workspace/SUPA-J/SVF/include/DDA/DDAPass.h"
#include "/home/yinbo/disk/workspace/SUPA-J/SVF/include/Util/DPItem.h"


#include <stdint.h>		// Use the C99 official header


#include <typeinfo>
#include <stdexcept>


#include <string>


#include <vector>
#include <stdexcept>


#include <map>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <typeinfo>
#include <stdexcept>


#include <utility>


#include <set>
#include <stdexcept>


#include <list>
#include <stdexcept>


#include <deque>
#include <stdexcept>


#include <inttypes.h>


#include <stdio.h>


typedef struct SWIGCDATA {
    char *data;
    int   len;
} SWIGCDATA;



static SWIGCDATA cdata_void(void *ptr, int nelements) {



   SWIGCDATA d;
   d.data = (char *) ptr;



   d.len  = nelements;

   return d;
}


static jbyteArray SWIG_JavaArrayOutCDATA(JNIEnv *jenv, char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


#include <stdlib.h>


#include <math.h>

SWIGINTERN void std_set_Sl_DPItem_Sg__iterator_incrementUnchecked(std::set< DPItem >::iterator *self){
          ++(*self);
        }
SWIGINTERN DPItem std_set_Sl_DPItem_Sg__iterator_derefUnchecked(std::set< DPItem >::iterator const *self){
          return **self;
        }
SWIGINTERN bool std_set_Sl_DPItem_Sg__iterator_isNot(std::set< DPItem >::iterator const *self,std::set< DPItem >::iterator other){
          return (*self != other);
        }

/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


  SWIGINTERN jint SWIG_SetSize(size_t size) {
    jint sz = SWIG_JavaIntFromSize_t(size);
    if (sz == -1) {
      throw std::out_of_range("set size is too large to fit into a Java int");
    }

    return sz;
  }

SWIGINTERN bool std_set_Sl_DPItem_Sg__addImpl(std::set< DPItem > *self,DPItem const &key){
        return self->insert(key).second;
      }
SWIGINTERN bool std_set_Sl_DPItem_Sg__containsImpl(std::set< DPItem > *self,DPItem const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN bool std_set_Sl_DPItem_Sg__removeImpl(std::set< DPItem > *self,DPItem const &key){
        return (self->erase(key) > 0);
      }
SWIGINTERN jint std_set_Sl_DPItem_Sg__sizeImpl(std::set< DPItem > const *self){
        return SWIG_SetSize(self->size());
      }
SWIGINTERN bool std_set_Sl_DPItem_Sg__hasNextImpl(std::set< DPItem > const *self,std::set< DPItem >::iterator const &itr){
        return (itr != self->end());
      }
SWIGINTERN void std_set_Sl_SVFGEdge_SS_const_Sm__Sg__iterator_incrementUnchecked(std::set< SVFGEdge const * >::iterator *self){
          ++(*self);
        }
SWIGINTERN SVFGEdge const *std_set_Sl_SVFGEdge_SS_const_Sm__Sg__iterator_derefUnchecked(std::set< SVFGEdge const * >::iterator const *self){
          return **self;
        }
SWIGINTERN bool std_set_Sl_SVFGEdge_SS_const_Sm__Sg__iterator_isNot(std::set< SVFGEdge const * >::iterator const *self,std::set< SVFGEdge const * >::iterator other){
          return (*self != other);
        }
SWIGINTERN bool std_set_Sl_SVFGEdge_SS_const_Sm__Sg__addImpl(std::set< SVFGEdge const * > *self,SVFGEdge const *const &key){
        return self->insert(key).second;
      }
SWIGINTERN bool std_set_Sl_SVFGEdge_SS_const_Sm__Sg__containsImpl(std::set< SVFGEdge const * > *self,SVFGEdge const *const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN bool std_set_Sl_SVFGEdge_SS_const_Sm__Sg__removeImpl(std::set< SVFGEdge const * > *self,SVFGEdge const *const &key){
        return (self->erase(key) > 0);
      }
SWIGINTERN jint std_set_Sl_SVFGEdge_SS_const_Sm__Sg__sizeImpl(std::set< SVFGEdge const * > const *self){
        return SWIG_SetSize(self->size());
      }
SWIGINTERN bool std_set_Sl_SVFGEdge_SS_const_Sm__Sg__hasNextImpl(std::set< SVFGEdge const * > const *self,std::set< SVFGEdge const * >::iterator const &itr){
        return (itr != self->end());
      }
SWIGINTERN std::map< DPItem,CPtSet,std::less< DPItem > >::iterator std_map_Sl_DPItem_Sc_CPtSet_Sg__iterator_getNextUnchecked(std::map< DPItem,CPtSet >::iterator *self){
          std::map< DPItem, CPtSet, std::less< DPItem > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_DPItem_Sc_CPtSet_Sg__iterator_isNot(std::map< DPItem,CPtSet >::iterator const *self,std::map< DPItem,CPtSet >::iterator other){
          return (*self != other);
        }
SWIGINTERN DPItem std_map_Sl_DPItem_Sc_CPtSet_Sg__iterator_getKey(std::map< DPItem,CPtSet >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN CPtSet std_map_Sl_DPItem_Sc_CPtSet_Sg__iterator_getValue(std::map< DPItem,CPtSet >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_DPItem_Sc_CPtSet_Sg__iterator_setValue(std::map< DPItem,CPtSet >::iterator *self,CPtSet const &newValue){
          (*self)->second = newValue;
        }

  SWIGINTERN jint SWIG_MapSize(size_t size) {
    jint sz = SWIG_JavaIntFromSize_t(size);
    if (sz == -1) {
      throw std::out_of_range("map size is too large to fit into a Java int");
    }

    return sz;
  }

SWIGINTERN jint std_map_Sl_DPItem_Sc_CPtSet_Sg__sizeImpl(std::map< DPItem,CPtSet > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_DPItem_Sc_CPtSet_Sg__containsImpl(std::map< DPItem,CPtSet > *self,DPItem const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_DPItem_Sc_CPtSet_Sg__putUnchecked(std::map< DPItem,CPtSet > *self,DPItem const &key,CPtSet const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_DPItem_Sc_CPtSet_Sg__removeUnchecked(std::map< DPItem,CPtSet > *self,std::map< DPItem,CPtSet,std::less< DPItem > >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN std::map< DPItem,CVar,std::less< DPItem > >::iterator std_map_Sl_DPItem_Sc_CVar_Sg__iterator_getNextUnchecked(std::map< DPItem,CVar >::iterator *self){
          std::map< DPItem, CVar, std::less< DPItem > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_DPItem_Sc_CVar_Sg__iterator_isNot(std::map< DPItem,CVar >::iterator const *self,std::map< DPItem,CVar >::iterator other){
          return (*self != other);
        }
SWIGINTERN DPItem std_map_Sl_DPItem_Sc_CVar_Sg__iterator_getKey(std::map< DPItem,CVar >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN CVar std_map_Sl_DPItem_Sc_CVar_Sg__iterator_getValue(std::map< DPItem,CVar >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_DPItem_Sc_CVar_Sg__iterator_setValue(std::map< DPItem,CVar >::iterator *self,CVar const &newValue){
          (*self)->second = newValue;
        }
SWIGINTERN jint std_map_Sl_DPItem_Sc_CVar_Sg__sizeImpl(std::map< DPItem,CVar > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_DPItem_Sc_CVar_Sg__containsImpl(std::map< DPItem,CVar > *self,DPItem const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_DPItem_Sc_CVar_Sg__putUnchecked(std::map< DPItem,CVar > *self,DPItem const &key,CVar const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_DPItem_Sc_CVar_Sg__removeUnchecked(std::map< DPItem,CVar > *self,std::map< DPItem,CVar,std::less< DPItem > >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN std::map< DPItem,DPItem,std::less< DPItem > >::iterator std_map_Sl_DPItem_Sc_DPItem_Sg__iterator_getNextUnchecked(std::map< DPItem,DPItem >::iterator *self){
          std::map< DPItem, DPItem, std::less< DPItem > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_DPItem_Sc_DPItem_Sg__iterator_isNot(std::map< DPItem,DPItem >::iterator const *self,std::map< DPItem,DPItem >::iterator other){
          return (*self != other);
        }
SWIGINTERN DPItem std_map_Sl_DPItem_Sc_DPItem_Sg__iterator_getKey(std::map< DPItem,DPItem >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN DPItem std_map_Sl_DPItem_Sc_DPItem_Sg__iterator_getValue(std::map< DPItem,DPItem >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_DPItem_Sc_DPItem_Sg__iterator_setValue(std::map< DPItem,DPItem >::iterator *self,DPItem const &newValue){
          (*self)->second = newValue;
        }
SWIGINTERN jint std_map_Sl_DPItem_Sc_DPItem_Sg__sizeImpl(std::map< DPItem,DPItem > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_DPItem_Sc_DPItem_Sg__containsImpl(std::map< DPItem,DPItem > *self,DPItem const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_DPItem_Sc_DPItem_Sg__putUnchecked(std::map< DPItem,DPItem > *self,DPItem const &key,DPItem const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_DPItem_Sc_DPItem_Sg__removeUnchecked(std::map< DPItem,DPItem > *self,std::map< DPItem,DPItem,std::less< DPItem > >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN std::map< SVFGNode const *,DPTItemSet,std::less< SVFGNode const * > >::iterator std_map_Sl_SVFGNode_SS_const_Sm__Sc_DPTItemSet_Sg__iterator_getNextUnchecked(std::map< SVFGNode const *,DPTItemSet >::iterator *self){
          std::map< SVFGNode const *, DPTItemSet, std::less< SVFGNode const * > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_SVFGNode_SS_const_Sm__Sc_DPTItemSet_Sg__iterator_isNot(std::map< SVFGNode const *,DPTItemSet >::iterator const *self,std::map< SVFGNode const *,DPTItemSet >::iterator other){
          return (*self != other);
        }
SWIGINTERN SVFGNode const *std_map_Sl_SVFGNode_SS_const_Sm__Sc_DPTItemSet_Sg__iterator_getKey(std::map< SVFGNode const *,DPTItemSet >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN DPTItemSet std_map_Sl_SVFGNode_SS_const_Sm__Sc_DPTItemSet_Sg__iterator_getValue(std::map< SVFGNode const *,DPTItemSet >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_SVFGNode_SS_const_Sm__Sc_DPTItemSet_Sg__iterator_setValue(std::map< SVFGNode const *,DPTItemSet >::iterator *self,DPTItemSet const &newValue){
          (*self)->second = newValue;
        }
SWIGINTERN jint std_map_Sl_SVFGNode_SS_const_Sm__Sc_DPTItemSet_Sg__sizeImpl(std::map< SVFGNode const *,DPTItemSet > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_SVFGNode_SS_const_Sm__Sc_DPTItemSet_Sg__containsImpl(std::map< SVFGNode const *,DPTItemSet > *self,SVFGNode const *const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_SVFGNode_SS_const_Sm__Sc_DPTItemSet_Sg__putUnchecked(std::map< SVFGNode const *,DPTItemSet > *self,SVFGNode const *const &key,DPTItemSet const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_SVFGNode_SS_const_Sm__Sc_DPTItemSet_Sg__removeUnchecked(std::map< SVFGNode const *,DPTItemSet > *self,std::map< SVFGNode const *,DPTItemSet,std::less< SVFGNode const * > >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN void std_set_Sl_CallSite_Sg__iterator_incrementUnchecked(std::set< CallSite >::iterator *self){
          ++(*self);
        }
SWIGINTERN llvm::CallSite std_set_Sl_CallSite_Sg__iterator_derefUnchecked(std::set< CallSite >::iterator const *self){
          return **self;
        }
SWIGINTERN bool std_set_Sl_CallSite_Sg__iterator_isNot(std::set< CallSite >::iterator const *self,std::set< llvm::CallSite >::iterator other){
          return (*self != other);
        }
SWIGINTERN bool std_set_Sl_CallSite_Sg__addImpl(std::set< CallSite > *self,llvm::CallSite const &key){
        return self->insert(key).second;
      }
SWIGINTERN bool std_set_Sl_CallSite_Sg__containsImpl(std::set< CallSite > *self,llvm::CallSite const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN bool std_set_Sl_CallSite_Sg__removeImpl(std::set< CallSite > *self,llvm::CallSite const &key){
        return (self->erase(key) > 0);
      }
SWIGINTERN jint std_set_Sl_CallSite_Sg__sizeImpl(std::set< CallSite > const *self){
        return SWIG_SetSize(self->size());
      }
SWIGINTERN bool std_set_Sl_CallSite_Sg__hasNextImpl(std::set< CallSite > const *self,std::set< llvm::CallSite >::iterator const &itr){
        return (itr != self->end());
      }
SWIGINTERN void std_set_Sl_Function_SS_const_Sm__Sg__iterator_incrementUnchecked(std::set< Function const * >::iterator *self){
          ++(*self);
        }
SWIGINTERN llvm::Function const *std_set_Sl_Function_SS_const_Sm__Sg__iterator_derefUnchecked(std::set< Function const * >::iterator const *self){
          return **self;
        }
SWIGINTERN bool std_set_Sl_Function_SS_const_Sm__Sg__iterator_isNot(std::set< Function const * >::iterator const *self,std::set< llvm::Function const * >::iterator other){
          return (*self != other);
        }
SWIGINTERN bool std_set_Sl_Function_SS_const_Sm__Sg__addImpl(std::set< Function const * > *self,llvm::Function const *const &key){
        return self->insert(key).second;
      }
SWIGINTERN bool std_set_Sl_Function_SS_const_Sm__Sg__containsImpl(std::set< Function const * > *self,llvm::Function const *const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN bool std_set_Sl_Function_SS_const_Sm__Sg__removeImpl(std::set< Function const * > *self,llvm::Function const *const &key){
        return (self->erase(key) > 0);
      }
SWIGINTERN jint std_set_Sl_Function_SS_const_Sm__Sg__sizeImpl(std::set< Function const * > const *self){
        return SWIG_SetSize(self->size());
      }
SWIGINTERN bool std_set_Sl_Function_SS_const_Sm__Sg__hasNextImpl(std::set< Function const * > const *self,std::set< llvm::Function const * >::iterator const &itr){
        return (itr != self->end());
      }
SWIGINTERN void std_set_Sl_GlobalValue_SS_const_Sm__Sg__iterator_incrementUnchecked(std::set< GlobalValue const * >::iterator *self){
          ++(*self);
        }
SWIGINTERN llvm::GlobalValue const *std_set_Sl_GlobalValue_SS_const_Sm__Sg__iterator_derefUnchecked(std::set< GlobalValue const * >::iterator const *self){
          return **self;
        }
SWIGINTERN bool std_set_Sl_GlobalValue_SS_const_Sm__Sg__iterator_isNot(std::set< GlobalValue const * >::iterator const *self,std::set< llvm::GlobalValue const * >::iterator other){
          return (*self != other);
        }
SWIGINTERN bool std_set_Sl_GlobalValue_SS_const_Sm__Sg__addImpl(std::set< GlobalValue const * > *self,llvm::GlobalValue const *const &key){
        return self->insert(key).second;
      }
SWIGINTERN bool std_set_Sl_GlobalValue_SS_const_Sm__Sg__containsImpl(std::set< GlobalValue const * > *self,llvm::GlobalValue const *const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN bool std_set_Sl_GlobalValue_SS_const_Sm__Sg__removeImpl(std::set< GlobalValue const * > *self,llvm::GlobalValue const *const &key){
        return (self->erase(key) > 0);
      }
SWIGINTERN jint std_set_Sl_GlobalValue_SS_const_Sm__Sg__sizeImpl(std::set< GlobalValue const * > const *self){
        return SWIG_SetSize(self->size());
      }
SWIGINTERN bool std_set_Sl_GlobalValue_SS_const_Sm__Sg__hasNextImpl(std::set< GlobalValue const * > const *self,std::set< llvm::GlobalValue const * >::iterator const &itr){
        return (itr != self->end());
      }
SWIGINTERN std::map< llvm::CallSite,FunctionSet,std::less< llvm::CallSite > >::iterator std_map_Sl_CallSite_Sc_FunctionSet_Sg__iterator_getNextUnchecked(std::map< CallSite,FunctionSet >::iterator *self){
          std::map< llvm::CallSite, FunctionSet, std::less< llvm::CallSite > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_CallSite_Sc_FunctionSet_Sg__iterator_isNot(std::map< CallSite,FunctionSet >::iterator const *self,std::map< llvm::CallSite,FunctionSet >::iterator other){
          return (*self != other);
        }
SWIGINTERN llvm::CallSite std_map_Sl_CallSite_Sc_FunctionSet_Sg__iterator_getKey(std::map< CallSite,FunctionSet >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN FunctionSet std_map_Sl_CallSite_Sc_FunctionSet_Sg__iterator_getValue(std::map< CallSite,FunctionSet >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_CallSite_Sc_FunctionSet_Sg__iterator_setValue(std::map< CallSite,FunctionSet >::iterator *self,FunctionSet const &newValue){
          (*self)->second = newValue;
        }
SWIGINTERN jint std_map_Sl_CallSite_Sc_FunctionSet_Sg__sizeImpl(std::map< CallSite,FunctionSet > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_CallSite_Sc_FunctionSet_Sg__containsImpl(std::map< CallSite,FunctionSet > *self,llvm::CallSite const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_CallSite_Sc_FunctionSet_Sg__putUnchecked(std::map< CallSite,FunctionSet > *self,llvm::CallSite const &key,FunctionSet const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_CallSite_Sc_FunctionSet_Sg__removeUnchecked(std::map< CallSite,FunctionSet > *self,std::map< llvm::CallSite,FunctionSet,std::less< llvm::CallSite > >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN std::map< unsigned int,llvm::SparseBitVector< >,std::less< unsigned int > >::iterator std_map_Sl_NodeID_Sc_PointsTo_Sg__iterator_getNextUnchecked(std::map< NodeID,PointsTo >::iterator *self){
          std::map< unsigned int, llvm::SparseBitVector< >, std::less< unsigned int > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_NodeID_Sc_PointsTo_Sg__iterator_isNot(std::map< NodeID,PointsTo >::iterator const *self,std::map< unsigned int,llvm::SparseBitVector< > >::iterator other){
          return (*self != other);
        }
SWIGINTERN unsigned int std_map_Sl_NodeID_Sc_PointsTo_Sg__iterator_getKey(std::map< NodeID,PointsTo >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN llvm::SparseBitVector< > std_map_Sl_NodeID_Sc_PointsTo_Sg__iterator_getValue(std::map< NodeID,PointsTo >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_NodeID_Sc_PointsTo_Sg__iterator_setValue(std::map< NodeID,PointsTo >::iterator *self,llvm::SparseBitVector< > const &newValue){
          (*self)->second = newValue;
        }
SWIGINTERN jint std_map_Sl_NodeID_Sc_PointsTo_Sg__sizeImpl(std::map< NodeID,PointsTo > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_NodeID_Sc_PointsTo_Sg__containsImpl(std::map< NodeID,PointsTo > *self,unsigned int const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_NodeID_Sc_PointsTo_Sg__putUnchecked(std::map< NodeID,PointsTo > *self,unsigned int const &key,llvm::SparseBitVector< > const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_NodeID_Sc_PointsTo_Sg__removeUnchecked(std::map< NodeID,PointsTo > *self,std::map< unsigned int,llvm::SparseBitVector< >,std::less< unsigned int > >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN std::map< unsigned int,CPtSet,std::less< unsigned int > >::iterator std_map_Sl_NodeID_Sc_CPtSet_Sg__iterator_getNextUnchecked(std::map< NodeID,CPtSet >::iterator *self){
          std::map< unsigned int, CPtSet, std::less< unsigned int > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_NodeID_Sc_CPtSet_Sg__iterator_isNot(std::map< NodeID,CPtSet >::iterator const *self,std::map< unsigned int,CPtSet >::iterator other){
          return (*self != other);
        }
SWIGINTERN unsigned int std_map_Sl_NodeID_Sc_CPtSet_Sg__iterator_getKey(std::map< NodeID,CPtSet >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN CPtSet std_map_Sl_NodeID_Sc_CPtSet_Sg__iterator_getValue(std::map< NodeID,CPtSet >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_NodeID_Sc_CPtSet_Sg__iterator_setValue(std::map< NodeID,CPtSet >::iterator *self,CPtSet const &newValue){
          (*self)->second = newValue;
        }
SWIGINTERN jint std_map_Sl_NodeID_Sc_CPtSet_Sg__sizeImpl(std::map< NodeID,CPtSet > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_NodeID_Sc_CPtSet_Sg__containsImpl(std::map< NodeID,CPtSet > *self,unsigned int const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_NodeID_Sc_CPtSet_Sg__putUnchecked(std::map< NodeID,CPtSet > *self,unsigned int const &key,CPtSet const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_NodeID_Sc_CPtSet_Sg__removeUnchecked(std::map< NodeID,CPtSet > *self,std::map< unsigned int,CPtSet,std::less< unsigned int > >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN void std_set_Sl_NodeID_Sg__iterator_incrementUnchecked(std::set< NodeID >::iterator *self){
          ++(*self);
        }
SWIGINTERN unsigned int std_set_Sl_NodeID_Sg__iterator_derefUnchecked(std::set< NodeID >::iterator const *self){
          return **self;
        }
SWIGINTERN bool std_set_Sl_NodeID_Sg__iterator_isNot(std::set< NodeID >::iterator const *self,std::set< unsigned int >::iterator other){
          return (*self != other);
        }
SWIGINTERN bool std_set_Sl_NodeID_Sg__addImpl(std::set< NodeID > *self,unsigned int const &key){
        return self->insert(key).second;
      }
SWIGINTERN bool std_set_Sl_NodeID_Sg__containsImpl(std::set< NodeID > *self,unsigned int const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN bool std_set_Sl_NodeID_Sg__removeImpl(std::set< NodeID > *self,unsigned int const &key){
        return (self->erase(key) > 0);
      }
SWIGINTERN jint std_set_Sl_NodeID_Sg__sizeImpl(std::set< NodeID > const *self){
        return SWIG_SetSize(self->size());
      }
SWIGINTERN bool std_set_Sl_NodeID_Sg__hasNextImpl(std::set< NodeID > const *self,std::set< unsigned int >::iterator const &itr){
        return (itr != self->end());
      }

SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< NodeID > *new_std_vector_Sl_NodeID_Sg___SWIG_2(jint count,unsigned int const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< unsigned int >(static_cast<std::vector< unsigned int >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_NodeID_Sg__doSize(std::vector< NodeID > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_NodeID_Sg__doAdd__SWIG_0(std::vector< NodeID > *self,std::vector< unsigned int >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_NodeID_Sg__doAdd__SWIG_1(std::vector< NodeID > *self,jint index,std::vector< unsigned int >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< unsigned int >::value_type std_vector_Sl_NodeID_Sg__doRemove(std::vector< NodeID > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          unsigned int const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< unsigned int >::value_type const &std_vector_Sl_NodeID_Sg__doGet(std::vector< NodeID > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< unsigned int >::value_type std_vector_Sl_NodeID_Sg__doSet(std::vector< NodeID > *self,jint index,std::vector< unsigned int >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          unsigned int const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_NodeID_Sg__doRemoveRange(std::vector< NodeID > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< EdgeID > *new_std_vector_Sl_EdgeID_Sg___SWIG_2(jint count,unsigned int const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< unsigned int >(static_cast<std::vector< unsigned int >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_EdgeID_Sg__doSize(std::vector< EdgeID > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_EdgeID_Sg__doAdd__SWIG_0(std::vector< EdgeID > *self,std::<unnamed>::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_EdgeID_Sg__doAdd__SWIG_1(std::vector< EdgeID > *self,jint index,std::<unnamed>::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::<unnamed>::value_type std_vector_Sl_EdgeID_Sg__doRemove(std::vector< EdgeID > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          unsigned int const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::<unnamed>::value_type const &std_vector_Sl_EdgeID_Sg__doGet(std::vector< EdgeID > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::<unnamed>::value_type std_vector_Sl_EdgeID_Sg__doSet(std::vector< EdgeID > *self,jint index,std::<unnamed>::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          unsigned int const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_EdgeID_Sg__doRemoveRange(std::vector< EdgeID > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN void std_list_Sl_NodeID_Sg__iterator_set_unchecked(std::list< NodeID >::iterator *self,unsigned int const &v){
	  **self = v;
	}
SWIGINTERN std::list< unsigned int >::iterator std_list_Sl_NodeID_Sg__iterator_next_unchecked(std::list< NodeID >::iterator const *self){
	  std::list<unsigned int>::iterator ret = *self;
	  ++ret;
	  return ret;
	}
SWIGINTERN std::list< unsigned int >::iterator std_list_Sl_NodeID_Sg__iterator_previous_unchecked(std::list< NodeID >::iterator const *self){
	  std::list<unsigned int>::iterator ret = *self;
	  --ret;
	  return ret;
	}
SWIGINTERN unsigned int std_list_Sl_NodeID_Sg__iterator_deref_unchecked(std::list< NodeID >::iterator const *self){
	  return **self;
	}
SWIGINTERN std::list< unsigned int >::iterator std_list_Sl_NodeID_Sg__iterator_advance_unchecked(std::list< NodeID >::iterator const *self,std::list< unsigned int >::size_type index){
	  std::list<unsigned int>::iterator ret = *self;
	  std::advance(ret, index);
	  return ret;
	}

SWIGINTERN jint SWIG_ListSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("list size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::list< NodeID > *new_std_list_Sl_NodeID_Sg___SWIG_2(jint count,unsigned int const &value){
        if (count < 0)
          throw std::out_of_range("list count must be positive");
        return new std::list<unsigned int>(static_cast<std::list<unsigned int>::size_type>(count), value);
      }
SWIGINTERN jint std_list_Sl_NodeID_Sg__doSize(std::list< NodeID > const *self){
        return SWIG_ListSize(self->size());
      }
SWIGINTERN jint std_list_Sl_NodeID_Sg__doPreviousIndex(std::list< NodeID > const *self,std::list< unsigned int >::iterator const &pos){
        return pos == self->begin() ? -1 : SWIG_ListSize(std::distance(self->begin(), static_cast<std::list<unsigned int>::const_iterator>(pos)));
      }
SWIGINTERN jint std_list_Sl_NodeID_Sg__doNextIndex(std::list< NodeID > const *self,std::list< unsigned int >::iterator const &pos){
        return pos == self->end() ? SWIG_ListSize(self->size()) : SWIG_ListSize(std::distance(self->begin(), static_cast<std::list<unsigned int>::const_iterator>(pos)));
      }
SWIGINTERN bool std_list_Sl_NodeID_Sg__doHasNext(std::list< NodeID > const *self,std::list< unsigned int >::iterator const &pos){
        return pos != self->end();
      }
SWIGINTERN std::deque< unsigned int >::const_reference std_deque_Sl_NodeID_Sg__getitem(std::deque< NodeID > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("deque index out of range");
           }
SWIGINTERN void std_deque_Sl_NodeID_Sg__setitem(std::deque< NodeID > *self,int i,unsigned int const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("deque index out of range");
           }
SWIGINTERN void std_deque_Sl_NodeID_Sg__delitem(std::deque< NodeID > *self,int i){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size) {
                    self->erase(self->begin()+i);
                } else {
                    throw std::out_of_range("deque index out of range");
                }
           }
SWIGINTERN std::deque< unsigned int > std_deque_Sl_NodeID_Sg__getslice(std::deque< NodeID > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                std::deque< unsigned int > tmp(j-i);
                std::copy(self->begin()+i,self->begin()+j,tmp.begin());
                return tmp;
            }
SWIGINTERN void std_deque_Sl_NodeID_Sg__setslice(std::deque< NodeID > *self,int i,int j,std::deque< unsigned int > const &v){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                if (int(v.size()) == j-i) {
                    std::copy(v.begin(),v.end(),self->begin()+i);
                } else {
                    self->erase(self->begin()+i,self->begin()+j);
                    if (i+1 <= size)
                        self->insert(self->begin()+i+1,v.begin(),v.end());
                    else
                        self->insert(self->end(),v.begin(),v.end());
                }
            }
SWIGINTERN void std_deque_Sl_NodeID_Sg__delslice(std::deque< NodeID > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                self->erase(self->begin()+i,self->begin()+j);
            }
SWIGINTERN std::map< char const *,unsigned int,std::less< char const * > >::iterator std_map_Sl_char_SS_const_Sm__Sc_u32_t_Sg__iterator_getNextUnchecked(std::map< char const *,u32_t >::iterator *self){
          std::map< char const *, unsigned int, std::less< char const * > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_char_SS_const_Sm__Sc_u32_t_Sg__iterator_isNot(std::map< char const *,u32_t >::iterator const *self,std::map< char const *,unsigned int >::iterator other){
          return (*self != other);
        }
SWIGINTERN char const *std_map_Sl_char_SS_const_Sm__Sc_u32_t_Sg__iterator_getKey(std::map< char const *,u32_t >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN unsigned int std_map_Sl_char_SS_const_Sm__Sc_u32_t_Sg__iterator_getValue(std::map< char const *,u32_t >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_char_SS_const_Sm__Sc_u32_t_Sg__iterator_setValue(std::map< char const *,u32_t >::iterator *self,unsigned int const &newValue){
          (*self)->second = newValue;
        }
SWIGINTERN jint std_map_Sl_char_SS_const_Sm__Sc_u32_t_Sg__sizeImpl(std::map< char const *,u32_t > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_char_SS_const_Sm__Sc_u32_t_Sg__containsImpl(std::map< char const *,u32_t > *self,char const *const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_char_SS_const_Sm__Sc_u32_t_Sg__putUnchecked(std::map< char const *,u32_t > *self,char const *const &key,unsigned int const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_char_SS_const_Sm__Sc_u32_t_Sg__removeUnchecked(std::map< char const *,u32_t > *self,std::map< char const *,unsigned int,std::less< char const * > >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN std::map< char const *,double,std::less< char const * > >::iterator std_map_Sl_char_SS_const_Sm__Sc_double_Sg__iterator_getNextUnchecked(std::map< char const *,double >::iterator *self){
          std::map< char const *, double, std::less< char const * > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_char_SS_const_Sm__Sc_double_Sg__iterator_isNot(std::map< char const *,double >::iterator const *self,std::map< char const *,double >::iterator other){
          return (*self != other);
        }
SWIGINTERN char const *std_map_Sl_char_SS_const_Sm__Sc_double_Sg__iterator_getKey(std::map< char const *,double >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN double std_map_Sl_char_SS_const_Sm__Sc_double_Sg__iterator_getValue(std::map< char const *,double >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_char_SS_const_Sm__Sc_double_Sg__iterator_setValue(std::map< char const *,double >::iterator *self,double const &newValue){
          (*self)->second = newValue;
        }
SWIGINTERN jint std_map_Sl_char_SS_const_Sm__Sc_double_Sg__sizeImpl(std::map< char const *,double > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_char_SS_const_Sm__Sc_double_Sg__containsImpl(std::map< char const *,double > *self,char const *const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_char_SS_const_Sm__Sc_double_Sg__putUnchecked(std::map< char const *,double > *self,char const *const &key,double const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_char_SS_const_Sm__Sc_double_Sg__removeUnchecked(std::map< char const *,double > *self,std::map< char const *,double,std::less< char const * > >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN std::vector< Function * > *new_std_vector_Sl_Function_Sm__Sg___SWIG_2(jint count,llvm::Function *const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< llvm::Function * >(static_cast<std::vector< llvm::Function * >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_Function_Sm__Sg__doSize(std::vector< Function * > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_Function_Sm__Sg__doAdd__SWIG_0(std::vector< Function * > *self,std::vector< llvm::Function * >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_Function_Sm__Sg__doAdd__SWIG_1(std::vector< Function * > *self,jint index,std::vector< llvm::Function * >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< llvm::Function * >::value_type std_vector_Sl_Function_Sm__Sg__doRemove(std::vector< Function * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          llvm::Function * const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< llvm::Function * >::value_type const &std_vector_Sl_Function_Sm__Sg__doGet(std::vector< Function * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< llvm::Function * >::value_type std_vector_Sl_Function_Sm__Sg__doSet(std::vector< Function * > *self,jint index,std::vector< llvm::Function * >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          llvm::Function * const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_Function_Sm__Sg__doRemoveRange(std::vector< Function * > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< GlobalVariable * > *new_std_vector_Sl_GlobalVariable_Sm__Sg___SWIG_2(jint count,llvm::GlobalVariable *const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< llvm::GlobalVariable * >(static_cast<std::vector< llvm::GlobalVariable * >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_GlobalVariable_Sm__Sg__doSize(std::vector< GlobalVariable * > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_GlobalVariable_Sm__Sg__doAdd__SWIG_0(std::vector< GlobalVariable * > *self,std::vector< llvm::GlobalVariable * >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_GlobalVariable_Sm__Sg__doAdd__SWIG_1(std::vector< GlobalVariable * > *self,jint index,std::vector< llvm::GlobalVariable * >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< llvm::GlobalVariable * >::value_type std_vector_Sl_GlobalVariable_Sm__Sg__doRemove(std::vector< GlobalVariable * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          llvm::GlobalVariable * const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< llvm::GlobalVariable * >::value_type const &std_vector_Sl_GlobalVariable_Sm__Sg__doGet(std::vector< GlobalVariable * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< llvm::GlobalVariable * >::value_type std_vector_Sl_GlobalVariable_Sm__Sg__doSet(std::vector< GlobalVariable * > *self,jint index,std::vector< llvm::GlobalVariable * >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          llvm::GlobalVariable * const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_GlobalVariable_Sm__Sg__doRemoveRange(std::vector< GlobalVariable * > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< GlobalAlias * > *new_std_vector_Sl_GlobalAlias_Sm__Sg___SWIG_2(jint count,llvm::GlobalAlias *const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< llvm::GlobalAlias * >(static_cast<std::vector< llvm::GlobalAlias * >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_GlobalAlias_Sm__Sg__doSize(std::vector< GlobalAlias * > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_GlobalAlias_Sm__Sg__doAdd__SWIG_0(std::vector< GlobalAlias * > *self,std::vector< llvm::GlobalAlias * >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_GlobalAlias_Sm__Sg__doAdd__SWIG_1(std::vector< GlobalAlias * > *self,jint index,std::vector< llvm::GlobalAlias * >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< llvm::GlobalAlias * >::value_type std_vector_Sl_GlobalAlias_Sm__Sg__doRemove(std::vector< GlobalAlias * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          llvm::GlobalAlias * const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< llvm::GlobalAlias * >::value_type const &std_vector_Sl_GlobalAlias_Sm__Sg__doGet(std::vector< GlobalAlias * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< llvm::GlobalAlias * >::value_type std_vector_Sl_GlobalAlias_Sm__Sg__doSet(std::vector< GlobalAlias * > *self,jint index,std::vector< llvm::GlobalAlias * >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          llvm::GlobalAlias * const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_GlobalAlias_Sm__Sg__doRemoveRange(std::vector< GlobalAlias * > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::map< llvm::Function const *,llvm::Function *,std::less< llvm::Function const * > >::iterator std_map_Sl_Function_SS_const_Sm__Sc_Function_Sm__Sg__iterator_getNextUnchecked(std::map< Function const *,Function * >::iterator *self){
          std::map< llvm::Function const *, llvm::Function *, std::less< llvm::Function const * > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_Function_SS_const_Sm__Sc_Function_Sm__Sg__iterator_isNot(std::map< Function const *,Function * >::iterator const *self,std::map< llvm::Function const *,llvm::Function * >::iterator other){
          return (*self != other);
        }
SWIGINTERN llvm::Function const *std_map_Sl_Function_SS_const_Sm__Sc_Function_Sm__Sg__iterator_getKey(std::map< Function const *,Function * >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN llvm::Function *std_map_Sl_Function_SS_const_Sm__Sc_Function_Sm__Sg__iterator_getValue(std::map< Function const *,Function * >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_Function_SS_const_Sm__Sc_Function_Sm__Sg__iterator_setValue(std::map< Function const *,Function * >::iterator *self,llvm::Function *const &newValue){
          (*self)->second = newValue;
        }
SWIGINTERN jint std_map_Sl_Function_SS_const_Sm__Sc_Function_Sm__Sg__sizeImpl(std::map< Function const *,Function * > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_Function_SS_const_Sm__Sc_Function_Sm__Sg__containsImpl(std::map< Function const *,Function * > *self,llvm::Function const *const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_Function_SS_const_Sm__Sc_Function_Sm__Sg__putUnchecked(std::map< Function const *,Function * > *self,llvm::Function const *const &key,llvm::Function *const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_Function_SS_const_Sm__Sc_Function_Sm__Sg__removeUnchecked(std::map< Function const *,Function * > *self,std::map< llvm::Function const *,llvm::Function *,std::less< llvm::Function const * > >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN std::map< llvm::Function const *,FunctionSetType,std::less< llvm::Function const * > >::iterator std_map_Sl_Function_SS_const_Sm__Sc_FunctionSetType_Sg__iterator_getNextUnchecked(std::map< Function const *,FunctionSetType >::iterator *self){
          std::map< llvm::Function const *, FunctionSetType, std::less< llvm::Function const * > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_Function_SS_const_Sm__Sc_FunctionSetType_Sg__iterator_isNot(std::map< Function const *,FunctionSetType >::iterator const *self,std::map< llvm::Function const *,FunctionSetType >::iterator other){
          return (*self != other);
        }
SWIGINTERN llvm::Function const *std_map_Sl_Function_SS_const_Sm__Sc_FunctionSetType_Sg__iterator_getKey(std::map< Function const *,FunctionSetType >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN FunctionSetType std_map_Sl_Function_SS_const_Sm__Sc_FunctionSetType_Sg__iterator_getValue(std::map< Function const *,FunctionSetType >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_Function_SS_const_Sm__Sc_FunctionSetType_Sg__iterator_setValue(std::map< Function const *,FunctionSetType >::iterator *self,FunctionSetType const &newValue){
          (*self)->second = newValue;
        }
SWIGINTERN jint std_map_Sl_Function_SS_const_Sm__Sc_FunctionSetType_Sg__sizeImpl(std::map< Function const *,FunctionSetType > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_Function_SS_const_Sm__Sc_FunctionSetType_Sg__containsImpl(std::map< Function const *,FunctionSetType > *self,llvm::Function const *const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_Function_SS_const_Sm__Sc_FunctionSetType_Sg__putUnchecked(std::map< Function const *,FunctionSetType > *self,llvm::Function const *const &key,FunctionSetType const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_Function_SS_const_Sm__Sc_FunctionSetType_Sg__removeUnchecked(std::map< Function const *,FunctionSetType > *self,std::map< llvm::Function const *,FunctionSetType,std::less< llvm::Function const * > >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN std::map< llvm::GlobalVariable const *,llvm::GlobalVariable *,std::less< llvm::GlobalVariable const * > >::iterator std_map_Sl_GlobalVariable_SS_const_Sm__Sc_GlobalVariable_Sm__Sg__iterator_getNextUnchecked(std::map< GlobalVariable const *,GlobalVariable * >::iterator *self){
          std::map< llvm::GlobalVariable const *, llvm::GlobalVariable *, std::less< llvm::GlobalVariable const * > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_GlobalVariable_SS_const_Sm__Sc_GlobalVariable_Sm__Sg__iterator_isNot(std::map< GlobalVariable const *,GlobalVariable * >::iterator const *self,std::map< llvm::GlobalVariable const *,llvm::GlobalVariable * >::iterator other){
          return (*self != other);
        }
SWIGINTERN llvm::GlobalVariable const *std_map_Sl_GlobalVariable_SS_const_Sm__Sc_GlobalVariable_Sm__Sg__iterator_getKey(std::map< GlobalVariable const *,GlobalVariable * >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN llvm::GlobalVariable *std_map_Sl_GlobalVariable_SS_const_Sm__Sc_GlobalVariable_Sm__Sg__iterator_getValue(std::map< GlobalVariable const *,GlobalVariable * >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_GlobalVariable_SS_const_Sm__Sc_GlobalVariable_Sm__Sg__iterator_setValue(std::map< GlobalVariable const *,GlobalVariable * >::iterator *self,llvm::GlobalVariable *const &newValue){
          (*self)->second = newValue;
        }
SWIGINTERN jint std_map_Sl_GlobalVariable_SS_const_Sm__Sc_GlobalVariable_Sm__Sg__sizeImpl(std::map< GlobalVariable const *,GlobalVariable * > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_GlobalVariable_SS_const_Sm__Sc_GlobalVariable_Sm__Sg__containsImpl(std::map< GlobalVariable const *,GlobalVariable * > *self,llvm::GlobalVariable const *const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_GlobalVariable_SS_const_Sm__Sc_GlobalVariable_Sm__Sg__putUnchecked(std::map< GlobalVariable const *,GlobalVariable * > *self,llvm::GlobalVariable const *const &key,llvm::GlobalVariable *const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_GlobalVariable_SS_const_Sm__Sc_GlobalVariable_Sm__Sg__removeUnchecked(std::map< GlobalVariable const *,GlobalVariable * > *self,std::map< llvm::GlobalVariable const *,llvm::GlobalVariable *,std::less< llvm::GlobalVariable const * > >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(jint count,std::string const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< std::string >(static_cast<std::vector< std::string >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_std_string_Sg__doSize(std::vector< std::string > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doAdd__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doAdd__SWIG_1(std::vector< std::string > *self,jint index,std::vector< std::string >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__doRemove(std::vector< std::string > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          std::string const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg__doGet(std::vector< std::string > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__doSet(std::vector< std::string > *self,jint index,std::vector< std::string >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          std::string const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doRemoveRange(std::vector< std::string > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< BasicBlock const * > *new_std_vector_Sl_BasicBlock_SS_const_Sm__Sg___SWIG_2(jint count,llvm::BasicBlock const *const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< llvm::BasicBlock const * >(static_cast<std::vector< llvm::BasicBlock const * >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_BasicBlock_SS_const_Sm__Sg__doSize(std::vector< BasicBlock const * > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_BasicBlock_SS_const_Sm__Sg__doAdd__SWIG_0(std::vector< BasicBlock const * > *self,std::vector< llvm::BasicBlock const * >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_BasicBlock_SS_const_Sm__Sg__doAdd__SWIG_1(std::vector< BasicBlock const * > *self,jint index,std::vector< llvm::BasicBlock const * >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< llvm::BasicBlock const * >::value_type std_vector_Sl_BasicBlock_SS_const_Sm__Sg__doRemove(std::vector< BasicBlock const * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          llvm::BasicBlock const * const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< llvm::BasicBlock const * >::value_type const &std_vector_Sl_BasicBlock_SS_const_Sm__Sg__doGet(std::vector< BasicBlock const * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< llvm::BasicBlock const * >::value_type std_vector_Sl_BasicBlock_SS_const_Sm__Sg__doSet(std::vector< BasicBlock const * > *self,jint index,std::vector< llvm::BasicBlock const * >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          llvm::BasicBlock const * const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_BasicBlock_SS_const_Sm__Sg__doRemoveRange(std::vector< BasicBlock const * > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< Instruction const * > *new_std_vector_Sl_Instruction_SS_const_Sm__Sg___SWIG_2(jint count,llvm::Instruction const *const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< llvm::Instruction const * >(static_cast<std::vector< llvm::Instruction const * >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_Instruction_SS_const_Sm__Sg__doSize(std::vector< Instruction const * > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_Instruction_SS_const_Sm__Sg__doAdd__SWIG_0(std::vector< Instruction const * > *self,std::vector< llvm::Instruction const * >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_Instruction_SS_const_Sm__Sg__doAdd__SWIG_1(std::vector< Instruction const * > *self,jint index,std::vector< llvm::Instruction const * >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< llvm::Instruction const * >::value_type std_vector_Sl_Instruction_SS_const_Sm__Sg__doRemove(std::vector< Instruction const * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          llvm::Instruction const * const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< llvm::Instruction const * >::value_type const &std_vector_Sl_Instruction_SS_const_Sm__Sg__doGet(std::vector< Instruction const * > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< llvm::Instruction const * >::value_type std_vector_Sl_Instruction_SS_const_Sm__Sg__doSet(std::vector< Instruction const * > *self,jint index,std::vector< llvm::Instruction const * >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          llvm::Instruction const * const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_Instruction_SS_const_Sm__Sg__doRemoveRange(std::vector< Instruction const * > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_imaxdiv_1t_1quot_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ; long long arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(imaxdiv_t **)&jarg1; 
  arg2 = (long long)jarg2;  if (arg1) (arg1)->quot = arg2; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_imaxdiv_1t_1quot_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; imaxdiv_t *arg1 = (imaxdiv_t *) 0 ; long long result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(imaxdiv_t **)&jarg1;  result = (long long) ((arg1)->quot); jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_imaxdiv_1t_1rem_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ; long long arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(imaxdiv_t **)&jarg1; 
  arg2 = (long long)jarg2;  if (arg1) (arg1)->rem = arg2; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_imaxdiv_1t_1rem_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; imaxdiv_t *arg1 = (imaxdiv_t *) 0 ; long long result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(imaxdiv_t **)&jarg1;  result = (long long) ((arg1)->rem); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1imaxdiv_1t(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  imaxdiv_t *result = 0 ; (void)jenv; (void)jcls; result = (imaxdiv_t *)new imaxdiv_t(); *(imaxdiv_t **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1imaxdiv_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ; (void)jenv; (void)jcls; arg1 = *(imaxdiv_t **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_imaxabs(JNIEnv *jenv, jclass jcls, jlong jarg1) { jlong jresult = 0 ;
  intmax_t arg1 ; intmax_t result; (void)jenv; (void)jcls; arg1 = (intmax_t)jarg1;  result = (intmax_t)imaxabs(arg1);
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_imaxdiv(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ; intmax_t arg1 ; intmax_t arg2 ; imaxdiv_t result; (void)jenv; (void)jcls; arg1 = (intmax_t)jarg1; 
  arg2 = (intmax_t)jarg2;  result = imaxdiv(arg1,arg2); *(imaxdiv_t **)&jresult = new imaxdiv_t((const imaxdiv_t &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_strtoimax(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ; char *arg1 = (char *) 0 ; char **arg2 = (char **) 0 ; int arg3 ; intmax_t result; (void)jenv; (void)jcls;
  arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; }  arg2 = *(char ***)&jarg2; 
  arg3 = (int)jarg3;  result = (intmax_t)strtoimax((char const *)arg1,arg2,arg3); jresult = (jlong)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); return jresult; }
SWIGEXPORT jobject JNICALL Java_org_supa_bindings_SUPAJNI_strtoumax(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jint jarg3) {
  jobject jresult = 0 ; char *arg1 = (char *) 0 ; char **arg2 = (char **) 0 ; int arg3 ; uintmax_t result; (void)jenv;
  (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0); if (!arg1) return 0; } 
  arg2 = *(char ***)&jarg2;  arg3 = (int)jarg3;  result = (uintmax_t)strtoumax((char const *)arg1,arg2,arg3); {
    jbyteArray ba = jenv->NewByteArray(9); jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger"); jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint; int i; bae[0] = 0; for(i=1; i<9; i++ ) { bae[i] = (jbyte)(result>>8*(8-i)); } 
    jenv->ReleaseByteArrayElements(ba, bae, 0); bigint = jenv->NewObject(clazz, mid, ba); jenv->DeleteLocalRef(ba);
    jresult = bigint; }  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); return jresult; }
SWIGEXPORT jbyteArray JNICALL Java_org_supa_bindings_SUPAJNI_cdata(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jbyteArray jresult = 0 ; void *arg1 = (void *) 0 ; int arg2 ; SWIGCDATA result; (void)jenv; (void)jcls; arg2 = 1;
  arg1 = *(void **)&jarg1;  arg2 = (int)jarg2;  result = cdata_void(arg1,arg2);
  jresult = SWIG_JavaArrayOutCDATA(jenv, (char *)(&result)->data, (&result)->len);  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_memmove(JNIEnv *jenv, jclass jcls, jlong jarg1, jbyteArray jarg2) {
  void *arg1 = (void *) 0 ; void *arg2 = (void *) 0 ; int arg3 ; (void)jenv; (void)jcls; arg1 = *(void **)&jarg1;  {
    if (jarg2) { arg2 = (void *) jenv->GetByteArrayElements(jarg2, 0); arg3 = (int) jenv->GetArrayLength(jarg2); }  else {
      arg2 = 0; arg3 = 0; }  }  memmove(arg1,(void const *)arg2,arg3); {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0); }  }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_cos(JNIEnv *jenv, jclass jcls, jdouble jarg1) { jdouble jresult = 0 ;
  double arg1 ; double result; (void)jenv; (void)jcls; arg1 = (double)jarg1;  result = (double)cos(arg1);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_sin(JNIEnv *jenv, jclass jcls, jdouble jarg1) { jdouble jresult = 0 ;
  double arg1 ; double result; (void)jenv; (void)jcls; arg1 = (double)jarg1;  result = (double)sin(arg1);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_tan(JNIEnv *jenv, jclass jcls, jdouble jarg1) { jdouble jresult = 0 ;
  double arg1 ; double result; (void)jenv; (void)jcls; arg1 = (double)jarg1;  result = (double)tan(arg1);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_acos(JNIEnv *jenv, jclass jcls, jdouble jarg1) { jdouble jresult = 0 ;
  double arg1 ; double result; (void)jenv; (void)jcls; arg1 = (double)jarg1;  result = (double)acos(arg1);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_asin(JNIEnv *jenv, jclass jcls, jdouble jarg1) { jdouble jresult = 0 ;
  double arg1 ; double result; (void)jenv; (void)jcls; arg1 = (double)jarg1;  result = (double)asin(arg1);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_atan(JNIEnv *jenv, jclass jcls, jdouble jarg1) { jdouble jresult = 0 ;
  double arg1 ; double result; (void)jenv; (void)jcls; arg1 = (double)jarg1;  result = (double)atan(arg1);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_atan2(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jdouble jresult = 0 ; double arg1 ; double arg2 ; double result; (void)jenv; (void)jcls; arg1 = (double)jarg1; 
  arg2 = (double)jarg2;  result = (double)atan2(arg1,arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_cosh(JNIEnv *jenv, jclass jcls, jdouble jarg1) { jdouble jresult = 0 ;
  double arg1 ; double result; (void)jenv; (void)jcls; arg1 = (double)jarg1;  result = (double)cosh(arg1);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_sinh(JNIEnv *jenv, jclass jcls, jdouble jarg1) { jdouble jresult = 0 ;
  double arg1 ; double result; (void)jenv; (void)jcls; arg1 = (double)jarg1;  result = (double)sinh(arg1);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_tanh(JNIEnv *jenv, jclass jcls, jdouble jarg1) { jdouble jresult = 0 ;
  double arg1 ; double result; (void)jenv; (void)jcls; arg1 = (double)jarg1;  result = (double)tanh(arg1);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_exp(JNIEnv *jenv, jclass jcls, jdouble jarg1) { jdouble jresult = 0 ;
  double arg1 ; double result; (void)jenv; (void)jcls; arg1 = (double)jarg1;  result = (double)exp(arg1);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_log(JNIEnv *jenv, jclass jcls, jdouble jarg1) { jdouble jresult = 0 ;
  double arg1 ; double result; (void)jenv; (void)jcls; arg1 = (double)jarg1;  result = (double)log(arg1);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_log10(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ; double arg1 ; double result; (void)jenv; (void)jcls; arg1 = (double)jarg1; 
  result = (double)log10(arg1); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_pow(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jdouble jresult = 0 ; double arg1 ; double arg2 ; double result; (void)jenv; (void)jcls; arg1 = (double)jarg1; 
  arg2 = (double)jarg2;  result = (double)pow(arg1,arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_sqrt(JNIEnv *jenv, jclass jcls, jdouble jarg1) { jdouble jresult = 0 ;
  double arg1 ; double result; (void)jenv; (void)jcls; arg1 = (double)jarg1;  result = (double)sqrt(arg1);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_fabs(JNIEnv *jenv, jclass jcls, jdouble jarg1) { jdouble jresult = 0 ;
  double arg1 ; double result; (void)jenv; (void)jcls; arg1 = (double)jarg1;  result = (double)fabs(arg1);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_ceil(JNIEnv *jenv, jclass jcls, jdouble jarg1) { jdouble jresult = 0 ;
  double arg1 ; double result; (void)jenv; (void)jcls; arg1 = (double)jarg1;  result = (double)ceil(arg1);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_floor(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ; double arg1 ; double result; (void)jenv; (void)jcls; arg1 = (double)jarg1; 
  result = (double)floor(arg1); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_fmod(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jdouble jresult = 0 ; double arg1 ; double arg2 ; double result; (void)jenv; (void)jcls; arg1 = (double)jarg1; 
  arg2 = (double)jarg2;  result = (double)fmod(arg1,arg2); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_M_1E_1get(JNIEnv *jenv, jclass jcls) { jdouble jresult = 0 ;
  double result; (void)jenv; (void)jcls; result = (double)(2.7182818284590452354); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_M_1LOG2E_1get(JNIEnv *jenv, jclass jcls) { jdouble jresult = 0 ;
  double result; (void)jenv; (void)jcls; result = (double)(1.4426950408889634074); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_M_1LOG10E_1get(JNIEnv *jenv, jclass jcls) { jdouble jresult = 0 ;
  double result; (void)jenv; (void)jcls; result = (double)(0.43429448190325182765); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_M_1LN2_1get(JNIEnv *jenv, jclass jcls) { jdouble jresult = 0 ;
  double result; (void)jenv; (void)jcls; result = (double)(0.69314718055994530942); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_M_1LN10_1get(JNIEnv *jenv, jclass jcls) { jdouble jresult = 0 ;
  double result; (void)jenv; (void)jcls; result = (double)(2.30258509299404568402); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_M_1PI_1get(JNIEnv *jenv, jclass jcls) { jdouble jresult = 0 ;
  double result; (void)jenv; (void)jcls; result = (double)(3.14159265358979323846); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_M_1PI_12_1get(JNIEnv *jenv, jclass jcls) { jdouble jresult = 0 ;
  double result; (void)jenv; (void)jcls; result = (double)(1.57079632679489661923); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_M_1PI_14_1get(JNIEnv *jenv, jclass jcls) { jdouble jresult = 0 ;
  double result; (void)jenv; (void)jcls; result = (double)(0.78539816339744830962); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_M_11_1PI_1get(JNIEnv *jenv, jclass jcls) { jdouble jresult = 0 ;
  double result; (void)jenv; (void)jcls; result = (double)(0.31830988618379067154); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_M_12_1PI_1get(JNIEnv *jenv, jclass jcls) { jdouble jresult = 0 ;
  double result; (void)jenv; (void)jcls; result = (double)(0.63661977236758134308); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_M_12_1SQRTPI_1get(JNIEnv *jenv, jclass jcls) { jdouble jresult = 0 ;
  double result; (void)jenv; (void)jcls; result = (double)(1.12837916709551257390); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_M_1SQRT2_1get(JNIEnv *jenv, jclass jcls) { jdouble jresult = 0 ;
  double result; (void)jenv; (void)jcls; result = (double)(1.41421356237309504880); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_M_1SQRT1_12_1get(JNIEnv *jenv, jclass jcls) { jdouble jresult = 0 ;
  double result; (void)jenv; (void)jcls; result = (double)(0.70710678118654752440); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DPTItemSet_1Iterator_1incrementUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::set< DPItem >::iterator *arg1 = (std::set< DPItem >::iterator *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< DPItem >::iterator **)&jarg1;  std_set_Sl_DPItem_Sg__iterator_incrementUnchecked(arg1); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DPTItemSet_1Iterator_1derefUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::set< DPItem >::iterator *arg1 = (std::set< DPItem >::iterator *) 0 ; DPItem result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::set< DPItem >::iterator **)&jarg1; 
  result = std_set_Sl_DPItem_Sg__iterator_derefUnchecked((std::set< DPItem >::iterator const *)arg1);
  *(DPItem **)&jresult = new DPItem((const DPItem &)result);  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_DPTItemSet_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; std::set< DPItem >::iterator *arg1 = (std::set< DPItem >::iterator *) 0 ;
  std::set< DPItem >::iterator arg2 ; std::set< DPItem >::iterator *argp2 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(std::set< DPItem >::iterator **)&jarg1;  argp2 = *(std::set< DPItem >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::set< DPItem >::iterator");
    return 0; }  arg2 = *argp2; 
  result = (bool)std_set_Sl_DPItem_Sg__iterator_isNot((std::set< DPItem >::iterator const *)arg1,arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1DPTItemSet_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::set< DPItem >::iterator *arg1 = (std::set< DPItem >::iterator *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::set< DPItem >::iterator **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1DPTItemSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::set< DPItem > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::set< DPItem > *)new std::set< DPItem >(); *(std::set< DPItem > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1DPTItemSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::set< DPItem > *arg1 = 0 ; std::set< DPItem > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< DPItem > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::set< DPItem > const & reference is null"); return 0; }  
  result = (std::set< DPItem > *)new std::set< DPItem >((std::set< DPItem > const &)*arg1);
  *(std::set< DPItem > **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_DPTItemSet_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::set< DPItem > *arg1 = (std::set< DPItem > *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::set< DPItem > **)&jarg1;  result = (bool)((std::set< DPItem > const *)arg1)->empty();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DPTItemSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::set< DPItem > *arg1 = (std::set< DPItem > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< DPItem > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DPTItemSet_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::set< DPItem > *arg1 = (std::set< DPItem > *) 0 ; std::set< DPItem >::iterator result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::set< DPItem > **)&jarg1;  result = (arg1)->begin();
  *(std::set< DPItem >::iterator **)&jresult = new std::set< DPItem >::iterator((const std::set< DPItem >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DPTItemSet_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::set< DPItem > *arg1 = (std::set< DPItem > *) 0 ; std::set< DPItem >::iterator result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::set< DPItem > **)&jarg1;  result = (arg1)->end();
  *(std::set< DPItem >::iterator **)&jresult = new std::set< DPItem >::iterator((const std::set< DPItem >::iterator &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_DPTItemSet_1addImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::set< DPItem > *arg1 = (std::set< DPItem > *) 0 ; DPItem *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::set< DPItem > **)&jarg1;  arg2 = *(DPItem **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DPItem const & reference is null"); return 0; }  
  result = (bool)std_set_Sl_DPItem_Sg__addImpl(arg1,(DPItem const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_DPTItemSet_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::set< DPItem > *arg1 = (std::set< DPItem > *) 0 ; DPItem *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::set< DPItem > **)&jarg1;  arg2 = *(DPItem **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DPItem const & reference is null"); return 0; }  
  result = (bool)std_set_Sl_DPItem_Sg__containsImpl(arg1,(DPItem const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_DPTItemSet_1removeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::set< DPItem > *arg1 = (std::set< DPItem > *) 0 ; DPItem *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::set< DPItem > **)&jarg1;  arg2 = *(DPItem **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DPItem const & reference is null"); return 0; }  
  result = (bool)std_set_Sl_DPItem_Sg__removeImpl(arg1,(DPItem const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_DPTItemSet_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::set< DPItem > *arg1 = (std::set< DPItem > *) 0 ; jint result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< DPItem > **)&jarg1;  try { result = std_set_Sl_DPItem_Sg__sizeImpl((std::set< DPItem > const *)arg1);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_DPTItemSet_1hasNextImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; std::set< DPItem > *arg1 = (std::set< DPItem > *) 0 ; std::set< DPItem >::iterator *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(std::set< DPItem > **)&jarg1; 
  arg2 = *(std::set< DPItem >::iterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::set< DPItem >::iterator const & reference is null");
    return 0; }  
  result = (bool)std_set_Sl_DPItem_Sg__hasNextImpl((std::set< DPItem > const *)arg1,(std::set< DPItem >::iterator const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1DPTItemSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::set< DPItem > *arg1 = (std::set< DPItem > *) 0 ; (void)jenv; (void)jcls; arg1 = *(std::set< DPItem > **)&jarg1; 
  delete arg1; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_ConstSVFGEdgeSet_1Iterator_1incrementUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::set< SVFGEdge const * >::iterator *arg1 = (std::set< SVFGEdge const * >::iterator *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::set< SVFGEdge const * >::iterator **)&jarg1; 
  std_set_Sl_SVFGEdge_SS_const_Sm__Sg__iterator_incrementUnchecked(arg1); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_ConstSVFGEdgeSet_1Iterator_1derefUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::set< SVFGEdge const * >::iterator *arg1 = (std::set< SVFGEdge const * >::iterator *) 0 ;
  SVFGEdge *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::set< SVFGEdge const * >::iterator **)&jarg1; 
  result = (SVFGEdge *)std_set_Sl_SVFGEdge_SS_const_Sm__Sg__iterator_derefUnchecked((std::set< SVFGEdge const * >::iterator const *)arg1);
  *(SVFGEdge **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_ConstSVFGEdgeSet_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; std::set< SVFGEdge const * >::iterator *arg1 = (std::set< SVFGEdge const * >::iterator *) 0 ;
  std::set< SVFGEdge const * >::iterator arg2 ; std::set< SVFGEdge const * >::iterator *argp2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(std::set< SVFGEdge const * >::iterator **)&jarg1; 
  argp2 = *(std::set< SVFGEdge const * >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::set< SVFGEdge const * >::iterator");
    return 0; }  arg2 = *argp2; 
  result = (bool)std_set_Sl_SVFGEdge_SS_const_Sm__Sg__iterator_isNot((std::set< SVFGEdge const * >::iterator const *)arg1,arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1ConstSVFGEdgeSet_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::set< SVFGEdge const * >::iterator *arg1 = (std::set< SVFGEdge const * >::iterator *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::set< SVFGEdge const * >::iterator **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1ConstSVFGEdgeSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::set< SVFGEdge const * > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::set< SVFGEdge const * > *)new std::set< SVFGEdge const * >();
  *(std::set< SVFGEdge const * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1ConstSVFGEdgeSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::set< SVFGEdge const * > *arg1 = 0 ; std::set< SVFGEdge const * > *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::set< SVFGEdge const * > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::set< SVFGEdge const * > const & reference is null");
    return 0; }  
  result = (std::set< SVFGEdge const * > *)new std::set< SVFGEdge const * >((std::set< SVFGEdge const * > const &)*arg1);
  *(std::set< SVFGEdge const * > **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_ConstSVFGEdgeSet_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::set< SVFGEdge const * > *arg1 = (std::set< SVFGEdge const * > *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::set< SVFGEdge const * > **)&jarg1; 
  result = (bool)((std::set< SVFGEdge const * > const *)arg1)->empty(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_ConstSVFGEdgeSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::set< SVFGEdge const * > *arg1 = (std::set< SVFGEdge const * > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< SVFGEdge const * > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_ConstSVFGEdgeSet_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::set< SVFGEdge const * > *arg1 = (std::set< SVFGEdge const * > *) 0 ;
  std::set< SVFGEdge const * >::iterator result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< SVFGEdge const * > **)&jarg1;  result = (arg1)->begin();
  *(std::set< SVFGEdge const * >::iterator **)&jresult = new std::set< SVFGEdge const * >::iterator((const std::set< SVFGEdge const * >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_ConstSVFGEdgeSet_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::set< SVFGEdge const * > *arg1 = (std::set< SVFGEdge const * > *) 0 ;
  std::set< SVFGEdge const * >::iterator result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< SVFGEdge const * > **)&jarg1;  result = (arg1)->end();
  *(std::set< SVFGEdge const * >::iterator **)&jresult = new std::set< SVFGEdge const * >::iterator((const std::set< SVFGEdge const * >::iterator &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_ConstSVFGEdgeSet_1addImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::set< SVFGEdge const * > *arg1 = (std::set< SVFGEdge const * > *) 0 ; SVFGEdge **arg2 = 0 ;
  SVFGEdge *temp2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::set< SVFGEdge const * > **)&jarg1; 
  temp2 = *(SVFGEdge **)&jarg2; arg2 = (SVFGEdge **)&temp2; 
  result = (bool)std_set_Sl_SVFGEdge_SS_const_Sm__Sg__addImpl(arg1,(SVFGEdge const *const &)*arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_ConstSVFGEdgeSet_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::set< SVFGEdge const * > *arg1 = (std::set< SVFGEdge const * > *) 0 ; SVFGEdge **arg2 = 0 ;
  SVFGEdge *temp2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::set< SVFGEdge const * > **)&jarg1; 
  temp2 = *(SVFGEdge **)&jarg2; arg2 = (SVFGEdge **)&temp2; 
  result = (bool)std_set_Sl_SVFGEdge_SS_const_Sm__Sg__containsImpl(arg1,(SVFGEdge const *const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_ConstSVFGEdgeSet_1removeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::set< SVFGEdge const * > *arg1 = (std::set< SVFGEdge const * > *) 0 ; SVFGEdge **arg2 = 0 ;
  SVFGEdge *temp2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::set< SVFGEdge const * > **)&jarg1; 
  temp2 = *(SVFGEdge **)&jarg2; arg2 = (SVFGEdge **)&temp2; 
  result = (bool)std_set_Sl_SVFGEdge_SS_const_Sm__Sg__removeImpl(arg1,(SVFGEdge const *const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_ConstSVFGEdgeSet_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::set< SVFGEdge const * > *arg1 = (std::set< SVFGEdge const * > *) 0 ; jint result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::set< SVFGEdge const * > **)&jarg1;  try {
    result = std_set_Sl_SVFGEdge_SS_const_Sm__Sg__sizeImpl((std::set< SVFGEdge const * > const *)arg1);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_ConstSVFGEdgeSet_1hasNextImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; std::set< SVFGEdge const * > *arg1 = (std::set< SVFGEdge const * > *) 0 ;
  std::set< SVFGEdge const * >::iterator *arg2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(std::set< SVFGEdge const * > **)&jarg1;  arg2 = *(std::set< SVFGEdge const * >::iterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::set< SVFGEdge const * >::iterator const & reference is null");
    return 0; }  
  result = (bool)std_set_Sl_SVFGEdge_SS_const_Sm__Sg__hasNextImpl((std::set< SVFGEdge const * > const *)arg1,(std::set< SVFGEdge const * >::iterator const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1ConstSVFGEdgeSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::set< SVFGEdge const * > *arg1 = (std::set< SVFGEdge const * > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::set< SVFGEdge const * > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1DPItemToCPtSetMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::map< DPItem,CPtSet > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::map< DPItem,CPtSet > *)new std::map< DPItem,CPtSet >(); *(std::map< DPItem,CPtSet > **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1DPItemToCPtSetMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< DPItem,CPtSet > *arg1 = 0 ; std::map< DPItem,CPtSet > *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< DPItem,CPtSet > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< DPItem,CPtSet > const & reference is null");
    return 0; }   result = (std::map< DPItem,CPtSet > *)new std::map< DPItem,CPtSet >((std::map< DPItem,CPtSet > const &)*arg1);
  *(std::map< DPItem,CPtSet > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DPItemToCPtSetMap_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< DPItem,CPtSet >::iterator *arg1 = (std::map< DPItem,CPtSet >::iterator *) 0 ;
  std::map< DPItem,CPtSet,std::less< DPItem > >::iterator result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< DPItem,CPtSet >::iterator **)&jarg1; 
  result = std_map_Sl_DPItem_Sc_CPtSet_Sg__iterator_getNextUnchecked(arg1);
  *(std::map< DPItem,CPtSet,std::less< DPItem > >::iterator **)&jresult = new std::map< DPItem,CPtSet,std::less< DPItem > >::iterator((const std::map< DPItem,CPtSet,std::less< DPItem > >::iterator &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_DPItemToCPtSetMap_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; std::map< DPItem,CPtSet >::iterator *arg1 = (std::map< DPItem,CPtSet >::iterator *) 0 ;
  std::map< DPItem,CPtSet >::iterator arg2 ; std::map< DPItem,CPtSet >::iterator *argp2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(std::map< DPItem,CPtSet >::iterator **)&jarg1; 
  argp2 = *(std::map< DPItem,CPtSet >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< DPItem,CPtSet >::iterator");
    return 0; }  arg2 = *argp2; 
  result = (bool)std_map_Sl_DPItem_Sc_CPtSet_Sg__iterator_isNot((std::map< DPItem,CPtSet >::iterator const *)arg1,arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DPItemToCPtSetMap_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< DPItem,CPtSet >::iterator *arg1 = (std::map< DPItem,CPtSet >::iterator *) 0 ; DPItem result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< DPItem,CPtSet >::iterator **)&jarg1; 
  result = std_map_Sl_DPItem_Sc_CPtSet_Sg__iterator_getKey((std::map< DPItem,CPtSet >::iterator const *)arg1);
  *(DPItem **)&jresult = new DPItem((const DPItem &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DPItemToCPtSetMap_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< DPItem,CPtSet >::iterator *arg1 = (std::map< DPItem,CPtSet >::iterator *) 0 ; CPtSet result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< DPItem,CPtSet >::iterator **)&jarg1; 
  result = std_map_Sl_DPItem_Sc_CPtSet_Sg__iterator_getValue((std::map< DPItem,CPtSet >::iterator const *)arg1);
  *(CPtSet **)&jresult = new CPtSet((const CPtSet &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DPItemToCPtSetMap_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::map< DPItem,CPtSet >::iterator *arg1 = (std::map< DPItem,CPtSet >::iterator *) 0 ; CPtSet *arg2 = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::map< DPItem,CPtSet >::iterator **)&jarg1;  arg2 = *(CPtSet **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CPtSet const & reference is null"); return ; }  
  std_map_Sl_DPItem_Sc_CPtSet_Sg__iterator_setValue(arg1,(CPtSet const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1DPItemToCPtSetMap_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< DPItem,CPtSet >::iterator *arg1 = (std::map< DPItem,CPtSet >::iterator *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::map< DPItem,CPtSet >::iterator **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_DPItemToCPtSetMap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::map< DPItem,CPtSet > *arg1 = (std::map< DPItem,CPtSet > *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::map< DPItem,CPtSet > **)&jarg1; 
  result = (bool)((std::map< DPItem,CPtSet > const *)arg1)->empty(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DPItemToCPtSetMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< DPItem,CPtSet > *arg1 = (std::map< DPItem,CPtSet > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< DPItem,CPtSet > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DPItemToCPtSetMap_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; std::map< DPItem,CPtSet > *arg1 = (std::map< DPItem,CPtSet > *) 0 ; DPItem *arg2 = 0 ;
  std::map< DPItem,CPtSet >::iterator result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< DPItem,CPtSet > **)&jarg1;  arg2 = *(DPItem **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DPItem const & reference is null"); return 0; }  
  result = (arg1)->find((DPItem const &)*arg2);
  *(std::map< DPItem,CPtSet >::iterator **)&jresult = new std::map< DPItem,CPtSet >::iterator((const std::map< DPItem,CPtSet >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DPItemToCPtSetMap_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< DPItem,CPtSet > *arg1 = (std::map< DPItem,CPtSet > *) 0 ;
  std::map< DPItem,CPtSet >::iterator result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< DPItem,CPtSet > **)&jarg1;  result = (arg1)->begin();
  *(std::map< DPItem,CPtSet >::iterator **)&jresult = new std::map< DPItem,CPtSet >::iterator((const std::map< DPItem,CPtSet >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DPItemToCPtSetMap_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< DPItem,CPtSet > *arg1 = (std::map< DPItem,CPtSet > *) 0 ;
  std::map< DPItem,CPtSet >::iterator result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< DPItem,CPtSet > **)&jarg1;  result = (arg1)->end();
  *(std::map< DPItem,CPtSet >::iterator **)&jresult = new std::map< DPItem,CPtSet >::iterator((const std::map< DPItem,CPtSet >::iterator &)result); 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_DPItemToCPtSetMap_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::map< DPItem,CPtSet > *arg1 = (std::map< DPItem,CPtSet > *) 0 ; jint result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< DPItem,CPtSet > **)&jarg1;  try {
    result = std_map_Sl_DPItem_Sc_CPtSet_Sg__sizeImpl((std::map< DPItem,CPtSet > const *)arg1);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; }  jresult = result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_DPItemToCPtSetMap_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::map< DPItem,CPtSet > *arg1 = (std::map< DPItem,CPtSet > *) 0 ; DPItem *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< DPItem,CPtSet > **)&jarg1;  arg2 = *(DPItem **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DPItem const & reference is null"); return 0; }  
  result = (bool)std_map_Sl_DPItem_Sc_CPtSet_Sg__containsImpl(arg1,(DPItem const &)*arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DPItemToCPtSetMap_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  std::map< DPItem,CPtSet > *arg1 = (std::map< DPItem,CPtSet > *) 0 ; DPItem *arg2 = 0 ; CPtSet *arg3 = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::map< DPItem,CPtSet > **)&jarg1;  arg2 = *(DPItem **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DPItem const & reference is null"); return ; }  
  arg3 = *(CPtSet **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CPtSet const & reference is null"); return ; }  
  std_map_Sl_DPItem_Sc_CPtSet_Sg__putUnchecked(arg1,(DPItem const &)*arg2,(CPtSet const &)*arg3); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DPItemToCPtSetMap_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< DPItem,CPtSet > *arg1 = (std::map< DPItem,CPtSet > *) 0 ;
  std::map< DPItem,CPtSet,std::less< DPItem > >::iterator arg2 ;
  std::map< DPItem,CPtSet,std::less< DPItem > >::iterator const *argp2 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(std::map< DPItem,CPtSet > **)&jarg1;  argp2 = *(std::map< DPItem,CPtSet,std::less< DPItem > >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< DPItem,CPtSet,std::less< DPItem > >::iterator const");
    return ; }  arg2 = *argp2;  std_map_Sl_DPItem_Sc_CPtSet_Sg__removeUnchecked(arg1,arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1DPItemToCPtSetMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< DPItem,CPtSet > *arg1 = (std::map< DPItem,CPtSet > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::map< DPItem,CPtSet > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1DPMToCVarMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::map< DPItem,CVar > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::map< DPItem,CVar > *)new std::map< DPItem,CVar >(); *(std::map< DPItem,CVar > **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1DPMToCVarMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< DPItem,CVar > *arg1 = 0 ; std::map< DPItem,CVar > *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< DPItem,CVar > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< DPItem,CVar > const & reference is null");
    return 0; }   result = (std::map< DPItem,CVar > *)new std::map< DPItem,CVar >((std::map< DPItem,CVar > const &)*arg1);
  *(std::map< DPItem,CVar > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DPMToCVarMap_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< DPItem,CVar >::iterator *arg1 = (std::map< DPItem,CVar >::iterator *) 0 ;
  std::map< DPItem,CVar,std::less< DPItem > >::iterator result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< DPItem,CVar >::iterator **)&jarg1;  result = std_map_Sl_DPItem_Sc_CVar_Sg__iterator_getNextUnchecked(arg1);
  *(std::map< DPItem,CVar,std::less< DPItem > >::iterator **)&jresult = new std::map< DPItem,CVar,std::less< DPItem > >::iterator((const std::map< DPItem,CVar,std::less< DPItem > >::iterator &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_DPMToCVarMap_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; std::map< DPItem,CVar >::iterator *arg1 = (std::map< DPItem,CVar >::iterator *) 0 ;
  std::map< DPItem,CVar >::iterator arg2 ; std::map< DPItem,CVar >::iterator *argp2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(std::map< DPItem,CVar >::iterator **)&jarg1; 
  argp2 = *(std::map< DPItem,CVar >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< DPItem,CVar >::iterator");
    return 0; }  arg2 = *argp2; 
  result = (bool)std_map_Sl_DPItem_Sc_CVar_Sg__iterator_isNot((std::map< DPItem,CVar >::iterator const *)arg1,arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DPMToCVarMap_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< DPItem,CVar >::iterator *arg1 = (std::map< DPItem,CVar >::iterator *) 0 ; DPItem result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< DPItem,CVar >::iterator **)&jarg1; 
  result = std_map_Sl_DPItem_Sc_CVar_Sg__iterator_getKey((std::map< DPItem,CVar >::iterator const *)arg1);
  *(DPItem **)&jresult = new DPItem((const DPItem &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DPMToCVarMap_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< DPItem,CVar >::iterator *arg1 = (std::map< DPItem,CVar >::iterator *) 0 ; CVar result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< DPItem,CVar >::iterator **)&jarg1; 
  result = std_map_Sl_DPItem_Sc_CVar_Sg__iterator_getValue((std::map< DPItem,CVar >::iterator const *)arg1);
  *(CVar **)&jresult = new CVar((const CVar &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DPMToCVarMap_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::map< DPItem,CVar >::iterator *arg1 = (std::map< DPItem,CVar >::iterator *) 0 ; CVar *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< DPItem,CVar >::iterator **)&jarg1;  arg2 = *(CVar **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CVar const & reference is null"); return ; }  
  std_map_Sl_DPItem_Sc_CVar_Sg__iterator_setValue(arg1,(CVar const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1DPMToCVarMap_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< DPItem,CVar >::iterator *arg1 = (std::map< DPItem,CVar >::iterator *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::map< DPItem,CVar >::iterator **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_DPMToCVarMap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::map< DPItem,CVar > *arg1 = (std::map< DPItem,CVar > *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< DPItem,CVar > **)&jarg1;  result = (bool)((std::map< DPItem,CVar > const *)arg1)->empty();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DPMToCVarMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< DPItem,CVar > *arg1 = (std::map< DPItem,CVar > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< DPItem,CVar > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DPMToCVarMap_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; std::map< DPItem,CVar > *arg1 = (std::map< DPItem,CVar > *) 0 ; DPItem *arg2 = 0 ;
  std::map< DPItem,CVar >::iterator result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< DPItem,CVar > **)&jarg1; 
  arg2 = *(DPItem **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DPItem const & reference is null"); return 0; }  
  result = (arg1)->find((DPItem const &)*arg2);
  *(std::map< DPItem,CVar >::iterator **)&jresult = new std::map< DPItem,CVar >::iterator((const std::map< DPItem,CVar >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DPMToCVarMap_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< DPItem,CVar > *arg1 = (std::map< DPItem,CVar > *) 0 ; std::map< DPItem,CVar >::iterator result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< DPItem,CVar > **)&jarg1;  result = (arg1)->begin();
  *(std::map< DPItem,CVar >::iterator **)&jresult = new std::map< DPItem,CVar >::iterator((const std::map< DPItem,CVar >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DPMToCVarMap_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< DPItem,CVar > *arg1 = (std::map< DPItem,CVar > *) 0 ; std::map< DPItem,CVar >::iterator result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< DPItem,CVar > **)&jarg1;  result = (arg1)->end();
  *(std::map< DPItem,CVar >::iterator **)&jresult = new std::map< DPItem,CVar >::iterator((const std::map< DPItem,CVar >::iterator &)result); 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_DPMToCVarMap_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::map< DPItem,CVar > *arg1 = (std::map< DPItem,CVar > *) 0 ; jint result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< DPItem,CVar > **)&jarg1;  try {
    result = std_map_Sl_DPItem_Sc_CVar_Sg__sizeImpl((std::map< DPItem,CVar > const *)arg1);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; }  jresult = result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_DPMToCVarMap_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::map< DPItem,CVar > *arg1 = (std::map< DPItem,CVar > *) 0 ; DPItem *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< DPItem,CVar > **)&jarg1;  arg2 = *(DPItem **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DPItem const & reference is null"); return 0; }  
  result = (bool)std_map_Sl_DPItem_Sc_CVar_Sg__containsImpl(arg1,(DPItem const &)*arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DPMToCVarMap_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  std::map< DPItem,CVar > *arg1 = (std::map< DPItem,CVar > *) 0 ; DPItem *arg2 = 0 ; CVar *arg3 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< DPItem,CVar > **)&jarg1;  arg2 = *(DPItem **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DPItem const & reference is null"); return ; }  
  arg3 = *(CVar **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CVar const & reference is null"); return ; }  
  std_map_Sl_DPItem_Sc_CVar_Sg__putUnchecked(arg1,(DPItem const &)*arg2,(CVar const &)*arg3); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DPMToCVarMap_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< DPItem,CVar > *arg1 = (std::map< DPItem,CVar > *) 0 ; std::map< DPItem,CVar,std::less< DPItem > >::iterator arg2 ;
  std::map< DPItem,CVar,std::less< DPItem > >::iterator const *argp2 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(std::map< DPItem,CVar > **)&jarg1;  argp2 = *(std::map< DPItem,CVar,std::less< DPItem > >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< DPItem,CVar,std::less< DPItem > >::iterator const");
    return ; }  arg2 = *argp2;  std_map_Sl_DPItem_Sc_CVar_Sg__removeUnchecked(arg1,arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1DPMToCVarMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< DPItem,CVar > *arg1 = (std::map< DPItem,CVar > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::map< DPItem,CVar > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1DPMToDPMMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::map< DPItem,DPItem > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::map< DPItem,DPItem > *)new std::map< DPItem,DPItem >(); *(std::map< DPItem,DPItem > **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1DPMToDPMMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< DPItem,DPItem > *arg1 = 0 ; std::map< DPItem,DPItem > *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< DPItem,DPItem > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< DPItem,DPItem > const & reference is null");
    return 0; }   result = (std::map< DPItem,DPItem > *)new std::map< DPItem,DPItem >((std::map< DPItem,DPItem > const &)*arg1);
  *(std::map< DPItem,DPItem > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DPMToDPMMap_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< DPItem,DPItem >::iterator *arg1 = (std::map< DPItem,DPItem >::iterator *) 0 ;
  std::map< DPItem,DPItem,std::less< DPItem > >::iterator result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< DPItem,DPItem >::iterator **)&jarg1; 
  result = std_map_Sl_DPItem_Sc_DPItem_Sg__iterator_getNextUnchecked(arg1);
  *(std::map< DPItem,DPItem,std::less< DPItem > >::iterator **)&jresult = new std::map< DPItem,DPItem,std::less< DPItem > >::iterator((const std::map< DPItem,DPItem,std::less< DPItem > >::iterator &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_DPMToDPMMap_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; std::map< DPItem,DPItem >::iterator *arg1 = (std::map< DPItem,DPItem >::iterator *) 0 ;
  std::map< DPItem,DPItem >::iterator arg2 ; std::map< DPItem,DPItem >::iterator *argp2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(std::map< DPItem,DPItem >::iterator **)&jarg1; 
  argp2 = *(std::map< DPItem,DPItem >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< DPItem,DPItem >::iterator");
    return 0; }  arg2 = *argp2; 
  result = (bool)std_map_Sl_DPItem_Sc_DPItem_Sg__iterator_isNot((std::map< DPItem,DPItem >::iterator const *)arg1,arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DPMToDPMMap_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< DPItem,DPItem >::iterator *arg1 = (std::map< DPItem,DPItem >::iterator *) 0 ; DPItem result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< DPItem,DPItem >::iterator **)&jarg1; 
  result = std_map_Sl_DPItem_Sc_DPItem_Sg__iterator_getKey((std::map< DPItem,DPItem >::iterator const *)arg1);
  *(DPItem **)&jresult = new DPItem((const DPItem &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DPMToDPMMap_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< DPItem,DPItem >::iterator *arg1 = (std::map< DPItem,DPItem >::iterator *) 0 ; DPItem result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< DPItem,DPItem >::iterator **)&jarg1; 
  result = std_map_Sl_DPItem_Sc_DPItem_Sg__iterator_getValue((std::map< DPItem,DPItem >::iterator const *)arg1);
  *(DPItem **)&jresult = new DPItem((const DPItem &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DPMToDPMMap_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::map< DPItem,DPItem >::iterator *arg1 = (std::map< DPItem,DPItem >::iterator *) 0 ; DPItem *arg2 = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::map< DPItem,DPItem >::iterator **)&jarg1;  arg2 = *(DPItem **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DPItem const & reference is null"); return ; }  
  std_map_Sl_DPItem_Sc_DPItem_Sg__iterator_setValue(arg1,(DPItem const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1DPMToDPMMap_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< DPItem,DPItem >::iterator *arg1 = (std::map< DPItem,DPItem >::iterator *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::map< DPItem,DPItem >::iterator **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_DPMToDPMMap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::map< DPItem,DPItem > *arg1 = (std::map< DPItem,DPItem > *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::map< DPItem,DPItem > **)&jarg1; 
  result = (bool)((std::map< DPItem,DPItem > const *)arg1)->empty(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DPMToDPMMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< DPItem,DPItem > *arg1 = (std::map< DPItem,DPItem > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< DPItem,DPItem > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DPMToDPMMap_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; std::map< DPItem,DPItem > *arg1 = (std::map< DPItem,DPItem > *) 0 ; DPItem *arg2 = 0 ;
  std::map< DPItem,DPItem >::iterator result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< DPItem,DPItem > **)&jarg1;  arg2 = *(DPItem **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DPItem const & reference is null"); return 0; }  
  result = (arg1)->find((DPItem const &)*arg2);
  *(std::map< DPItem,DPItem >::iterator **)&jresult = new std::map< DPItem,DPItem >::iterator((const std::map< DPItem,DPItem >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DPMToDPMMap_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< DPItem,DPItem > *arg1 = (std::map< DPItem,DPItem > *) 0 ;
  std::map< DPItem,DPItem >::iterator result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< DPItem,DPItem > **)&jarg1;  result = (arg1)->begin();
  *(std::map< DPItem,DPItem >::iterator **)&jresult = new std::map< DPItem,DPItem >::iterator((const std::map< DPItem,DPItem >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DPMToDPMMap_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< DPItem,DPItem > *arg1 = (std::map< DPItem,DPItem > *) 0 ;
  std::map< DPItem,DPItem >::iterator result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< DPItem,DPItem > **)&jarg1;  result = (arg1)->end();
  *(std::map< DPItem,DPItem >::iterator **)&jresult = new std::map< DPItem,DPItem >::iterator((const std::map< DPItem,DPItem >::iterator &)result); 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_DPMToDPMMap_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::map< DPItem,DPItem > *arg1 = (std::map< DPItem,DPItem > *) 0 ; jint result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< DPItem,DPItem > **)&jarg1;  try {
    result = std_map_Sl_DPItem_Sc_DPItem_Sg__sizeImpl((std::map< DPItem,DPItem > const *)arg1);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; }  jresult = result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_DPMToDPMMap_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::map< DPItem,DPItem > *arg1 = (std::map< DPItem,DPItem > *) 0 ; DPItem *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< DPItem,DPItem > **)&jarg1;  arg2 = *(DPItem **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DPItem const & reference is null"); return 0; }  
  result = (bool)std_map_Sl_DPItem_Sc_DPItem_Sg__containsImpl(arg1,(DPItem const &)*arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DPMToDPMMap_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  std::map< DPItem,DPItem > *arg1 = (std::map< DPItem,DPItem > *) 0 ; DPItem *arg2 = 0 ; DPItem *arg3 = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::map< DPItem,DPItem > **)&jarg1;  arg2 = *(DPItem **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DPItem const & reference is null"); return ; }  
  arg3 = *(DPItem **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DPItem const & reference is null"); return ; }  
  std_map_Sl_DPItem_Sc_DPItem_Sg__putUnchecked(arg1,(DPItem const &)*arg2,(DPItem const &)*arg3); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DPMToDPMMap_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< DPItem,DPItem > *arg1 = (std::map< DPItem,DPItem > *) 0 ;
  std::map< DPItem,DPItem,std::less< DPItem > >::iterator arg2 ;
  std::map< DPItem,DPItem,std::less< DPItem > >::iterator const *argp2 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(std::map< DPItem,DPItem > **)&jarg1;  argp2 = *(std::map< DPItem,DPItem,std::less< DPItem > >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< DPItem,DPItem,std::less< DPItem > >::iterator const");
    return ; }  arg2 = *argp2;  std_map_Sl_DPItem_Sc_DPItem_Sg__removeUnchecked(arg1,arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1DPMToDPMMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< DPItem,DPItem > *arg1 = (std::map< DPItem,DPItem > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::map< DPItem,DPItem > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1StoreToPMSetMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::map< SVFGNode const *,DPTItemSet > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::map< SVFGNode const *,DPTItemSet > *)new std::map< SVFGNode const *,DPTItemSet >();
  *(std::map< SVFGNode const *,DPTItemSet > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1StoreToPMSetMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< SVFGNode const *,DPTItemSet > *arg1 = 0 ; std::map< SVFGNode const *,DPTItemSet > *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< SVFGNode const *,DPTItemSet > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< SVFGNode const *,DPTItemSet > const & reference is null");
    return 0; }  
  result = (std::map< SVFGNode const *,DPTItemSet > *)new std::map< SVFGNode const *,DPTItemSet >((std::map< SVFGNode const *,DPTItemSet > const &)*arg1);
  *(std::map< SVFGNode const *,DPTItemSet > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_StoreToPMSetMap_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< SVFGNode const *,DPTItemSet >::iterator *arg1 = (std::map< SVFGNode const *,DPTItemSet >::iterator *) 0 ;
  std::map< SVFGNode const *,DPTItemSet,std::less< SVFGNode const * > >::iterator result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< SVFGNode const *,DPTItemSet >::iterator **)&jarg1; 
  result = std_map_Sl_SVFGNode_SS_const_Sm__Sc_DPTItemSet_Sg__iterator_getNextUnchecked(arg1);
  *(std::map< SVFGNode const *,DPTItemSet,std::less< SVFGNode const * > >::iterator **)&jresult = new std::map< SVFGNode const *,DPTItemSet,std::less< SVFGNode const * > >::iterator((const std::map< SVFGNode const *,DPTItemSet,std::less< SVFGNode const * > >::iterator &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_StoreToPMSetMap_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::map< SVFGNode const *,DPTItemSet >::iterator *arg1 = (std::map< SVFGNode const *,DPTItemSet >::iterator *) 0 ;
  std::map< SVFGNode const *,DPTItemSet >::iterator arg2 ; std::map< SVFGNode const *,DPTItemSet >::iterator *argp2 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(std::map< SVFGNode const *,DPTItemSet >::iterator **)&jarg1; 
  argp2 = *(std::map< SVFGNode const *,DPTItemSet >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< SVFGNode const *,DPTItemSet >::iterator");
    return 0; }  arg2 = *argp2; 
  result = (bool)std_map_Sl_SVFGNode_SS_const_Sm__Sc_DPTItemSet_Sg__iterator_isNot((std::map< SVFGNode const *,DPTItemSet >::iterator const *)arg1,arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_StoreToPMSetMap_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< SVFGNode const *,DPTItemSet >::iterator *arg1 = (std::map< SVFGNode const *,DPTItemSet >::iterator *) 0 ;
  SVFGNode *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< SVFGNode const *,DPTItemSet >::iterator **)&jarg1; 
  result = (SVFGNode *)std_map_Sl_SVFGNode_SS_const_Sm__Sc_DPTItemSet_Sg__iterator_getKey((std::map< SVFGNode const *,DPTItemSet >::iterator const *)arg1);
  *(SVFGNode **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_StoreToPMSetMap_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< SVFGNode const *,DPTItemSet >::iterator *arg1 = (std::map< SVFGNode const *,DPTItemSet >::iterator *) 0 ;
  DPTItemSet result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< SVFGNode const *,DPTItemSet >::iterator **)&jarg1; 
  result = std_map_Sl_SVFGNode_SS_const_Sm__Sc_DPTItemSet_Sg__iterator_getValue((std::map< SVFGNode const *,DPTItemSet >::iterator const *)arg1);
  *(DPTItemSet **)&jresult = new DPTItemSet((const DPTItemSet &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_StoreToPMSetMap_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::map< SVFGNode const *,DPTItemSet >::iterator *arg1 = (std::map< SVFGNode const *,DPTItemSet >::iterator *) 0 ;
  DPTItemSet *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< SVFGNode const *,DPTItemSet >::iterator **)&jarg1;  arg2 = *(DPTItemSet **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DPTItemSet const & reference is null"); return ; }  
  std_map_Sl_SVFGNode_SS_const_Sm__Sc_DPTItemSet_Sg__iterator_setValue(arg1,(DPTItemSet const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1StoreToPMSetMap_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< SVFGNode const *,DPTItemSet >::iterator *arg1 = (std::map< SVFGNode const *,DPTItemSet >::iterator *) 0 ;
  (void)jenv; (void)jcls; arg1 = *(std::map< SVFGNode const *,DPTItemSet >::iterator **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_StoreToPMSetMap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::map< SVFGNode const *,DPTItemSet > *arg1 = (std::map< SVFGNode const *,DPTItemSet > *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< SVFGNode const *,DPTItemSet > **)&jarg1; 
  result = (bool)((std::map< SVFGNode const *,DPTItemSet > const *)arg1)->empty(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_StoreToPMSetMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< SVFGNode const *,DPTItemSet > *arg1 = (std::map< SVFGNode const *,DPTItemSet > *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< SVFGNode const *,DPTItemSet > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_StoreToPMSetMap_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; std::map< SVFGNode const *,DPTItemSet > *arg1 = (std::map< SVFGNode const *,DPTItemSet > *) 0 ;
  SVFGNode **arg2 = 0 ; SVFGNode *temp2 = 0 ; std::map< SVFGNode const *,DPTItemSet >::iterator result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< SVFGNode const *,DPTItemSet > **)&jarg1;  temp2 = *(SVFGNode **)&jarg2;
  arg2 = (SVFGNode **)&temp2;  result = (arg1)->find((SVFGNode const *const &)*arg2);
  *(std::map< SVFGNode const *,DPTItemSet >::iterator **)&jresult = new std::map< SVFGNode const *,DPTItemSet >::iterator((const std::map< SVFGNode const *,DPTItemSet >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_StoreToPMSetMap_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< SVFGNode const *,DPTItemSet > *arg1 = (std::map< SVFGNode const *,DPTItemSet > *) 0 ;
  std::map< SVFGNode const *,DPTItemSet >::iterator result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< SVFGNode const *,DPTItemSet > **)&jarg1;  result = (arg1)->begin();
  *(std::map< SVFGNode const *,DPTItemSet >::iterator **)&jresult = new std::map< SVFGNode const *,DPTItemSet >::iterator((const std::map< SVFGNode const *,DPTItemSet >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_StoreToPMSetMap_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< SVFGNode const *,DPTItemSet > *arg1 = (std::map< SVFGNode const *,DPTItemSet > *) 0 ;
  std::map< SVFGNode const *,DPTItemSet >::iterator result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< SVFGNode const *,DPTItemSet > **)&jarg1;  result = (arg1)->end();
  *(std::map< SVFGNode const *,DPTItemSet >::iterator **)&jresult = new std::map< SVFGNode const *,DPTItemSet >::iterator((const std::map< SVFGNode const *,DPTItemSet >::iterator &)result); 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_StoreToPMSetMap_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::map< SVFGNode const *,DPTItemSet > *arg1 = (std::map< SVFGNode const *,DPTItemSet > *) 0 ;
  jint result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< SVFGNode const *,DPTItemSet > **)&jarg1;  try {
    result = std_map_Sl_SVFGNode_SS_const_Sm__Sc_DPTItemSet_Sg__sizeImpl((std::map< SVFGNode const *,DPTItemSet > const *)arg1);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_StoreToPMSetMap_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::map< SVFGNode const *,DPTItemSet > *arg1 = (std::map< SVFGNode const *,DPTItemSet > *) 0 ;
  SVFGNode **arg2 = 0 ; SVFGNode *temp2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< SVFGNode const *,DPTItemSet > **)&jarg1;  temp2 = *(SVFGNode **)&jarg2; arg2 = (SVFGNode **)&temp2; 
  result = (bool)std_map_Sl_SVFGNode_SS_const_Sm__Sc_DPTItemSet_Sg__containsImpl(arg1,(SVFGNode const *const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_StoreToPMSetMap_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  std::map< SVFGNode const *,DPTItemSet > *arg1 = (std::map< SVFGNode const *,DPTItemSet > *) 0 ; SVFGNode **arg2 = 0 ;
  DPTItemSet *arg3 = 0 ; SVFGNode *temp2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< SVFGNode const *,DPTItemSet > **)&jarg1;  temp2 = *(SVFGNode **)&jarg2; arg2 = (SVFGNode **)&temp2; 
  arg3 = *(DPTItemSet **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DPTItemSet const & reference is null"); return ; }  
  std_map_Sl_SVFGNode_SS_const_Sm__Sc_DPTItemSet_Sg__putUnchecked(arg1,(SVFGNode const *const &)*arg2,(DPTItemSet const &)*arg3); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_StoreToPMSetMap_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< SVFGNode const *,DPTItemSet > *arg1 = (std::map< SVFGNode const *,DPTItemSet > *) 0 ;
  std::map< SVFGNode const *,DPTItemSet,std::less< SVFGNode const * > >::iterator arg2 ;
  std::map< SVFGNode const *,DPTItemSet,std::less< SVFGNode const * > >::iterator const *argp2 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(std::map< SVFGNode const *,DPTItemSet > **)&jarg1; 
  argp2 = *(std::map< SVFGNode const *,DPTItemSet,std::less< SVFGNode const * > >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< SVFGNode const *,DPTItemSet,std::less< SVFGNode const * > >::iterator const");
    return ; }  arg2 = *argp2;  std_map_Sl_SVFGNode_SS_const_Sm__Sc_DPTItemSet_Sg__removeUnchecked(arg1,arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1StoreToPMSetMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< SVFGNode const *,DPTItemSet > *arg1 = (std::map< SVFGNode const *,DPTItemSet > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::map< SVFGNode const *,DPTItemSet > **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_CallSiteSet_1Iterator_1incrementUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::set< CallSite >::iterator *arg1 = (std::set< CallSite >::iterator *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::set< CallSite >::iterator **)&jarg1;  std_set_Sl_CallSite_Sg__iterator_incrementUnchecked(arg1); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_CallSiteSet_1Iterator_1derefUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::set< CallSite >::iterator *arg1 = (std::set< CallSite >::iterator *) 0 ; llvm::CallSite result;
  (void)jenv; (void)jcls; arg1 = *(std::set< CallSite >::iterator **)&jarg1; 
  result = std_set_Sl_CallSite_Sg__iterator_derefUnchecked((std::set< llvm::CallSite >::iterator const *)arg1);
  *(llvm::CallSite **)&jresult = new llvm::CallSite((const llvm::CallSite &)result);  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_CallSiteSet_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::set< CallSite >::iterator *arg1 = (std::set< CallSite >::iterator *) 0 ;
  SwigValueWrapper< std::set< llvm::CallSite >::iterator > arg2 ; std::set< llvm::CallSite >::iterator *argp2 ; bool result;
  (void)jenv; (void)jcls; arg1 = *(std::set< CallSite >::iterator **)&jarg1; 
  argp2 = *(std::set< llvm::CallSite >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::set< llvm::CallSite >::iterator");
    return 0; }  arg2 = *argp2; 
  result = (bool)std_set_Sl_CallSite_Sg__iterator_isNot((std::set< llvm::CallSite >::iterator const *)arg1,arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1CallSiteSet_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::set< CallSite >::iterator *arg1 = (std::set< CallSite >::iterator *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::set< CallSite >::iterator **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1CallSiteSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::set< CallSite > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::set< CallSite > *)new std::set< CallSite >(); *(std::set< CallSite > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1CallSiteSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::set< CallSite > *arg1 = 0 ; std::set< CallSite > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< CallSite > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::set< CallSite > const & reference is null"); return 0; }
    result = (std::set< CallSite > *)new std::set< CallSite >((std::set< CallSite > const &)*arg1);
  *(std::set< CallSite > **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_CallSiteSet_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::set< CallSite > *arg1 = (std::set< CallSite > *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::set< CallSite > **)&jarg1;  result = (bool)((std::set< CallSite > const *)arg1)->empty();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_CallSiteSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::set< CallSite > *arg1 = (std::set< CallSite > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< CallSite > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_CallSiteSet_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::set< CallSite > *arg1 = (std::set< CallSite > *) 0 ;
  SwigValueWrapper< std::set< llvm::CallSite >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< CallSite > **)&jarg1;  result = (arg1)->begin();
  *(std::set< llvm::CallSite >::iterator **)&jresult = new std::set< llvm::CallSite >::iterator((const std::set< llvm::CallSite >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_CallSiteSet_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::set< CallSite > *arg1 = (std::set< CallSite > *) 0 ;
  SwigValueWrapper< std::set< llvm::CallSite >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< CallSite > **)&jarg1;  result = (arg1)->end();
  *(std::set< llvm::CallSite >::iterator **)&jresult = new std::set< llvm::CallSite >::iterator((const std::set< llvm::CallSite >::iterator &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_CallSiteSet_1addImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::set< CallSite > *arg1 = (std::set< CallSite > *) 0 ; llvm::CallSite *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::set< CallSite > **)&jarg1;  arg2 = *(llvm::CallSite **)&jarg2;
  if (!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::CallSite const & reference is null");
    return 0; }   result = (bool)std_set_Sl_CallSite_Sg__addImpl(arg1,(llvm::CallSite const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_CallSiteSet_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::set< CallSite > *arg1 = (std::set< CallSite > *) 0 ; llvm::CallSite *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::set< CallSite > **)&jarg1;  arg2 = *(llvm::CallSite **)&jarg2;
  if (!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::CallSite const & reference is null");
    return 0; }   result = (bool)std_set_Sl_CallSite_Sg__containsImpl(arg1,(llvm::CallSite const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_CallSiteSet_1removeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::set< CallSite > *arg1 = (std::set< CallSite > *) 0 ; llvm::CallSite *arg2 = 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::set< CallSite > **)&jarg1;  arg2 = *(llvm::CallSite **)&jarg2;
  if (!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::CallSite const & reference is null");
    return 0; }   result = (bool)std_set_Sl_CallSite_Sg__removeImpl(arg1,(llvm::CallSite const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_CallSiteSet_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::set< CallSite > *arg1 = (std::set< CallSite > *) 0 ; jint result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::set< CallSite > **)&jarg1;  try {
    result = std_set_Sl_CallSite_Sg__sizeImpl((std::set< llvm::CallSite > const *)arg1);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; }  jresult = result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_CallSiteSet_1hasNextImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::set< CallSite > *arg1 = (std::set< CallSite > *) 0 ;
  std::set< llvm::CallSite >::iterator *arg2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< CallSite > **)&jarg1;  arg2 = *(std::set< llvm::CallSite >::iterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::set< llvm::CallSite >::iterator const & reference is null");
    return 0; }  
  result = (bool)std_set_Sl_CallSite_Sg__hasNextImpl((std::set< llvm::CallSite > const *)arg1,(std::set< llvm::CallSite >::iterator const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1CallSiteSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::set< CallSite > *arg1 = (std::set< CallSite > *) 0 ; (void)jenv; (void)jcls; arg1 = *(std::set< CallSite > **)&jarg1; 
  delete arg1; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_FunctionSet_1Iterator_1incrementUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::set< Function const * >::iterator *arg1 = (std::set< Function const * >::iterator *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::set< Function const * >::iterator **)&jarg1; 
  std_set_Sl_Function_SS_const_Sm__Sg__iterator_incrementUnchecked(arg1); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_FunctionSet_1Iterator_1derefUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::set< Function const * >::iterator *arg1 = (std::set< Function const * >::iterator *) 0 ;
  llvm::Function *result = 0 ; (void)jenv; (void)jcls; arg1 = *(std::set< Function const * >::iterator **)&jarg1; 
  result = (llvm::Function *)std_set_Sl_Function_SS_const_Sm__Sg__iterator_derefUnchecked((std::set< llvm::Function const * >::iterator const *)arg1);
  *(llvm::Function **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_FunctionSet_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::set< Function const * >::iterator *arg1 = (std::set< Function const * >::iterator *) 0 ;
  SwigValueWrapper< std::set< llvm::Function const * >::iterator > arg2 ; std::set< llvm::Function const * >::iterator *argp2 ;
  bool result; (void)jenv; (void)jcls; arg1 = *(std::set< Function const * >::iterator **)&jarg1; 
  argp2 = *(std::set< llvm::Function const * >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::set< llvm::Function const * >::iterator");
    return 0; }  arg2 = *argp2; 
  result = (bool)std_set_Sl_Function_SS_const_Sm__Sg__iterator_isNot((std::set< llvm::Function const * >::iterator const *)arg1,arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1FunctionSet_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::set< Function const * >::iterator *arg1 = (std::set< Function const * >::iterator *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::set< Function const * >::iterator **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1FunctionSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::set< Function const * > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::set< Function const * > *)new std::set< Function const * >();
  *(std::set< Function const * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1FunctionSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::set< Function const * > *arg1 = 0 ; std::set< Function const * > *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::set< Function const * > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::set< Function const * > const & reference is null");
    return 0; }  
  result = (std::set< Function const * > *)new std::set< Function const * >((std::set< Function const * > const &)*arg1);
  *(std::set< Function const * > **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_FunctionSet_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::set< Function const * > *arg1 = (std::set< Function const * > *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::set< Function const * > **)&jarg1; 
  result = (bool)((std::set< Function const * > const *)arg1)->empty(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_FunctionSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::set< Function const * > *arg1 = (std::set< Function const * > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< Function const * > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_FunctionSet_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::set< Function const * > *arg1 = (std::set< Function const * > *) 0 ;
  SwigValueWrapper< std::set< llvm::Function const * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< Function const * > **)&jarg1;  result = (arg1)->begin();
  *(std::set< llvm::Function const * >::iterator **)&jresult = new std::set< llvm::Function const * >::iterator((const std::set< llvm::Function const * >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_FunctionSet_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::set< Function const * > *arg1 = (std::set< Function const * > *) 0 ;
  SwigValueWrapper< std::set< llvm::Function const * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< Function const * > **)&jarg1;  result = (arg1)->end();
  *(std::set< llvm::Function const * >::iterator **)&jresult = new std::set< llvm::Function const * >::iterator((const std::set< llvm::Function const * >::iterator &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_FunctionSet_1addImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::set< Function const * > *arg1 = (std::set< Function const * > *) 0 ; llvm::Function **arg2 = 0 ;
  llvm::Function *temp2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< Function const * > **)&jarg1;  temp2 = *(llvm::Function **)&jarg2; arg2 = (llvm::Function **)&temp2; 
  result = (bool)std_set_Sl_Function_SS_const_Sm__Sg__addImpl(arg1,(llvm::Function const *const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_FunctionSet_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::set< Function const * > *arg1 = (std::set< Function const * > *) 0 ; llvm::Function **arg2 = 0 ;
  llvm::Function *temp2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< Function const * > **)&jarg1;  temp2 = *(llvm::Function **)&jarg2; arg2 = (llvm::Function **)&temp2; 
  result = (bool)std_set_Sl_Function_SS_const_Sm__Sg__containsImpl(arg1,(llvm::Function const *const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_FunctionSet_1removeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::set< Function const * > *arg1 = (std::set< Function const * > *) 0 ; llvm::Function **arg2 = 0 ;
  llvm::Function *temp2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< Function const * > **)&jarg1;  temp2 = *(llvm::Function **)&jarg2; arg2 = (llvm::Function **)&temp2; 
  result = (bool)std_set_Sl_Function_SS_const_Sm__Sg__removeImpl(arg1,(llvm::Function const *const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_FunctionSet_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::set< Function const * > *arg1 = (std::set< Function const * > *) 0 ; jint result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::set< Function const * > **)&jarg1;  try {
    result = std_set_Sl_Function_SS_const_Sm__Sg__sizeImpl((std::set< llvm::Function const * > const *)arg1);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_FunctionSet_1hasNextImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::set< Function const * > *arg1 = (std::set< Function const * > *) 0 ;
  std::set< llvm::Function const * >::iterator *arg2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< Function const * > **)&jarg1;  arg2 = *(std::set< llvm::Function const * >::iterator **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::set< llvm::Function const * >::iterator const & reference is null");
    return 0; }  
  result = (bool)std_set_Sl_Function_SS_const_Sm__Sg__hasNextImpl((std::set< llvm::Function const * > const *)arg1,(std::set< llvm::Function const * >::iterator const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1FunctionSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::set< Function const * > *arg1 = (std::set< Function const * > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::set< Function const * > **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_VTableSet_1Iterator_1incrementUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::set< GlobalValue const * >::iterator *arg1 = (std::set< GlobalValue const * >::iterator *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::set< GlobalValue const * >::iterator **)&jarg1; 
  std_set_Sl_GlobalValue_SS_const_Sm__Sg__iterator_incrementUnchecked(arg1); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_VTableSet_1Iterator_1derefUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::set< GlobalValue const * >::iterator *arg1 = (std::set< GlobalValue const * >::iterator *) 0 ;
  llvm::GlobalValue *result = 0 ; (void)jenv; (void)jcls; arg1 = *(std::set< GlobalValue const * >::iterator **)&jarg1; 
  result = (llvm::GlobalValue *)std_set_Sl_GlobalValue_SS_const_Sm__Sg__iterator_derefUnchecked((std::set< llvm::GlobalValue const * >::iterator const *)arg1);
  *(llvm::GlobalValue **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_VTableSet_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::set< GlobalValue const * >::iterator *arg1 = (std::set< GlobalValue const * >::iterator *) 0 ;
  SwigValueWrapper< std::set< llvm::GlobalValue const * >::iterator > arg2 ;
  std::set< llvm::GlobalValue const * >::iterator *argp2 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(std::set< GlobalValue const * >::iterator **)&jarg1; 
  argp2 = *(std::set< llvm::GlobalValue const * >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::set< llvm::GlobalValue const * >::iterator");
    return 0; }  arg2 = *argp2; 
  result = (bool)std_set_Sl_GlobalValue_SS_const_Sm__Sg__iterator_isNot((std::set< llvm::GlobalValue const * >::iterator const *)arg1,arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1VTableSet_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::set< GlobalValue const * >::iterator *arg1 = (std::set< GlobalValue const * >::iterator *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::set< GlobalValue const * >::iterator **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1VTableSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::set< GlobalValue const * > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::set< GlobalValue const * > *)new std::set< GlobalValue const * >();
  *(std::set< GlobalValue const * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1VTableSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::set< GlobalValue const * > *arg1 = 0 ; std::set< GlobalValue const * > *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::set< GlobalValue const * > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::set< GlobalValue const * > const & reference is null");
    return 0; }  
  result = (std::set< GlobalValue const * > *)new std::set< GlobalValue const * >((std::set< GlobalValue const * > const &)*arg1);
  *(std::set< GlobalValue const * > **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_VTableSet_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::set< GlobalValue const * > *arg1 = (std::set< GlobalValue const * > *) 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::set< GlobalValue const * > **)&jarg1; 
  result = (bool)((std::set< GlobalValue const * > const *)arg1)->empty(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_VTableSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::set< GlobalValue const * > *arg1 = (std::set< GlobalValue const * > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< GlobalValue const * > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_VTableSet_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::set< GlobalValue const * > *arg1 = (std::set< GlobalValue const * > *) 0 ;
  SwigValueWrapper< std::set< llvm::GlobalValue const * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< GlobalValue const * > **)&jarg1;  result = (arg1)->begin();
  *(std::set< llvm::GlobalValue const * >::iterator **)&jresult = new std::set< llvm::GlobalValue const * >::iterator((const std::set< llvm::GlobalValue const * >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_VTableSet_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::set< GlobalValue const * > *arg1 = (std::set< GlobalValue const * > *) 0 ;
  SwigValueWrapper< std::set< llvm::GlobalValue const * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< GlobalValue const * > **)&jarg1;  result = (arg1)->end();
  *(std::set< llvm::GlobalValue const * >::iterator **)&jresult = new std::set< llvm::GlobalValue const * >::iterator((const std::set< llvm::GlobalValue const * >::iterator &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_VTableSet_1addImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::set< GlobalValue const * > *arg1 = (std::set< GlobalValue const * > *) 0 ;
  llvm::GlobalValue **arg2 = 0 ; llvm::GlobalValue *temp2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< GlobalValue const * > **)&jarg1;  temp2 = *(llvm::GlobalValue **)&jarg2;
  arg2 = (llvm::GlobalValue **)&temp2; 
  result = (bool)std_set_Sl_GlobalValue_SS_const_Sm__Sg__addImpl(arg1,(llvm::GlobalValue const *const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_VTableSet_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::set< GlobalValue const * > *arg1 = (std::set< GlobalValue const * > *) 0 ;
  llvm::GlobalValue **arg2 = 0 ; llvm::GlobalValue *temp2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< GlobalValue const * > **)&jarg1;  temp2 = *(llvm::GlobalValue **)&jarg2;
  arg2 = (llvm::GlobalValue **)&temp2; 
  result = (bool)std_set_Sl_GlobalValue_SS_const_Sm__Sg__containsImpl(arg1,(llvm::GlobalValue const *const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_VTableSet_1removeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::set< GlobalValue const * > *arg1 = (std::set< GlobalValue const * > *) 0 ;
  llvm::GlobalValue **arg2 = 0 ; llvm::GlobalValue *temp2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< GlobalValue const * > **)&jarg1;  temp2 = *(llvm::GlobalValue **)&jarg2;
  arg2 = (llvm::GlobalValue **)&temp2; 
  result = (bool)std_set_Sl_GlobalValue_SS_const_Sm__Sg__removeImpl(arg1,(llvm::GlobalValue const *const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_VTableSet_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::set< GlobalValue const * > *arg1 = (std::set< GlobalValue const * > *) 0 ; jint result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::set< GlobalValue const * > **)&jarg1;  try {
    result = std_set_Sl_GlobalValue_SS_const_Sm__Sg__sizeImpl((std::set< llvm::GlobalValue const * > const *)arg1);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_VTableSet_1hasNextImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::set< GlobalValue const * > *arg1 = (std::set< GlobalValue const * > *) 0 ;
  std::set< llvm::GlobalValue const * >::iterator *arg2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< GlobalValue const * > **)&jarg1;  arg2 = *(std::set< llvm::GlobalValue const * >::iterator **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::set< llvm::GlobalValue const * >::iterator const & reference is null");
    return 0; }  
  result = (bool)std_set_Sl_GlobalValue_SS_const_Sm__Sg__hasNextImpl((std::set< llvm::GlobalValue const * > const *)arg1,(std::set< llvm::GlobalValue const * >::iterator const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1VTableSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::set< GlobalValue const * > *arg1 = (std::set< GlobalValue const * > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::set< GlobalValue const * > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1CallEdgeMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::map< CallSite,FunctionSet > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::map< CallSite,FunctionSet > *)new std::map< CallSite,FunctionSet >();
  *(std::map< CallSite,FunctionSet > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1CallEdgeMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< CallSite,FunctionSet > *arg1 = 0 ; std::map< CallSite,FunctionSet > *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::map< CallSite,FunctionSet > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< CallSite,FunctionSet > const & reference is null");
    return 0; }  
  result = (std::map< CallSite,FunctionSet > *)new std::map< CallSite,FunctionSet >((std::map< CallSite,FunctionSet > const &)*arg1);
  *(std::map< CallSite,FunctionSet > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_CallEdgeMap_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::map< CallSite,FunctionSet >::iterator *arg1 = (std::map< CallSite,FunctionSet >::iterator *) 0 ;
  SwigValueWrapper< std::map< llvm::CallSite,FunctionSet >::iterator > result; (void)jenv; (void)jcls;
  arg1 = *(std::map< CallSite,FunctionSet >::iterator **)&jarg1; 
  result = std_map_Sl_CallSite_Sc_FunctionSet_Sg__iterator_getNextUnchecked(arg1);
  *(std::map< llvm::CallSite,FunctionSet,std::less< llvm::CallSite > >::iterator **)&jresult = new std::map< llvm::CallSite,FunctionSet,std::less< llvm::CallSite > >::iterator((const std::map< llvm::CallSite,FunctionSet,std::less< llvm::CallSite > >::iterator &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_CallEdgeMap_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::map< CallSite,FunctionSet >::iterator *arg1 = (std::map< CallSite,FunctionSet >::iterator *) 0 ;
  SwigValueWrapper< std::map< llvm::CallSite,FunctionSet >::iterator > arg2 ;
  std::map< llvm::CallSite,FunctionSet >::iterator *argp2 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(std::map< CallSite,FunctionSet >::iterator **)&jarg1; 
  argp2 = *(std::map< llvm::CallSite,FunctionSet >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< llvm::CallSite,FunctionSet >::iterator");
    return 0; }  arg2 = *argp2; 
  result = (bool)std_map_Sl_CallSite_Sc_FunctionSet_Sg__iterator_isNot((std::map< llvm::CallSite,FunctionSet >::iterator const *)arg1,arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_CallEdgeMap_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::map< CallSite,FunctionSet >::iterator *arg1 = (std::map< CallSite,FunctionSet >::iterator *) 0 ;
  llvm::CallSite result; (void)jenv; (void)jcls; arg1 = *(std::map< CallSite,FunctionSet >::iterator **)&jarg1; 
  result = std_map_Sl_CallSite_Sc_FunctionSet_Sg__iterator_getKey((std::map< llvm::CallSite,FunctionSet >::iterator const *)arg1);
  *(llvm::CallSite **)&jresult = new llvm::CallSite((const llvm::CallSite &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_CallEdgeMap_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::map< CallSite,FunctionSet >::iterator *arg1 = (std::map< CallSite,FunctionSet >::iterator *) 0 ;
  FunctionSet result; (void)jenv; (void)jcls; arg1 = *(std::map< CallSite,FunctionSet >::iterator **)&jarg1; 
  result = std_map_Sl_CallSite_Sc_FunctionSet_Sg__iterator_getValue((std::map< llvm::CallSite,FunctionSet >::iterator const *)arg1);
  *(FunctionSet **)&jresult = new FunctionSet((const FunctionSet &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_CallEdgeMap_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::map< CallSite,FunctionSet >::iterator *arg1 = (std::map< CallSite,FunctionSet >::iterator *) 0 ; FunctionSet *arg2 = 0 ;
  (void)jenv; (void)jcls; arg1 = *(std::map< CallSite,FunctionSet >::iterator **)&jarg1;  arg2 = *(FunctionSet **)&jarg2;
  if (!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FunctionSet const & reference is null"); return ; }
    std_map_Sl_CallSite_Sc_FunctionSet_Sg__iterator_setValue(arg1,(FunctionSet const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1CallEdgeMap_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< CallSite,FunctionSet >::iterator *arg1 = (std::map< CallSite,FunctionSet >::iterator *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::map< CallSite,FunctionSet >::iterator **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_CallEdgeMap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::map< CallSite,FunctionSet > *arg1 = (std::map< CallSite,FunctionSet > *) 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< CallSite,FunctionSet > **)&jarg1; 
  result = (bool)((std::map< CallSite,FunctionSet > const *)arg1)->empty(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_CallEdgeMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< CallSite,FunctionSet > *arg1 = (std::map< CallSite,FunctionSet > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< CallSite,FunctionSet > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_CallEdgeMap_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; std::map< CallSite,FunctionSet > *arg1 = (std::map< CallSite,FunctionSet > *) 0 ;
  llvm::CallSite *arg2 = 0 ; SwigValueWrapper< std::map< llvm::CallSite,FunctionSet >::iterator > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::map< CallSite,FunctionSet > **)&jarg1;  arg2 = *(llvm::CallSite **)&jarg2;
  if (!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::CallSite const & reference is null");
    return 0; }   result = (arg1)->find((llvm::CallSite const &)*arg2);
  *(std::map< llvm::CallSite,FunctionSet >::iterator **)&jresult = new std::map< llvm::CallSite,FunctionSet >::iterator((const std::map< llvm::CallSite,FunctionSet >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_CallEdgeMap_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< CallSite,FunctionSet > *arg1 = (std::map< CallSite,FunctionSet > *) 0 ;
  SwigValueWrapper< std::map< llvm::CallSite,FunctionSet >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< CallSite,FunctionSet > **)&jarg1;  result = (arg1)->begin();
  *(std::map< llvm::CallSite,FunctionSet >::iterator **)&jresult = new std::map< llvm::CallSite,FunctionSet >::iterator((const std::map< llvm::CallSite,FunctionSet >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_CallEdgeMap_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< CallSite,FunctionSet > *arg1 = (std::map< CallSite,FunctionSet > *) 0 ;
  SwigValueWrapper< std::map< llvm::CallSite,FunctionSet >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< CallSite,FunctionSet > **)&jarg1;  result = (arg1)->end();
  *(std::map< llvm::CallSite,FunctionSet >::iterator **)&jresult = new std::map< llvm::CallSite,FunctionSet >::iterator((const std::map< llvm::CallSite,FunctionSet >::iterator &)result); 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_CallEdgeMap_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::map< CallSite,FunctionSet > *arg1 = (std::map< CallSite,FunctionSet > *) 0 ; jint result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::map< CallSite,FunctionSet > **)&jarg1;  try {
    result = std_map_Sl_CallSite_Sc_FunctionSet_Sg__sizeImpl((std::map< llvm::CallSite,FunctionSet > const *)arg1);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_CallEdgeMap_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::map< CallSite,FunctionSet > *arg1 = (std::map< CallSite,FunctionSet > *) 0 ;
  llvm::CallSite *arg2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< CallSite,FunctionSet > **)&jarg1;  arg2 = *(llvm::CallSite **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::CallSite const & reference is null"); return 0; }  
  result = (bool)std_map_Sl_CallSite_Sc_FunctionSet_Sg__containsImpl(arg1,(llvm::CallSite const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_CallEdgeMap_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  std::map< CallSite,FunctionSet > *arg1 = (std::map< CallSite,FunctionSet > *) 0 ; llvm::CallSite *arg2 = 0 ;
  FunctionSet *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< CallSite,FunctionSet > **)&jarg1; 
  arg2 = *(llvm::CallSite **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::CallSite const & reference is null"); return ; }  
  arg3 = *(FunctionSet **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FunctionSet const & reference is null"); return ; }  
  std_map_Sl_CallSite_Sc_FunctionSet_Sg__putUnchecked(arg1,(llvm::CallSite const &)*arg2,(FunctionSet const &)*arg3); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_CallEdgeMap_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::map< CallSite,FunctionSet > *arg1 = (std::map< CallSite,FunctionSet > *) 0 ;
  SwigValueWrapper< std::map< llvm::CallSite,FunctionSet >::iterator > arg2 ;
  std::map< llvm::CallSite,FunctionSet,std::less< llvm::CallSite > >::iterator const *argp2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< CallSite,FunctionSet > **)&jarg1; 
  argp2 = *(std::map< llvm::CallSite,FunctionSet,std::less< llvm::CallSite > >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< llvm::CallSite,FunctionSet,std::less< llvm::CallSite > >::iterator const");
    return ; }  arg2 = *argp2;  std_map_Sl_CallSite_Sc_FunctionSet_Sg__removeUnchecked(arg1,arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1CallEdgeMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< CallSite,FunctionSet > *arg1 = (std::map< CallSite,FunctionSet > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::map< CallSite,FunctionSet > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1PtrToBVPtsMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::map< NodeID,PointsTo > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::map< NodeID,PointsTo > *)new std::map< NodeID,PointsTo >();
  *(std::map< NodeID,PointsTo > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1PtrToBVPtsMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< NodeID,PointsTo > *arg1 = 0 ; std::map< NodeID,PointsTo > *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< NodeID,PointsTo > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< NodeID,PointsTo > const & reference is null");
    return 0; }  
  result = (std::map< NodeID,PointsTo > *)new std::map< NodeID,PointsTo >((std::map< NodeID,PointsTo > const &)*arg1);
  *(std::map< NodeID,PointsTo > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PtrToBVPtsMap_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::map< NodeID,PointsTo >::iterator *arg1 = (std::map< NodeID,PointsTo >::iterator *) 0 ;
  SwigValueWrapper< std::map< unsigned int,llvm::SparseBitVector< > >::iterator > result; (void)jenv; (void)jcls;
  arg1 = *(std::map< NodeID,PointsTo >::iterator **)&jarg1; 
  result = std_map_Sl_NodeID_Sc_PointsTo_Sg__iterator_getNextUnchecked(arg1);
  *(std::map< unsigned int,llvm::SparseBitVector< >,std::less< unsigned int > >::iterator **)&jresult = new std::map< unsigned int,llvm::SparseBitVector< >,std::less< unsigned int > >::iterator((const std::map< unsigned int,llvm::SparseBitVector< >,std::less< unsigned int > >::iterator &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_PtrToBVPtsMap_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::map< NodeID,PointsTo >::iterator *arg1 = (std::map< NodeID,PointsTo >::iterator *) 0 ;
  SwigValueWrapper< std::map< unsigned int,llvm::SparseBitVector< > >::iterator > arg2 ;
  std::map< unsigned int,llvm::SparseBitVector< > >::iterator *argp2 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(std::map< NodeID,PointsTo >::iterator **)&jarg1; 
  argp2 = *(std::map< unsigned int,llvm::SparseBitVector< > >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< unsigned int,llvm::SparseBitVector< > >::iterator");
    return 0; }  arg2 = *argp2; 
  result = (bool)std_map_Sl_NodeID_Sc_PointsTo_Sg__iterator_isNot((std::map< unsigned int,llvm::SparseBitVector< > >::iterator const *)arg1,arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PtrToBVPtsMap_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::map< NodeID,PointsTo >::iterator *arg1 = (std::map< NodeID,PointsTo >::iterator *) 0 ;
  unsigned int result; (void)jenv; (void)jcls; arg1 = *(std::map< NodeID,PointsTo >::iterator **)&jarg1; 
  result = (unsigned int)std_map_Sl_NodeID_Sc_PointsTo_Sg__iterator_getKey((std::map< unsigned int,llvm::SparseBitVector< > >::iterator const *)arg1);
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PtrToBVPtsMap_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::map< NodeID,PointsTo >::iterator *arg1 = (std::map< NodeID,PointsTo >::iterator *) 0 ;
  llvm::SparseBitVector< > result; (void)jenv; (void)jcls; arg1 = *(std::map< NodeID,PointsTo >::iterator **)&jarg1; 
  result = std_map_Sl_NodeID_Sc_PointsTo_Sg__iterator_getValue((std::map< unsigned int,llvm::SparseBitVector< > >::iterator const *)arg1);
  *(llvm::SparseBitVector< > **)&jresult = new llvm::SparseBitVector< >((const llvm::SparseBitVector< > &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PtrToBVPtsMap_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::map< NodeID,PointsTo >::iterator *arg1 = (std::map< NodeID,PointsTo >::iterator *) 0 ;
  llvm::SparseBitVector< > *arg2 = 0 ; (void)jenv; (void)jcls; arg1 = *(std::map< NodeID,PointsTo >::iterator **)&jarg1; 
  arg2 = *(llvm::SparseBitVector< > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::SparseBitVector< > const & reference is null");
    return ; }   std_map_Sl_NodeID_Sc_PointsTo_Sg__iterator_setValue(arg1,(llvm::SparseBitVector< > const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1PtrToBVPtsMap_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< NodeID,PointsTo >::iterator *arg1 = (std::map< NodeID,PointsTo >::iterator *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::map< NodeID,PointsTo >::iterator **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_PtrToBVPtsMap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::map< NodeID,PointsTo > *arg1 = (std::map< NodeID,PointsTo > *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::map< NodeID,PointsTo > **)&jarg1; 
  result = (bool)((std::map< NodeID,PointsTo > const *)arg1)->empty(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PtrToBVPtsMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< NodeID,PointsTo > *arg1 = (std::map< NodeID,PointsTo > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< NodeID,PointsTo > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PtrToBVPtsMap_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; std::map< NodeID,PointsTo > *arg1 = (std::map< NodeID,PointsTo > *) 0 ; unsigned int *arg2 = 0 ;
  unsigned int temp2 ; SwigValueWrapper< std::map< unsigned int,llvm::SparseBitVector< > >::iterator > result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::map< NodeID,PointsTo > **)&jarg1;  temp2 = (unsigned int)jarg2;  arg2 = &temp2; 
  result = (arg1)->find((unsigned int const &)*arg2);
  *(std::map< unsigned int,llvm::SparseBitVector< > >::iterator **)&jresult = new std::map< unsigned int,llvm::SparseBitVector< > >::iterator((const std::map< unsigned int,llvm::SparseBitVector< > >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PtrToBVPtsMap_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< NodeID,PointsTo > *arg1 = (std::map< NodeID,PointsTo > *) 0 ;
  SwigValueWrapper< std::map< unsigned int,llvm::SparseBitVector< > >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< NodeID,PointsTo > **)&jarg1;  result = (arg1)->begin();
  *(std::map< unsigned int,llvm::SparseBitVector< > >::iterator **)&jresult = new std::map< unsigned int,llvm::SparseBitVector< > >::iterator((const std::map< unsigned int,llvm::SparseBitVector< > >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PtrToBVPtsMap_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< NodeID,PointsTo > *arg1 = (std::map< NodeID,PointsTo > *) 0 ;
  SwigValueWrapper< std::map< unsigned int,llvm::SparseBitVector< > >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< NodeID,PointsTo > **)&jarg1;  result = (arg1)->end();
  *(std::map< unsigned int,llvm::SparseBitVector< > >::iterator **)&jresult = new std::map< unsigned int,llvm::SparseBitVector< > >::iterator((const std::map< unsigned int,llvm::SparseBitVector< > >::iterator &)result); 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_PtrToBVPtsMap_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::map< NodeID,PointsTo > *arg1 = (std::map< NodeID,PointsTo > *) 0 ; jint result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::map< NodeID,PointsTo > **)&jarg1;  try {
    result = std_map_Sl_NodeID_Sc_PointsTo_Sg__sizeImpl((std::map< unsigned int,llvm::SparseBitVector< > > const *)arg1);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_PtrToBVPtsMap_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::map< NodeID,PointsTo > *arg1 = (std::map< NodeID,PointsTo > *) 0 ; unsigned int *arg2 = 0 ;
  unsigned int temp2 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< NodeID,PointsTo > **)&jarg1; 
  temp2 = (unsigned int)jarg2;  arg2 = &temp2; 
  result = (bool)std_map_Sl_NodeID_Sc_PointsTo_Sg__containsImpl(arg1,(unsigned int const &)*arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PtrToBVPtsMap_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  std::map< NodeID,PointsTo > *arg1 = (std::map< NodeID,PointsTo > *) 0 ; unsigned int *arg2 = 0 ;
  llvm::SparseBitVector< > *arg3 = 0 ; unsigned int temp2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< NodeID,PointsTo > **)&jarg1;  temp2 = (unsigned int)jarg2;  arg2 = &temp2; 
  arg3 = *(llvm::SparseBitVector< > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "llvm::SparseBitVector< > const & reference is null");
    return ; }  
  std_map_Sl_NodeID_Sc_PointsTo_Sg__putUnchecked(arg1,(unsigned int const &)*arg2,(llvm::SparseBitVector< > const &)*arg3); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PtrToBVPtsMap_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::map< NodeID,PointsTo > *arg1 = (std::map< NodeID,PointsTo > *) 0 ;
  SwigValueWrapper< std::map< unsigned int,llvm::SparseBitVector< > >::iterator > arg2 ;
  std::map< unsigned int,llvm::SparseBitVector< >,std::less< unsigned int > >::iterator const *argp2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< NodeID,PointsTo > **)&jarg1; 
  argp2 = *(std::map< unsigned int,llvm::SparseBitVector< >,std::less< unsigned int > >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< unsigned int,llvm::SparseBitVector< >,std::less< unsigned int > >::iterator const");
    return ; }  arg2 = *argp2;  std_map_Sl_NodeID_Sc_PointsTo_Sg__removeUnchecked(arg1,arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1PtrToBVPtsMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< NodeID,PointsTo > *arg1 = (std::map< NodeID,PointsTo > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::map< NodeID,PointsTo > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1PtrCPtsMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::map< NodeID,CPtSet > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::map< NodeID,CPtSet > *)new std::map< NodeID,CPtSet >(); *(std::map< NodeID,CPtSet > **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1PtrCPtsMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< NodeID,CPtSet > *arg1 = 0 ; std::map< NodeID,CPtSet > *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< NodeID,CPtSet > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< NodeID,CPtSet > const & reference is null");
    return 0; }   result = (std::map< NodeID,CPtSet > *)new std::map< NodeID,CPtSet >((std::map< NodeID,CPtSet > const &)*arg1);
  *(std::map< NodeID,CPtSet > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PtrCPtsMap_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::map< NodeID,CPtSet >::iterator *arg1 = (std::map< NodeID,CPtSet >::iterator *) 0 ;
  SwigValueWrapper< std::map< unsigned int,CPtSet >::iterator > result; (void)jenv; (void)jcls;
  arg1 = *(std::map< NodeID,CPtSet >::iterator **)&jarg1; 
  result = std_map_Sl_NodeID_Sc_CPtSet_Sg__iterator_getNextUnchecked(arg1);
  *(std::map< unsigned int,CPtSet,std::less< unsigned int > >::iterator **)&jresult = new std::map< unsigned int,CPtSet,std::less< unsigned int > >::iterator((const std::map< unsigned int,CPtSet,std::less< unsigned int > >::iterator &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_PtrCPtsMap_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::map< NodeID,CPtSet >::iterator *arg1 = (std::map< NodeID,CPtSet >::iterator *) 0 ;
  SwigValueWrapper< std::map< unsigned int,CPtSet >::iterator > arg2 ; std::map< unsigned int,CPtSet >::iterator *argp2 ;
  bool result; (void)jenv; (void)jcls; arg1 = *(std::map< NodeID,CPtSet >::iterator **)&jarg1; 
  argp2 = *(std::map< unsigned int,CPtSet >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< unsigned int,CPtSet >::iterator");
    return 0; }  arg2 = *argp2; 
  result = (bool)std_map_Sl_NodeID_Sc_CPtSet_Sg__iterator_isNot((std::map< unsigned int,CPtSet >::iterator const *)arg1,arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PtrCPtsMap_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::map< NodeID,CPtSet >::iterator *arg1 = (std::map< NodeID,CPtSet >::iterator *) 0 ;
  unsigned int result; (void)jenv; (void)jcls; arg1 = *(std::map< NodeID,CPtSet >::iterator **)&jarg1; 
  result = (unsigned int)std_map_Sl_NodeID_Sc_CPtSet_Sg__iterator_getKey((std::map< unsigned int,CPtSet >::iterator const *)arg1);
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PtrCPtsMap_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::map< NodeID,CPtSet >::iterator *arg1 = (std::map< NodeID,CPtSet >::iterator *) 0 ; CPtSet result;
  (void)jenv; (void)jcls; arg1 = *(std::map< NodeID,CPtSet >::iterator **)&jarg1; 
  result = std_map_Sl_NodeID_Sc_CPtSet_Sg__iterator_getValue((std::map< unsigned int,CPtSet >::iterator const *)arg1);
  *(CPtSet **)&jresult = new CPtSet((const CPtSet &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PtrCPtsMap_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::map< NodeID,CPtSet >::iterator *arg1 = (std::map< NodeID,CPtSet >::iterator *) 0 ; CPtSet *arg2 = 0 ; (void)jenv;
  (void)jcls; arg1 = *(std::map< NodeID,CPtSet >::iterator **)&jarg1;  arg2 = *(CPtSet **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CPtSet const & reference is null"); return ; }  
  std_map_Sl_NodeID_Sc_CPtSet_Sg__iterator_setValue(arg1,(CPtSet const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1PtrCPtsMap_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< NodeID,CPtSet >::iterator *arg1 = (std::map< NodeID,CPtSet >::iterator *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::map< NodeID,CPtSet >::iterator **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_PtrCPtsMap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::map< NodeID,CPtSet > *arg1 = (std::map< NodeID,CPtSet > *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::map< NodeID,CPtSet > **)&jarg1; 
  result = (bool)((std::map< NodeID,CPtSet > const *)arg1)->empty(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PtrCPtsMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< NodeID,CPtSet > *arg1 = (std::map< NodeID,CPtSet > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< NodeID,CPtSet > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PtrCPtsMap_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; std::map< NodeID,CPtSet > *arg1 = (std::map< NodeID,CPtSet > *) 0 ; unsigned int *arg2 = 0 ;
  unsigned int temp2 ; SwigValueWrapper< std::map< unsigned int,CPtSet >::iterator > result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< NodeID,CPtSet > **)&jarg1;  temp2 = (unsigned int)jarg2;  arg2 = &temp2; 
  result = (arg1)->find((unsigned int const &)*arg2);
  *(std::map< unsigned int,CPtSet >::iterator **)&jresult = new std::map< unsigned int,CPtSet >::iterator((const std::map< unsigned int,CPtSet >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PtrCPtsMap_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< NodeID,CPtSet > *arg1 = (std::map< NodeID,CPtSet > *) 0 ;
  SwigValueWrapper< std::map< unsigned int,CPtSet >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< NodeID,CPtSet > **)&jarg1;  result = (arg1)->begin();
  *(std::map< unsigned int,CPtSet >::iterator **)&jresult = new std::map< unsigned int,CPtSet >::iterator((const std::map< unsigned int,CPtSet >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PtrCPtsMap_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< NodeID,CPtSet > *arg1 = (std::map< NodeID,CPtSet > *) 0 ;
  SwigValueWrapper< std::map< unsigned int,CPtSet >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< NodeID,CPtSet > **)&jarg1;  result = (arg1)->end();
  *(std::map< unsigned int,CPtSet >::iterator **)&jresult = new std::map< unsigned int,CPtSet >::iterator((const std::map< unsigned int,CPtSet >::iterator &)result); 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_PtrCPtsMap_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::map< NodeID,CPtSet > *arg1 = (std::map< NodeID,CPtSet > *) 0 ; jint result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< NodeID,CPtSet > **)&jarg1;  try {
    result = std_map_Sl_NodeID_Sc_CPtSet_Sg__sizeImpl((std::map< unsigned int,CPtSet > const *)arg1);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_PtrCPtsMap_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::map< NodeID,CPtSet > *arg1 = (std::map< NodeID,CPtSet > *) 0 ; unsigned int *arg2 = 0 ;
  unsigned int temp2 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< NodeID,CPtSet > **)&jarg1; 
  temp2 = (unsigned int)jarg2;  arg2 = &temp2; 
  result = (bool)std_map_Sl_NodeID_Sc_CPtSet_Sg__containsImpl(arg1,(unsigned int const &)*arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PtrCPtsMap_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  std::map< NodeID,CPtSet > *arg1 = (std::map< NodeID,CPtSet > *) 0 ; unsigned int *arg2 = 0 ; CPtSet *arg3 = 0 ;
  unsigned int temp2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< NodeID,CPtSet > **)&jarg1; 
  temp2 = (unsigned int)jarg2;  arg2 = &temp2;  arg3 = *(CPtSet **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CPtSet const & reference is null"); return ; }  
  std_map_Sl_NodeID_Sc_CPtSet_Sg__putUnchecked(arg1,(unsigned int const &)*arg2,(CPtSet const &)*arg3); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PtrCPtsMap_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::map< NodeID,CPtSet > *arg1 = (std::map< NodeID,CPtSet > *) 0 ;
  SwigValueWrapper< std::map< unsigned int,CPtSet >::iterator > arg2 ;
  std::map< unsigned int,CPtSet,std::less< unsigned int > >::iterator const *argp2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< NodeID,CPtSet > **)&jarg1; 
  argp2 = *(std::map< unsigned int,CPtSet,std::less< unsigned int > >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< unsigned int,CPtSet,std::less< unsigned int > >::iterator const");
    return ; }  arg2 = *argp2;  std_map_Sl_NodeID_Sc_CPtSet_Sg__removeUnchecked(arg1,arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1PtrCPtsMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< NodeID,CPtSet > *arg1 = (std::map< NodeID,CPtSet > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::map< NodeID,CPtSet > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1NodePair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::pair< NodeID,NodeID > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::pair< NodeID,NodeID > *)new std::pair< NodeID,NodeID >(); *(std::pair< NodeID,NodeID > **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1NodePair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ; unsigned int arg1 ; unsigned int arg2 ; std::pair< NodeID,NodeID > *result = 0 ; (void)jenv; (void)jcls;
  arg1 = (unsigned int)jarg1;  arg2 = (unsigned int)jarg2; 
  result = (std::pair< NodeID,NodeID > *)new std::pair< NodeID,NodeID >(arg1,arg2);
  *(std::pair< NodeID,NodeID > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1NodePair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::pair< NodeID,NodeID > *arg1 = 0 ; std::pair< NodeID,NodeID > *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::pair< NodeID,NodeID > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< NodeID,NodeID > const & reference is null");
    return 0; }  
  result = (std::pair< NodeID,NodeID > *)new std::pair< NodeID,NodeID >((std::pair< NodeID,NodeID > const &)*arg1);
  *(std::pair< NodeID,NodeID > **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodePair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::pair< NodeID,NodeID > *arg1 = (std::pair< NodeID,NodeID > *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::pair< NodeID,NodeID > **)&jarg1;  arg2 = (unsigned int)jarg2;  if (arg1) (arg1)->first = arg2; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NodePair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::pair< NodeID,NodeID > *arg1 = (std::pair< NodeID,NodeID > *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::pair< NodeID,NodeID > **)&jarg1;  result = (unsigned int) ((arg1)->first);
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodePair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::pair< NodeID,NodeID > *arg1 = (std::pair< NodeID,NodeID > *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::pair< NodeID,NodeID > **)&jarg1;  arg2 = (unsigned int)jarg2;  if (arg1) (arg1)->second = arg2; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NodePair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::pair< NodeID,NodeID > *arg1 = (std::pair< NodeID,NodeID > *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::pair< NodeID,NodeID > **)&jarg1;  result = (unsigned int) ((arg1)->second);
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1NodePair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< NodeID,NodeID > *arg1 = (std::pair< NodeID,NodeID > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::pair< NodeID,NodeID > **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeSet_1Iterator_1incrementUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::set< NodeID >::iterator *arg1 = (std::set< NodeID >::iterator *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::set< NodeID >::iterator **)&jarg1;  std_set_Sl_NodeID_Sg__iterator_incrementUnchecked(arg1); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NodeSet_1Iterator_1derefUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::set< NodeID >::iterator *arg1 = (std::set< NodeID >::iterator *) 0 ; unsigned int result; (void)jenv;
  (void)jcls; arg1 = *(std::set< NodeID >::iterator **)&jarg1; 
  result = (unsigned int)std_set_Sl_NodeID_Sg__iterator_derefUnchecked((std::set< unsigned int >::iterator const *)arg1);
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_NodeSet_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::set< NodeID >::iterator *arg1 = (std::set< NodeID >::iterator *) 0 ;
  SwigValueWrapper< std::set< unsigned int >::iterator > arg2 ; std::set< unsigned int >::iterator *argp2 ; bool result;
  (void)jenv; (void)jcls; arg1 = *(std::set< NodeID >::iterator **)&jarg1; 
  argp2 = *(std::set< unsigned int >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::set< unsigned int >::iterator");
    return 0; }  arg2 = *argp2; 
  result = (bool)std_set_Sl_NodeID_Sg__iterator_isNot((std::set< unsigned int >::iterator const *)arg1,arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1NodeSet_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::set< NodeID >::iterator *arg1 = (std::set< NodeID >::iterator *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::set< NodeID >::iterator **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1NodeSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  std::set< NodeID > *result = 0 ; (void)jenv; (void)jcls; result = (std::set< NodeID > *)new std::set< NodeID >();
  *(std::set< NodeID > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1NodeSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::set< NodeID > *arg1 = 0 ; std::set< NodeID > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< NodeID > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::set< NodeID > const & reference is null"); return 0; }  
  result = (std::set< NodeID > *)new std::set< NodeID >((std::set< NodeID > const &)*arg1);
  *(std::set< NodeID > **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_NodeSet_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::set< NodeID > *arg1 = (std::set< NodeID > *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::set< NodeID > **)&jarg1;  result = (bool)((std::set< NodeID > const *)arg1)->empty();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::set< NodeID > *arg1 = (std::set< NodeID > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< NodeID > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NodeSet_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::set< NodeID > *arg1 = (std::set< NodeID > *) 0 ;
  SwigValueWrapper< std::set< unsigned int >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< NodeID > **)&jarg1;  result = (arg1)->begin();
  *(std::set< unsigned int >::iterator **)&jresult = new std::set< unsigned int >::iterator((const std::set< unsigned int >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NodeSet_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::set< NodeID > *arg1 = (std::set< NodeID > *) 0 ;
  SwigValueWrapper< std::set< unsigned int >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< NodeID > **)&jarg1;  result = (arg1)->end();
  *(std::set< unsigned int >::iterator **)&jresult = new std::set< unsigned int >::iterator((const std::set< unsigned int >::iterator &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_NodeSet_1addImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::set< NodeID > *arg1 = (std::set< NodeID > *) 0 ; unsigned int *arg2 = 0 ; unsigned int temp2 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::set< NodeID > **)&jarg1;  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2;  result = (bool)std_set_Sl_NodeID_Sg__addImpl(arg1,(unsigned int const &)*arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_NodeSet_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::set< NodeID > *arg1 = (std::set< NodeID > *) 0 ; unsigned int *arg2 = 0 ; unsigned int temp2 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::set< NodeID > **)&jarg1;  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2;  result = (bool)std_set_Sl_NodeID_Sg__containsImpl(arg1,(unsigned int const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_NodeSet_1removeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::set< NodeID > *arg1 = (std::set< NodeID > *) 0 ; unsigned int *arg2 = 0 ; unsigned int temp2 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::set< NodeID > **)&jarg1;  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2;  result = (bool)std_set_Sl_NodeID_Sg__removeImpl(arg1,(unsigned int const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_NodeSet_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::set< NodeID > *arg1 = (std::set< NodeID > *) 0 ; jint result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::set< NodeID > **)&jarg1;  try { result = std_set_Sl_NodeID_Sg__sizeImpl((std::set< unsigned int > const *)arg1);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_NodeSet_1hasNextImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::set< NodeID > *arg1 = (std::set< NodeID > *) 0 ; std::set< unsigned int >::iterator *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::set< NodeID > **)&jarg1; 
  arg2 = *(std::set< unsigned int >::iterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::set< unsigned int >::iterator const & reference is null");
    return 0; }  
  result = (bool)std_set_Sl_NodeID_Sg__hasNextImpl((std::set< unsigned int > const *)arg1,(std::set< unsigned int >::iterator const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1NodeSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::set< NodeID > *arg1 = (std::set< NodeID > *) 0 ; (void)jenv; (void)jcls; arg1 = *(std::set< NodeID > **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1NodeVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::vector< NodeID > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::vector< NodeID > *)new std::vector< NodeID >(); *(std::vector< NodeID > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1NodeVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< NodeID > *arg1 = 0 ; std::vector< NodeID > *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::vector< NodeID > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< NodeID > const & reference is null"); return 0; }
    result = (std::vector< NodeID > *)new std::vector< NodeID >((std::vector< NodeID > const &)*arg1);
  *(std::vector< NodeID > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NodeVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< NodeID > *arg1 = (std::vector< NodeID > *) 0 ; std::vector< unsigned int >::size_type result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< NodeID > **)&jarg1; 
  result = ((std::vector< NodeID > const *)arg1)->capacity(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< NodeID > *arg1 = (std::vector< NodeID > *) 0 ; std::vector< unsigned int >::size_type arg2 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::vector< NodeID > **)&jarg1;  arg2 = (std::vector< unsigned int >::size_type)jarg2; 
  try { (arg1)->reserve(arg2);}  catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_NodeVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::vector< NodeID > *arg1 = (std::vector< NodeID > *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::vector< NodeID > **)&jarg1;  result = (bool)((std::vector< NodeID > const *)arg1)->empty();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< NodeID > *arg1 = (std::vector< NodeID > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< NodeID > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1NodeVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ; jint arg1 ; unsigned int *arg2 = 0 ; unsigned int temp2 ; std::vector< NodeID > *result = 0 ; (void)jenv;
  (void)jcls; arg1 = jarg1;  temp2 = (unsigned int)jarg2;  arg2 = &temp2;  try {
    result = (std::vector< NodeID > *)new_std_vector_Sl_NodeID_Sg___SWIG_2(arg1,(unsigned int const &)*arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< NodeID > **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_NodeVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::vector< NodeID > *arg1 = (std::vector< NodeID > *) 0 ; jint result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::vector< NodeID > **)&jarg1;  try {
    result = std_vector_Sl_NodeID_Sg__doSize((std::vector< unsigned int > const *)arg1);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; }  jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< NodeID > *arg1 = (std::vector< NodeID > *) 0 ; std::vector< unsigned int >::value_type *arg2 = 0 ;
  std::vector< unsigned int >::value_type temp2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< NodeID > **)&jarg1;  temp2 = (std::vector< unsigned int >::value_type)jarg2;  arg2 = &temp2; 
  std_vector_Sl_NodeID_Sg__doAdd__SWIG_0(arg1,(unsigned int const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< NodeID > *arg1 = (std::vector< NodeID > *) 0 ; jint arg2 ; std::vector< unsigned int >::value_type *arg3 = 0 ;
  std::vector< unsigned int >::value_type temp3 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< NodeID > **)&jarg1;  arg2 = jarg2;  temp3 = (std::vector< unsigned int >::value_type)jarg3; 
  arg3 = &temp3;  try { std_vector_Sl_NodeID_Sg__doAdd__SWIG_1(arg1,arg2,(unsigned int const &)*arg3);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NodeVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< NodeID > *arg1 = (std::vector< NodeID > *) 0 ; jint arg2 ;
  std::vector< unsigned int >::value_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< NodeID > **)&jarg1;  arg2 = jarg2;  try {
    result = (std::vector< unsigned int >::value_type)std_vector_Sl_NodeID_Sg__doRemove(arg1,arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NodeVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< NodeID > *arg1 = (std::vector< NodeID > *) 0 ; jint arg2 ;
  std::vector< unsigned int >::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< NodeID > **)&jarg1;  arg2 = jarg2;  try {
    result = (std::vector< unsigned int >::value_type *) &std_vector_Sl_NodeID_Sg__doGet(arg1,arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = (jlong)*result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NodeVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ; std::vector< NodeID > *arg1 = (std::vector< NodeID > *) 0 ; jint arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ; std::vector< unsigned int >::value_type temp3 ;
  std::vector< unsigned int >::value_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< NodeID > **)&jarg1;  arg2 = jarg2;  temp3 = (std::vector< unsigned int >::value_type)jarg3; 
  arg3 = &temp3;  try {
    result = (std::vector< unsigned int >::value_type)std_vector_Sl_NodeID_Sg__doSet(arg1,arg2,(unsigned int const &)*arg3);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< NodeID > *arg1 = (std::vector< NodeID > *) 0 ; jint arg2 ; jint arg3 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< NodeID > **)&jarg1;  arg2 = jarg2;  arg3 = jarg3;  try {
    std_vector_Sl_NodeID_Sg__doRemoveRange(arg1,arg2,arg3);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1NodeVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< NodeID > *arg1 = (std::vector< NodeID > *) 0 ; (void)jenv; (void)jcls; arg1 = *(std::vector< NodeID > **)&jarg1; 
  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1EdgeVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::vector< EdgeID > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::vector< EdgeID > *)new std::vector< EdgeID >(); *(std::vector< EdgeID > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1EdgeVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< EdgeID > *arg1 = 0 ; std::vector< EdgeID > *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::vector< EdgeID > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< EdgeID > const & reference is null"); return 0; }
    result = (std::vector< EdgeID > *)new std::vector< EdgeID >((std::vector< EdgeID > const &)*arg1);
  *(std::vector< EdgeID > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_EdgeVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< EdgeID > *arg1 = (std::vector< EdgeID > *) 0 ; std::<unnamed>::size_type result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::vector< EdgeID > **)&jarg1; 
  result = ((std::vector< EdgeID > const *)arg1)->capacity(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_EdgeVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< EdgeID > *arg1 = (std::vector< EdgeID > *) 0 ; std::<unnamed>::size_type arg2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::vector< EdgeID > **)&jarg1;  arg2 = (std::<unnamed>::size_type)jarg2;  try {
    (arg1)->reserve(arg2);}  catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_EdgeVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::vector< EdgeID > *arg1 = (std::vector< EdgeID > *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::vector< EdgeID > **)&jarg1;  result = (bool)((std::vector< EdgeID > const *)arg1)->empty();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_EdgeVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< EdgeID > *arg1 = (std::vector< EdgeID > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< EdgeID > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1EdgeVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ; jint arg1 ; unsigned int *arg2 = 0 ; unsigned int temp2 ; std::vector< EdgeID > *result = 0 ; (void)jenv;
  (void)jcls; arg1 = jarg1;  temp2 = (unsigned int)jarg2;  arg2 = &temp2;  try {
    result = (std::vector< EdgeID > *)new_std_vector_Sl_EdgeID_Sg___SWIG_2(arg1,(unsigned int const &)*arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< EdgeID > **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_EdgeVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::vector< EdgeID > *arg1 = (std::vector< EdgeID > *) 0 ; jint result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::vector< EdgeID > **)&jarg1;  try {
    result = std_vector_Sl_EdgeID_Sg__doSize((std::vector< unsigned int > const *)arg1);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; }  jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_EdgeVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< EdgeID > *arg1 = (std::vector< EdgeID > *) 0 ; std::<unnamed>::value_type *arg2 = 0 ;
  std::<unnamed>::value_type temp2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< EdgeID > **)&jarg1; 
  temp2 = (std::<unnamed>::value_type)jarg2;  arg2 = &temp2; 
  std_vector_Sl_EdgeID_Sg__doAdd__SWIG_0(arg1,(unsigned int const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_EdgeVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< EdgeID > *arg1 = (std::vector< EdgeID > *) 0 ; jint arg2 ; std::<unnamed>::value_type *arg3 = 0 ;
  std::<unnamed>::value_type temp3 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< EdgeID > **)&jarg1; 
  arg2 = jarg2;  temp3 = (std::<unnamed>::value_type)jarg3;  arg3 = &temp3;  try {
    std_vector_Sl_EdgeID_Sg__doAdd__SWIG_1(arg1,arg2,(unsigned int const &)*arg3);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_EdgeVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< EdgeID > *arg1 = (std::vector< EdgeID > *) 0 ; jint arg2 ; std::<unnamed>::value_type result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< EdgeID > **)&jarg1;  arg2 = jarg2;  try {
    result = (std::<unnamed>::value_type)std_vector_Sl_EdgeID_Sg__doRemove(arg1,arg2);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; }  jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_EdgeVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< EdgeID > *arg1 = (std::vector< EdgeID > *) 0 ; jint arg2 ;
  std::<unnamed>::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< EdgeID > **)&jarg1; 
  arg2 = jarg2;  try { result = (std::<unnamed>::value_type *) &std_vector_Sl_EdgeID_Sg__doGet(arg1,arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = (jlong)*result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_EdgeVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ; std::vector< EdgeID > *arg1 = (std::vector< EdgeID > *) 0 ; jint arg2 ;
  std::<unnamed>::value_type *arg3 = 0 ; std::<unnamed>::value_type temp3 ; std::<unnamed>::value_type result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::vector< EdgeID > **)&jarg1;  arg2 = jarg2; 
  temp3 = (std::<unnamed>::value_type)jarg3;  arg3 = &temp3;  try {
    result = (std::<unnamed>::value_type)std_vector_Sl_EdgeID_Sg__doSet(arg1,arg2,(unsigned int const &)*arg3);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_EdgeVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< EdgeID > *arg1 = (std::vector< EdgeID > *) 0 ; jint arg2 ; jint arg3 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< EdgeID > **)&jarg1;  arg2 = jarg2;  arg3 = jarg3;  try {
    std_vector_Sl_EdgeID_Sg__doRemoveRange(arg1,arg2,arg3);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1EdgeVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< EdgeID > *arg1 = (std::vector< EdgeID > *) 0 ; (void)jenv; (void)jcls; arg1 = *(std::vector< EdgeID > **)&jarg1; 
  delete arg1; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeList_1Iterator_1set_1unchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::list< NodeID >::iterator *arg1 = (std::list< NodeID >::iterator *) 0 ; unsigned int *arg2 = 0 ; unsigned int temp2 ;
  (void)jenv; (void)jcls; arg1 = *(std::list< NodeID >::iterator **)&jarg1;  temp2 = (unsigned int)jarg2;  arg2 = &temp2; 
  std_list_Sl_NodeID_Sg__iterator_set_unchecked(arg1,(unsigned int const &)*arg2); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NodeList_1Iterator_1next_1unchecked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::list< NodeID >::iterator *arg1 = (std::list< NodeID >::iterator *) 0 ;
  SwigValueWrapper< std::list< unsigned int >::iterator > result; (void)jenv; (void)jcls;
  arg1 = *(std::list< NodeID >::iterator **)&jarg1; 
  result = std_list_Sl_NodeID_Sg__iterator_next_unchecked((std::list< unsigned int >::iterator const *)arg1);
  *(std::list< unsigned int >::iterator **)&jresult = new std::list< unsigned int >::iterator((const std::list< unsigned int >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NodeList_1Iterator_1previous_1unchecked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::list< NodeID >::iterator *arg1 = (std::list< NodeID >::iterator *) 0 ;
  SwigValueWrapper< std::list< unsigned int >::iterator > result; (void)jenv; (void)jcls;
  arg1 = *(std::list< NodeID >::iterator **)&jarg1; 
  result = std_list_Sl_NodeID_Sg__iterator_previous_unchecked((std::list< unsigned int >::iterator const *)arg1);
  *(std::list< unsigned int >::iterator **)&jresult = new std::list< unsigned int >::iterator((const std::list< unsigned int >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NodeList_1Iterator_1deref_1unchecked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::list< NodeID >::iterator *arg1 = (std::list< NodeID >::iterator *) 0 ; unsigned int result;
  (void)jenv; (void)jcls; arg1 = *(std::list< NodeID >::iterator **)&jarg1; 
  result = (unsigned int)std_list_Sl_NodeID_Sg__iterator_deref_unchecked((std::list< unsigned int >::iterator const *)arg1);
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NodeList_1Iterator_1advance_1unchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ; std::list< NodeID >::iterator *arg1 = (std::list< NodeID >::iterator *) 0 ;
  std::list< unsigned int >::size_type arg2 ; SwigValueWrapper< std::list< unsigned int >::iterator > result; (void)jenv;
  (void)jcls; arg1 = *(std::list< NodeID >::iterator **)&jarg1;  arg2 = (std::list< unsigned int >::size_type)jarg2; 
  result = std_list_Sl_NodeID_Sg__iterator_advance_unchecked((std::list< unsigned int >::iterator const *)arg1,arg2);
  *(std::list< unsigned int >::iterator **)&jresult = new std::list< unsigned int >::iterator((const std::list< unsigned int >::iterator &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1NodeList_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< NodeID >::iterator *arg1 = (std::list< NodeID >::iterator *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::list< NodeID >::iterator **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1NodeList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::list< NodeID > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::list< NodeID > *)new std::list< NodeID >(); *(std::list< NodeID > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1NodeList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::list< NodeID > *arg1 = 0 ; std::list< NodeID > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::list< NodeID > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< NodeID > const & reference is null"); return 0; }  
  result = (std::list< NodeID > *)new std::list< NodeID >((std::list< NodeID > const &)*arg1);
  *(std::list< NodeID > **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_NodeList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::list< NodeID > *arg1 = (std::list< NodeID > *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::list< NodeID > **)&jarg1;  result = (bool)((std::list< NodeID > const *)arg1)->empty();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< NodeID > *arg1 = (std::list< NodeID > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::list< NodeID > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NodeList_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; std::list< NodeID > *arg1 = (std::list< NodeID > *) 0 ;
  SwigValueWrapper< std::list< unsigned int >::iterator > arg2 ; std::list< unsigned int >::iterator *argp2 ;
  SwigValueWrapper< std::list< unsigned int >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::list< NodeID > **)&jarg1;  argp2 = *(std::list< unsigned int >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::list< unsigned int >::iterator");
    return 0; }  arg2 = *argp2;  result = (arg1)->erase(arg2);
  *(std::list< unsigned int >::iterator **)&jresult = new std::list< unsigned int >::iterator((const std::list< unsigned int >::iterator &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeList_1removeLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< NodeID > *arg1 = (std::list< NodeID > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::list< NodeID > **)&jarg1;  (arg1)->pop_back(); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeList_1removeFirst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< NodeID > *arg1 = (std::list< NodeID > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::list< NodeID > **)&jarg1;  (arg1)->pop_front(); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeList_1addLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::list< NodeID > *arg1 = (std::list< NodeID > *) 0 ; unsigned int *arg2 = 0 ; unsigned int temp2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::list< NodeID > **)&jarg1;  temp2 = (unsigned int)jarg2;  arg2 = &temp2; 
  (arg1)->push_back((unsigned int const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeList_1addFirst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::list< NodeID > *arg1 = (std::list< NodeID > *) 0 ; unsigned int *arg2 = 0 ; unsigned int temp2 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::list< NodeID > **)&jarg1;  temp2 = (unsigned int)jarg2;  arg2 = &temp2; 
  (arg1)->push_front((unsigned int const &)*arg2); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NodeList_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::list< NodeID > *arg1 = (std::list< NodeID > *) 0 ;
  SwigValueWrapper< std::list< unsigned int >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::list< NodeID > **)&jarg1;  result = (arg1)->begin();
  *(std::list< unsigned int >::iterator **)&jresult = new std::list< unsigned int >::iterator((const std::list< unsigned int >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NodeList_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::list< NodeID > *arg1 = (std::list< NodeID > *) 0 ;
  SwigValueWrapper< std::list< unsigned int >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::list< NodeID > **)&jarg1;  result = (arg1)->end();
  *(std::list< unsigned int >::iterator **)&jresult = new std::list< unsigned int >::iterator((const std::list< unsigned int >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NodeList_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ; std::list< NodeID > *arg1 = (std::list< NodeID > *) 0 ;
  SwigValueWrapper< std::list< unsigned int >::iterator > arg2 ; unsigned int *arg3 = 0 ;
  std::list< unsigned int >::iterator *argp2 ; unsigned int temp3 ;
  SwigValueWrapper< std::list< unsigned int >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::list< NodeID > **)&jarg1;  argp2 = *(std::list< unsigned int >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::list< unsigned int >::iterator");
    return 0; }  arg2 = *argp2;  temp3 = (unsigned int)jarg3;  arg3 = &temp3; 
  result = (arg1)->insert(arg2,(unsigned int const &)*arg3);
  *(std::list< unsigned int >::iterator **)&jresult = new std::list< unsigned int >::iterator((const std::list< unsigned int >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1NodeList_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ; jint arg1 ; unsigned int *arg2 = 0 ; unsigned int temp2 ; std::list< NodeID > *result = 0 ; (void)jenv;
  (void)jcls; arg1 = jarg1;  temp2 = (unsigned int)jarg2;  arg2 = &temp2;  try {
    result = (std::list< NodeID > *)new_std_list_Sl_NodeID_Sg___SWIG_2(arg1,(unsigned int const &)*arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::list< NodeID > **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_NodeList_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::list< NodeID > *arg1 = (std::list< NodeID > *) 0 ; jint result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::list< NodeID > **)&jarg1;  try {
    result = std_list_Sl_NodeID_Sg__doSize((std::list< unsigned int > const *)arg1);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; }  jresult = result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_NodeList_1doPreviousIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ; std::list< NodeID > *arg1 = (std::list< NodeID > *) 0 ; std::list< unsigned int >::iterator *arg2 = 0 ;
  jint result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::list< NodeID > **)&jarg1; 
  arg2 = *(std::list< unsigned int >::iterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< unsigned int >::iterator const & reference is null");
    return 0; }   try {
    result = std_list_Sl_NodeID_Sg__doPreviousIndex((std::list< unsigned int > const *)arg1,(std::list< unsigned int >::iterator const &)*arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_NodeList_1doNextIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ; std::list< NodeID > *arg1 = (std::list< NodeID > *) 0 ; std::list< unsigned int >::iterator *arg2 = 0 ;
  jint result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::list< NodeID > **)&jarg1; 
  arg2 = *(std::list< unsigned int >::iterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< unsigned int >::iterator const & reference is null");
    return 0; }   try {
    result = std_list_Sl_NodeID_Sg__doNextIndex((std::list< unsigned int > const *)arg1,(std::list< unsigned int >::iterator const &)*arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_NodeList_1doHasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::list< NodeID > *arg1 = (std::list< NodeID > *) 0 ; std::list< unsigned int >::iterator *arg2 = 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::list< NodeID > **)&jarg1; 
  arg2 = *(std::list< unsigned int >::iterator **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< unsigned int >::iterator const & reference is null");
    return 0; }  
  result = (bool)std_list_Sl_NodeID_Sg__doHasNext((std::list< unsigned int > const *)arg1,(std::list< unsigned int >::iterator const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1NodeList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< NodeID > *arg1 = (std::list< NodeID > *) 0 ; (void)jenv; (void)jcls; arg1 = *(std::list< NodeID > **)&jarg1; 
  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_NodeDeque_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::deque< NodeID > *arg1 = (std::deque< NodeID > *) 0 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::deque< NodeID > **)&jarg1;  result = (bool)((std::deque< NodeID > const *)arg1)->empty();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1NodeDeque_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::deque< NodeID > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::deque< NodeID > *)new std::deque< NodeID >(); *(std::deque< NodeID > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1NodeDeque_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ; unsigned int arg1 ; unsigned int *arg2 = 0 ; unsigned int temp2 ; std::deque< NodeID > *result = 0 ;
  (void)jenv; (void)jcls; arg1 = (unsigned int)jarg1;  temp2 = (unsigned int)jarg2;  arg2 = &temp2; 
  result = (std::deque< NodeID > *)new std::deque< NodeID >(arg1,(unsigned int const &)*arg2);
  *(std::deque< NodeID > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1NodeDeque_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; unsigned int arg1 ; std::deque< NodeID > *result = 0 ; (void)jenv; (void)jcls;
  arg1 = (unsigned int)jarg1;  result = (std::deque< NodeID > *)new std::deque< NodeID >(arg1);
  *(std::deque< NodeID > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1NodeDeque_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::deque< unsigned int > *arg1 = 0 ; std::deque< NodeID > *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::deque< unsigned int > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::deque< unsigned int > const & reference is null");
    return 0; }   result = (std::deque< NodeID > *)new std::deque< NodeID >((std::deque< unsigned int > const &)*arg1);
  *(std::deque< NodeID > **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1NodeDeque(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::deque< NodeID > *arg1 = (std::deque< NodeID > *) 0 ; (void)jenv; (void)jcls; arg1 = *(std::deque< NodeID > **)&jarg1; 
  delete arg1; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeDeque_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  std::deque< NodeID > *arg1 = (std::deque< NodeID > *) 0 ; unsigned int arg2 ; unsigned int *arg3 = 0 ; unsigned int temp3 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::deque< NodeID > **)&jarg1;  arg2 = (unsigned int)jarg2; 
  temp3 = (unsigned int)jarg3;  arg3 = &temp3;  (arg1)->assign(arg2,(unsigned int const &)*arg3); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeDeque_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::deque< NodeID > *arg1 = (std::deque< NodeID > *) 0 ; std::deque< unsigned int > *arg2 = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(std::deque< NodeID > **)&jarg1;  arg2 = *(std::deque< unsigned int > **)&jarg2;
  if (!arg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::deque< unsigned int > & reference is null");
    return ; }   (arg1)->swap(*arg2); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NodeDeque_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::deque< NodeID > *arg1 = (std::deque< NodeID > *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::deque< NodeID > **)&jarg1;  result = (unsigned int)((std::deque< NodeID > const *)arg1)->size();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NodeDeque_1max_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::deque< NodeID > *arg1 = (std::deque< NodeID > *) 0 ; unsigned int result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::deque< NodeID > **)&jarg1; 
  result = (unsigned int)((std::deque< NodeID > const *)arg1)->max_size(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeDeque_1resize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  std::deque< NodeID > *arg1 = (std::deque< NodeID > *) 0 ; unsigned int arg2 ; unsigned int arg3 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::deque< NodeID > **)&jarg1;  arg2 = (unsigned int)jarg2;  arg3 = (unsigned int)jarg3; 
  (arg1)->resize(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeDeque_1resize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::deque< NodeID > *arg1 = (std::deque< NodeID > *) 0 ; unsigned int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::deque< NodeID > **)&jarg1;  arg2 = (unsigned int)jarg2;  (arg1)->resize(arg2); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NodeDeque_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::deque< NodeID > *arg1 = (std::deque< NodeID > *) 0 ;
  std::deque< unsigned int >::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::deque< NodeID > **)&jarg1;  result = (std::deque< unsigned int >::value_type *) &(arg1)->front();
  jresult = (jlong)*result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NodeDeque_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::deque< NodeID > *arg1 = (std::deque< NodeID > *) 0 ;
  std::deque< unsigned int >::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::deque< NodeID > **)&jarg1;  result = (std::deque< unsigned int >::value_type *) &(arg1)->back();
  jresult = (jlong)*result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeDeque_1push_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::deque< NodeID > *arg1 = (std::deque< NodeID > *) 0 ; unsigned int *arg2 = 0 ; unsigned int temp2 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::deque< NodeID > **)&jarg1;  temp2 = (unsigned int)jarg2;  arg2 = &temp2; 
  (arg1)->push_front((unsigned int const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeDeque_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::deque< NodeID > *arg1 = (std::deque< NodeID > *) 0 ; unsigned int *arg2 = 0 ; unsigned int temp2 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::deque< NodeID > **)&jarg1;  temp2 = (unsigned int)jarg2;  arg2 = &temp2; 
  (arg1)->push_back((unsigned int const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeDeque_1pop_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::deque< NodeID > *arg1 = (std::deque< NodeID > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::deque< NodeID > **)&jarg1;  (arg1)->pop_front(); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeDeque_1pop_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::deque< NodeID > *arg1 = (std::deque< NodeID > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::deque< NodeID > **)&jarg1;  (arg1)->pop_back(); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeDeque_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::deque< NodeID > *arg1 = (std::deque< NodeID > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::deque< NodeID > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NodeDeque_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::deque< NodeID > *arg1 = (std::deque< NodeID > *) 0 ; int arg2 ;
  std::deque< unsigned int >::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::deque< NodeID > **)&jarg1;  arg2 = (int)jarg2;  try {
    result = (std::deque< unsigned int >::value_type *) &std_deque_Sl_NodeID_Sg__getitem(arg1,arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = (jlong)*result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeDeque_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::deque< NodeID > *arg1 = (std::deque< NodeID > *) 0 ; int arg2 ; unsigned int *arg3 = 0 ; unsigned int temp3 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::deque< NodeID > **)&jarg1;  arg2 = (int)jarg2;  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3;  try { std_deque_Sl_NodeID_Sg__setitem(arg1,arg2,(unsigned int const &)*arg3);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeDeque_1delitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::deque< NodeID > *arg1 = (std::deque< NodeID > *) 0 ; int arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::deque< NodeID > **)&jarg1;  arg2 = (int)jarg2;  try { std_deque_Sl_NodeID_Sg__delitem(arg1,arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NodeDeque_1getslice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ; std::deque< NodeID > *arg1 = (std::deque< NodeID > *) 0 ; int arg2 ; int arg3 ;
  std::deque< unsigned int > result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::deque< NodeID > **)&jarg1; 
  arg2 = (int)jarg2;  arg3 = (int)jarg3;  result = std_deque_Sl_NodeID_Sg__getslice(arg1,arg2,arg3);
  *(std::deque< unsigned int > **)&jresult = new std::deque< unsigned int >((const std::deque< unsigned int > &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeDeque_1setslice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  std::deque< NodeID > *arg1 = (std::deque< NodeID > *) 0 ; int arg2 ; int arg3 ; std::deque< unsigned int > *arg4 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg4_; arg1 = *(std::deque< NodeID > **)&jarg1;  arg2 = (int)jarg2; 
  arg3 = (int)jarg3;  arg4 = *(std::deque< unsigned int > **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::deque< unsigned int > const & reference is null");
    return ; }   std_deque_Sl_NodeID_Sg__setslice(arg1,arg2,arg3,(std::deque< unsigned int > const &)*arg4); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NodeDeque_1delslice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::deque< NodeID > *arg1 = (std::deque< NodeID > *) 0 ; int arg2 ; int arg3 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::deque< NodeID > **)&jarg1;  arg2 = (int)jarg2;  arg3 = (int)jarg3; 
  std_deque_Sl_NodeID_Sg__delslice(arg1,arg2,arg3); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1NUMStatMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::map< char const *,u32_t > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::map< char const *,u32_t > *)new std::map< char const *,u32_t >();
  *(std::map< char const *,u32_t > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1NUMStatMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< char const *,u32_t > *arg1 = 0 ; std::map< char const *,u32_t > *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::map< char const *,u32_t > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< char const *,u32_t > const & reference is null");
    return 0; }  
  result = (std::map< char const *,u32_t > *)new std::map< char const *,u32_t >((std::map< char const *,u32_t > const &)*arg1);
  *(std::map< char const *,u32_t > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NUMStatMap_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::map< char const *,u32_t >::iterator *arg1 = (std::map< char const *,u32_t >::iterator *) 0 ;
  SwigValueWrapper< std::map< char const *,unsigned int >::iterator > result; (void)jenv; (void)jcls;
  arg1 = *(std::map< char const *,u32_t >::iterator **)&jarg1; 
  result = std_map_Sl_char_SS_const_Sm__Sc_u32_t_Sg__iterator_getNextUnchecked(arg1);
  *(std::map< char const *,unsigned int,std::less< char const * > >::iterator **)&jresult = new std::map< char const *,unsigned int,std::less< char const * > >::iterator((const std::map< char const *,unsigned int,std::less< char const * > >::iterator &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_NUMStatMap_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ; std::map< char const *,u32_t >::iterator *arg1 = (std::map< char const *,u32_t >::iterator *) 0 ;
  SwigValueWrapper< std::map< char const *,unsigned int >::iterator > arg2 ;
  std::map< char const *,unsigned int >::iterator *argp2 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(std::map< char const *,u32_t >::iterator **)&jarg1; 
  argp2 = *(std::map< char const *,unsigned int >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< char const *,unsigned int >::iterator");
    return 0; }  arg2 = *argp2; 
  result = (bool)std_map_Sl_char_SS_const_Sm__Sc_u32_t_Sg__iterator_isNot((std::map< char const *,unsigned int >::iterator const *)arg1,arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_NUMStatMap_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ; std::map< char const *,u32_t >::iterator *arg1 = (std::map< char const *,u32_t >::iterator *) 0 ;
  char *result = 0 ; (void)jenv; (void)jcls; arg1 = *(std::map< char const *,u32_t >::iterator **)&jarg1; 
  result = (char *)std_map_Sl_char_SS_const_Sm__Sc_u32_t_Sg__iterator_getKey((std::map< char const *,unsigned int >::iterator const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NUMStatMap_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; std::map< char const *,u32_t >::iterator *arg1 = (std::map< char const *,u32_t >::iterator *) 0 ;
  unsigned int result; (void)jenv; (void)jcls; arg1 = *(std::map< char const *,u32_t >::iterator **)&jarg1; 
  result = (unsigned int)std_map_Sl_char_SS_const_Sm__Sc_u32_t_Sg__iterator_getValue((std::map< char const *,unsigned int >::iterator const *)arg1);
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NUMStatMap_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::map< char const *,u32_t >::iterator *arg1 = (std::map< char const *,u32_t >::iterator *) 0 ; unsigned int *arg2 = 0 ;
  unsigned int temp2 ; (void)jenv; (void)jcls; arg1 = *(std::map< char const *,u32_t >::iterator **)&jarg1; 
  temp2 = (unsigned int)jarg2;  arg2 = &temp2; 
  std_map_Sl_char_SS_const_Sm__Sc_u32_t_Sg__iterator_setValue(arg1,(unsigned int const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1NUMStatMap_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< char const *,u32_t >::iterator *arg1 = (std::map< char const *,u32_t >::iterator *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::map< char const *,u32_t >::iterator **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_NUMStatMap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::map< char const *,u32_t > *arg1 = (std::map< char const *,u32_t > *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::map< char const *,u32_t > **)&jarg1; 
  result = (bool)((std::map< char const *,u32_t > const *)arg1)->empty(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NUMStatMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< char const *,u32_t > *arg1 = (std::map< char const *,u32_t > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< char const *,u32_t > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NUMStatMap_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; std::map< char const *,u32_t > *arg1 = (std::map< char const *,u32_t > *) 0 ; char **arg2 = 0 ;
  char *temp2 = 0 ; SwigValueWrapper< std::map< char const *,unsigned int >::iterator > result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< char const *,u32_t > **)&jarg1;  arg2 = 0; if (jarg2) {
    temp2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!temp2) return 0; }  arg2 = &temp2;
  result = (arg1)->find((char const *const &)*arg2);
  *(std::map< char const *,unsigned int >::iterator **)&jresult = new std::map< char const *,unsigned int >::iterator((const std::map< char const *,unsigned int >::iterator &)result); 
  if (arg2 && *arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)*arg2); return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NUMStatMap_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< char const *,u32_t > *arg1 = (std::map< char const *,u32_t > *) 0 ;
  SwigValueWrapper< std::map< char const *,unsigned int >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< char const *,u32_t > **)&jarg1;  result = (arg1)->begin();
  *(std::map< char const *,unsigned int >::iterator **)&jresult = new std::map< char const *,unsigned int >::iterator((const std::map< char const *,unsigned int >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_NUMStatMap_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< char const *,u32_t > *arg1 = (std::map< char const *,u32_t > *) 0 ;
  SwigValueWrapper< std::map< char const *,unsigned int >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< char const *,u32_t > **)&jarg1;  result = (arg1)->end();
  *(std::map< char const *,unsigned int >::iterator **)&jresult = new std::map< char const *,unsigned int >::iterator((const std::map< char const *,unsigned int >::iterator &)result); 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_NUMStatMap_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::map< char const *,u32_t > *arg1 = (std::map< char const *,u32_t > *) 0 ; jint result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::map< char const *,u32_t > **)&jarg1;  try {
    result = std_map_Sl_char_SS_const_Sm__Sc_u32_t_Sg__sizeImpl((std::map< char const *,unsigned int > const *)arg1);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_NUMStatMap_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; std::map< char const *,u32_t > *arg1 = (std::map< char const *,u32_t > *) 0 ; char **arg2 = 0 ;
  char *temp2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< char const *,u32_t > **)&jarg1; 
  arg2 = 0; if (jarg2) { temp2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!temp2) return 0; }  arg2 = &temp2;
  result = (bool)std_map_Sl_char_SS_const_Sm__Sc_u32_t_Sg__containsImpl(arg1,(char const *const &)*arg2);
  jresult = (jboolean)result;  if (arg2 && *arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)*arg2); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NUMStatMap_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  std::map< char const *,u32_t > *arg1 = (std::map< char const *,u32_t > *) 0 ; char **arg2 = 0 ; unsigned int *arg3 = 0 ;
  char *temp2 = 0 ; unsigned int temp3 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< char const *,u32_t > **)&jarg1;  arg2 = 0; if (jarg2) { temp2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!temp2) return ; }  arg2 = &temp2; temp3 = (unsigned int)jarg3;  arg3 = &temp3; 
  std_map_Sl_char_SS_const_Sm__Sc_u32_t_Sg__putUnchecked(arg1,(char const *const &)*arg2,(unsigned int const &)*arg3);
  if (arg2 && *arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_NUMStatMap_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::map< char const *,u32_t > *arg1 = (std::map< char const *,u32_t > *) 0 ;
  SwigValueWrapper< std::map< char const *,unsigned int >::iterator > arg2 ;
  std::map< char const *,unsigned int,std::less< char const * > >::iterator const *argp2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< char const *,u32_t > **)&jarg1; 
  argp2 = *(std::map< char const *,unsigned int,std::less< char const * > >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< char const *,unsigned int,std::less< char const * > >::iterator const");
    return ; }  arg2 = *argp2;  std_map_Sl_char_SS_const_Sm__Sc_u32_t_Sg__removeUnchecked(arg1,arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1NUMStatMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< char const *,u32_t > *arg1 = (std::map< char const *,u32_t > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::map< char const *,u32_t > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1TIMEStatMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::map< char const *,double > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::map< char const *,double > *)new std::map< char const *,double >();
  *(std::map< char const *,double > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1TIMEStatMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< char const *,double > *arg1 = 0 ; std::map< char const *,double > *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::map< char const *,double > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< char const *,double > const & reference is null");
    return 0; }  
  result = (std::map< char const *,double > *)new std::map< char const *,double >((std::map< char const *,double > const &)*arg1);
  *(std::map< char const *,double > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_TIMEStatMap_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< char const *,double >::iterator *arg1 = (std::map< char const *,double >::iterator *) 0 ;
  std::map< char const *,double,std::less< char const * > >::iterator result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< char const *,double >::iterator **)&jarg1; 
  result = std_map_Sl_char_SS_const_Sm__Sc_double_Sg__iterator_getNextUnchecked(arg1);
  *(std::map< char const *,double,std::less< char const * > >::iterator **)&jresult = new std::map< char const *,double,std::less< char const * > >::iterator((const std::map< char const *,double,std::less< char const * > >::iterator &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_TIMEStatMap_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; std::map< char const *,double >::iterator *arg1 = (std::map< char const *,double >::iterator *) 0 ;
  std::map< char const *,double >::iterator arg2 ; std::map< char const *,double >::iterator *argp2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(std::map< char const *,double >::iterator **)&jarg1; 
  argp2 = *(std::map< char const *,double >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< char const *,double >::iterator");
    return 0; }  arg2 = *argp2; 
  result = (bool)std_map_Sl_char_SS_const_Sm__Sc_double_Sg__iterator_isNot((std::map< char const *,double >::iterator const *)arg1,arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_TIMEStatMap_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; std::map< char const *,double >::iterator *arg1 = (std::map< char const *,double >::iterator *) 0 ;
  char *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< char const *,double >::iterator **)&jarg1; 
  result = (char *)std_map_Sl_char_SS_const_Sm__Sc_double_Sg__iterator_getKey((std::map< char const *,double >::iterator const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_TIMEStatMap_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; std::map< char const *,double >::iterator *arg1 = (std::map< char const *,double >::iterator *) 0 ;
  double result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< char const *,double >::iterator **)&jarg1; 
  result = (double)std_map_Sl_char_SS_const_Sm__Sc_double_Sg__iterator_getValue((std::map< char const *,double >::iterator const *)arg1);
  jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_TIMEStatMap_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::map< char const *,double >::iterator *arg1 = (std::map< char const *,double >::iterator *) 0 ; double *arg2 = 0 ;
  double temp2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< char const *,double >::iterator **)&jarg1; 
  temp2 = (double)jarg2;  arg2 = &temp2; 
  std_map_Sl_char_SS_const_Sm__Sc_double_Sg__iterator_setValue(arg1,(double const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1TIMEStatMap_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< char const *,double >::iterator *arg1 = (std::map< char const *,double >::iterator *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::map< char const *,double >::iterator **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_TIMEStatMap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::map< char const *,double > *arg1 = (std::map< char const *,double > *) 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< char const *,double > **)&jarg1; 
  result = (bool)((std::map< char const *,double > const *)arg1)->empty(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_TIMEStatMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< char const *,double > *arg1 = (std::map< char const *,double > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< char const *,double > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_TIMEStatMap_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ; std::map< char const *,double > *arg1 = (std::map< char const *,double > *) 0 ; char **arg2 = 0 ;
  char *temp2 = 0 ; std::map< char const *,double >::iterator result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< char const *,double > **)&jarg1;  arg2 = 0; if (jarg2) { temp2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!temp2) return 0; }  arg2 = &temp2; result = (arg1)->find((char const *const &)*arg2);
  *(std::map< char const *,double >::iterator **)&jresult = new std::map< char const *,double >::iterator((const std::map< char const *,double >::iterator &)result); 
  if (arg2 && *arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)*arg2); return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_TIMEStatMap_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< char const *,double > *arg1 = (std::map< char const *,double > *) 0 ;
  std::map< char const *,double >::iterator result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< char const *,double > **)&jarg1;  result = (arg1)->begin();
  *(std::map< char const *,double >::iterator **)&jresult = new std::map< char const *,double >::iterator((const std::map< char const *,double >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_TIMEStatMap_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< char const *,double > *arg1 = (std::map< char const *,double > *) 0 ;
  std::map< char const *,double >::iterator result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< char const *,double > **)&jarg1;  result = (arg1)->end();
  *(std::map< char const *,double >::iterator **)&jresult = new std::map< char const *,double >::iterator((const std::map< char const *,double >::iterator &)result); 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_TIMEStatMap_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::map< char const *,double > *arg1 = (std::map< char const *,double > *) 0 ; jint result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::map< char const *,double > **)&jarg1;  try {
    result = std_map_Sl_char_SS_const_Sm__Sc_double_Sg__sizeImpl((std::map< char const *,double > const *)arg1);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_TIMEStatMap_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; std::map< char const *,double > *arg1 = (std::map< char const *,double > *) 0 ; char **arg2 = 0 ;
  char *temp2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< char const *,double > **)&jarg1; 
  arg2 = 0; if (jarg2) { temp2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!temp2) return 0; }  arg2 = &temp2;
  result = (bool)std_map_Sl_char_SS_const_Sm__Sc_double_Sg__containsImpl(arg1,(char const *const &)*arg2);
  jresult = (jboolean)result;  if (arg2 && *arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)*arg2); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_TIMEStatMap_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  std::map< char const *,double > *arg1 = (std::map< char const *,double > *) 0 ; char **arg2 = 0 ; double *arg3 = 0 ;
  char *temp2 = 0 ; double temp3 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< char const *,double > **)&jarg1; 
  arg2 = 0; if (jarg2) { temp2 = (char *)jenv->GetStringUTFChars(jarg2, 0); if (!temp2) return ; }  arg2 = &temp2;
  temp3 = (double)jarg3;  arg3 = &temp3; 
  std_map_Sl_char_SS_const_Sm__Sc_double_Sg__putUnchecked(arg1,(char const *const &)*arg2,(double const &)*arg3);
  if (arg2 && *arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_TIMEStatMap_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< char const *,double > *arg1 = (std::map< char const *,double > *) 0 ;
  std::map< char const *,double,std::less< char const * > >::iterator arg2 ;
  std::map< char const *,double,std::less< char const * > >::iterator const *argp2 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(std::map< char const *,double > **)&jarg1; 
  argp2 = *(std::map< char const *,double,std::less< char const * > >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< char const *,double,std::less< char const * > >::iterator const");
    return ; }  arg2 = *argp2;  std_map_Sl_char_SS_const_Sm__Sc_double_Sg__removeUnchecked(arg1,arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1TIMEStatMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< char const *,double > *arg1 = (std::map< char const *,double > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::map< char const *,double > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1FunctionSetType_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::vector< Function * > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::vector< Function * > *)new std::vector< Function * >(); *(std::vector< Function * > **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1FunctionSetType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< Function * > *arg1 = 0 ; std::vector< Function * > *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::vector< Function * > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Function * > const & reference is null");
    return 0; }   result = (std::vector< Function * > *)new std::vector< Function * >((std::vector< Function * > const &)*arg1);
  *(std::vector< Function * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_FunctionSetType_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< Function * > *arg1 = (std::vector< Function * > *) 0 ;
  std::vector< llvm::Function * >::size_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< Function * > **)&jarg1;  result = ((std::vector< Function * > const *)arg1)->capacity();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_FunctionSetType_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Function * > *arg1 = (std::vector< Function * > *) 0 ; std::vector< llvm::Function * >::size_type arg2 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< Function * > **)&jarg1; 
  arg2 = (std::vector< llvm::Function * >::size_type)jarg2;  try { (arg1)->reserve(arg2);}  catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_FunctionSetType_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::vector< Function * > *arg1 = (std::vector< Function * > *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::vector< Function * > **)&jarg1; 
  result = (bool)((std::vector< Function * > const *)arg1)->empty(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_FunctionSetType_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Function * > *arg1 = (std::vector< Function * > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< Function * > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1FunctionSetType_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ; jint arg1 ; llvm::Function **arg2 = 0 ; llvm::Function *temp2 = 0 ;
  std::vector< Function * > *result = 0 ; (void)jenv; (void)jcls; arg1 = jarg1;  temp2 = *(llvm::Function **)&jarg2;
  arg2 = (llvm::Function **)&temp2;  try {
    result = (std::vector< Function * > *)new_std_vector_Sl_Function_Sm__Sg___SWIG_2(arg1,(llvm::Function *const &)*arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< Function * > **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_FunctionSetType_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::vector< Function * > *arg1 = (std::vector< Function * > *) 0 ; jint result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::vector< Function * > **)&jarg1;  try {
    result = std_vector_Sl_Function_Sm__Sg__doSize((std::vector< llvm::Function * > const *)arg1);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_FunctionSetType_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Function * > *arg1 = (std::vector< Function * > *) 0 ; std::vector< llvm::Function * >::value_type *arg2 = 0 ;
  std::vector< llvm::Function * >::value_type temp2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< Function * > **)&jarg1;  temp2 = *(std::vector< llvm::Function * >::value_type *)&jarg2;
  arg2 = (std::vector< llvm::Function * >::value_type *)&temp2; 
  std_vector_Sl_Function_Sm__Sg__doAdd__SWIG_0(arg1,(llvm::Function *const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_FunctionSetType_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< Function * > *arg1 = (std::vector< Function * > *) 0 ; jint arg2 ;
  std::vector< llvm::Function * >::value_type *arg3 = 0 ; std::vector< llvm::Function * >::value_type temp3 = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::vector< Function * > **)&jarg1;  arg2 = jarg2; 
  temp3 = *(std::vector< llvm::Function * >::value_type *)&jarg3; arg3 = (std::vector< llvm::Function * >::value_type *)&temp3; 
  try { std_vector_Sl_Function_Sm__Sg__doAdd__SWIG_1(arg1,arg2,(llvm::Function *const &)*arg3);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_FunctionSetType_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< Function * > *arg1 = (std::vector< Function * > *) 0 ; jint arg2 ;
  std::vector< llvm::Function * >::value_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< Function * > **)&jarg1;  arg2 = jarg2;  try {
    result = (std::vector< llvm::Function * >::value_type)std_vector_Sl_Function_Sm__Sg__doRemove(arg1,arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< llvm::Function * >::value_type *)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_FunctionSetType_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< Function * > *arg1 = (std::vector< Function * > *) 0 ; jint arg2 ;
  std::vector< llvm::Function * >::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< Function * > **)&jarg1;  arg2 = jarg2;  try {
    result = (std::vector< llvm::Function * >::value_type *) &std_vector_Sl_Function_Sm__Sg__doGet(arg1,arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< llvm::Function * >::value_type *)&jresult = *result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_FunctionSetType_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ; std::vector< Function * > *arg1 = (std::vector< Function * > *) 0 ; jint arg2 ;
  std::vector< llvm::Function * >::value_type *arg3 = 0 ; std::vector< llvm::Function * >::value_type temp3 = 0 ;
  std::vector< llvm::Function * >::value_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< Function * > **)&jarg1;  arg2 = jarg2;  temp3 = *(std::vector< llvm::Function * >::value_type *)&jarg3;
  arg3 = (std::vector< llvm::Function * >::value_type *)&temp3;  try {
    result = (std::vector< llvm::Function * >::value_type)std_vector_Sl_Function_Sm__Sg__doSet(arg1,arg2,(llvm::Function *const &)*arg3);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< llvm::Function * >::value_type *)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_FunctionSetType_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< Function * > *arg1 = (std::vector< Function * > *) 0 ; jint arg2 ; jint arg3 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::vector< Function * > **)&jarg1;  arg2 = jarg2;  arg3 = jarg3;  try {
    std_vector_Sl_Function_Sm__Sg__doRemoveRange(arg1,arg2,arg3);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1FunctionSetType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Function * > *arg1 = (std::vector< Function * > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::vector< Function * > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1GlobalSetType_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::vector< GlobalVariable * > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::vector< GlobalVariable * > *)new std::vector< GlobalVariable * >();
  *(std::vector< GlobalVariable * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1GlobalSetType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< GlobalVariable * > *arg1 = 0 ; std::vector< GlobalVariable * > *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::vector< GlobalVariable * > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< GlobalVariable * > const & reference is null");
    return 0; }  
  result = (std::vector< GlobalVariable * > *)new std::vector< GlobalVariable * >((std::vector< GlobalVariable * > const &)*arg1);
  *(std::vector< GlobalVariable * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_GlobalSetType_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< GlobalVariable * > *arg1 = (std::vector< GlobalVariable * > *) 0 ;
  std::vector< llvm::GlobalVariable * >::size_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< GlobalVariable * > **)&jarg1;  result = ((std::vector< GlobalVariable * > const *)arg1)->capacity();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_GlobalSetType_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< GlobalVariable * > *arg1 = (std::vector< GlobalVariable * > *) 0 ;
  std::vector< llvm::GlobalVariable * >::size_type arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< GlobalVariable * > **)&jarg1;  arg2 = (std::vector< llvm::GlobalVariable * >::size_type)jarg2;  try {
    (arg1)->reserve(arg2);}  catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_GlobalSetType_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::vector< GlobalVariable * > *arg1 = (std::vector< GlobalVariable * > *) 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< GlobalVariable * > **)&jarg1; 
  result = (bool)((std::vector< GlobalVariable * > const *)arg1)->empty(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_GlobalSetType_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< GlobalVariable * > *arg1 = (std::vector< GlobalVariable * > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< GlobalVariable * > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1GlobalSetType_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ; jint arg1 ; llvm::GlobalVariable **arg2 = 0 ; llvm::GlobalVariable *temp2 = 0 ;
  std::vector< GlobalVariable * > *result = 0 ; (void)jenv; (void)jcls; arg1 = jarg1;  temp2 = *(llvm::GlobalVariable **)&jarg2;
  arg2 = (llvm::GlobalVariable **)&temp2;  try {
    result = (std::vector< GlobalVariable * > *)new_std_vector_Sl_GlobalVariable_Sm__Sg___SWIG_2(arg1,(llvm::GlobalVariable *const &)*arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< GlobalVariable * > **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_GlobalSetType_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::vector< GlobalVariable * > *arg1 = (std::vector< GlobalVariable * > *) 0 ; jint result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::vector< GlobalVariable * > **)&jarg1;  try {
    result = std_vector_Sl_GlobalVariable_Sm__Sg__doSize((std::vector< llvm::GlobalVariable * > const *)arg1);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_GlobalSetType_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< GlobalVariable * > *arg1 = (std::vector< GlobalVariable * > *) 0 ;
  std::vector< llvm::GlobalVariable * >::value_type *arg2 = 0 ; std::vector< llvm::GlobalVariable * >::value_type temp2 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< GlobalVariable * > **)&jarg1; 
  temp2 = *(std::vector< llvm::GlobalVariable * >::value_type *)&jarg2;
  arg2 = (std::vector< llvm::GlobalVariable * >::value_type *)&temp2; 
  std_vector_Sl_GlobalVariable_Sm__Sg__doAdd__SWIG_0(arg1,(llvm::GlobalVariable *const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_GlobalSetType_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< GlobalVariable * > *arg1 = (std::vector< GlobalVariable * > *) 0 ; jint arg2 ;
  std::vector< llvm::GlobalVariable * >::value_type *arg3 = 0 ; std::vector< llvm::GlobalVariable * >::value_type temp3 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< GlobalVariable * > **)&jarg1;  arg2 = jarg2; 
  temp3 = *(std::vector< llvm::GlobalVariable * >::value_type *)&jarg3;
  arg3 = (std::vector< llvm::GlobalVariable * >::value_type *)&temp3;  try {
    std_vector_Sl_GlobalVariable_Sm__Sg__doAdd__SWIG_1(arg1,arg2,(llvm::GlobalVariable *const &)*arg3);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_GlobalSetType_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< GlobalVariable * > *arg1 = (std::vector< GlobalVariable * > *) 0 ; jint arg2 ;
  std::vector< llvm::GlobalVariable * >::value_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< GlobalVariable * > **)&jarg1;  arg2 = jarg2;  try {
    result = (std::vector< llvm::GlobalVariable * >::value_type)std_vector_Sl_GlobalVariable_Sm__Sg__doRemove(arg1,arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< llvm::GlobalVariable * >::value_type *)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_GlobalSetType_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< GlobalVariable * > *arg1 = (std::vector< GlobalVariable * > *) 0 ; jint arg2 ;
  std::vector< llvm::GlobalVariable * >::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< GlobalVariable * > **)&jarg1;  arg2 = jarg2;  try {
    result = (std::vector< llvm::GlobalVariable * >::value_type *) &std_vector_Sl_GlobalVariable_Sm__Sg__doGet(arg1,arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< llvm::GlobalVariable * >::value_type *)&jresult = *result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_GlobalSetType_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ; std::vector< GlobalVariable * > *arg1 = (std::vector< GlobalVariable * > *) 0 ; jint arg2 ;
  std::vector< llvm::GlobalVariable * >::value_type *arg3 = 0 ; std::vector< llvm::GlobalVariable * >::value_type temp3 = 0 ;
  std::vector< llvm::GlobalVariable * >::value_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< GlobalVariable * > **)&jarg1;  arg2 = jarg2; 
  temp3 = *(std::vector< llvm::GlobalVariable * >::value_type *)&jarg3;
  arg3 = (std::vector< llvm::GlobalVariable * >::value_type *)&temp3;  try {
    result = (std::vector< llvm::GlobalVariable * >::value_type)std_vector_Sl_GlobalVariable_Sm__Sg__doSet(arg1,arg2,(llvm::GlobalVariable *const &)*arg3);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< llvm::GlobalVariable * >::value_type *)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_GlobalSetType_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< GlobalVariable * > *arg1 = (std::vector< GlobalVariable * > *) 0 ; jint arg2 ; jint arg3 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::vector< GlobalVariable * > **)&jarg1;  arg2 = jarg2;  arg3 = jarg3;  try {
    std_vector_Sl_GlobalVariable_Sm__Sg__doRemoveRange(arg1,arg2,arg3);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1GlobalSetType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< GlobalVariable * > *arg1 = (std::vector< GlobalVariable * > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::vector< GlobalVariable * > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1AliasSetType_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::vector< GlobalAlias * > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::vector< GlobalAlias * > *)new std::vector< GlobalAlias * >();
  *(std::vector< GlobalAlias * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1AliasSetType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< GlobalAlias * > *arg1 = 0 ; std::vector< GlobalAlias * > *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::vector< GlobalAlias * > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< GlobalAlias * > const & reference is null");
    return 0; }  
  result = (std::vector< GlobalAlias * > *)new std::vector< GlobalAlias * >((std::vector< GlobalAlias * > const &)*arg1);
  *(std::vector< GlobalAlias * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_AliasSetType_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< GlobalAlias * > *arg1 = (std::vector< GlobalAlias * > *) 0 ;
  std::vector< llvm::GlobalAlias * >::size_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< GlobalAlias * > **)&jarg1;  result = ((std::vector< GlobalAlias * > const *)arg1)->capacity();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_AliasSetType_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< GlobalAlias * > *arg1 = (std::vector< GlobalAlias * > *) 0 ; std::vector< llvm::GlobalAlias * >::size_type arg2 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< GlobalAlias * > **)&jarg1; 
  arg2 = (std::vector< llvm::GlobalAlias * >::size_type)jarg2;  try { (arg1)->reserve(arg2);}  catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_AliasSetType_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::vector< GlobalAlias * > *arg1 = (std::vector< GlobalAlias * > *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::vector< GlobalAlias * > **)&jarg1; 
  result = (bool)((std::vector< GlobalAlias * > const *)arg1)->empty(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_AliasSetType_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< GlobalAlias * > *arg1 = (std::vector< GlobalAlias * > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< GlobalAlias * > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1AliasSetType_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ; jint arg1 ; llvm::GlobalAlias **arg2 = 0 ; llvm::GlobalAlias *temp2 = 0 ;
  std::vector< GlobalAlias * > *result = 0 ; (void)jenv; (void)jcls; arg1 = jarg1;  temp2 = *(llvm::GlobalAlias **)&jarg2;
  arg2 = (llvm::GlobalAlias **)&temp2;  try {
    result = (std::vector< GlobalAlias * > *)new_std_vector_Sl_GlobalAlias_Sm__Sg___SWIG_2(arg1,(llvm::GlobalAlias *const &)*arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< GlobalAlias * > **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_AliasSetType_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::vector< GlobalAlias * > *arg1 = (std::vector< GlobalAlias * > *) 0 ; jint result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::vector< GlobalAlias * > **)&jarg1;  try {
    result = std_vector_Sl_GlobalAlias_Sm__Sg__doSize((std::vector< llvm::GlobalAlias * > const *)arg1);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_AliasSetType_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< GlobalAlias * > *arg1 = (std::vector< GlobalAlias * > *) 0 ;
  std::vector< llvm::GlobalAlias * >::value_type *arg2 = 0 ; std::vector< llvm::GlobalAlias * >::value_type temp2 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< GlobalAlias * > **)&jarg1; 
  temp2 = *(std::vector< llvm::GlobalAlias * >::value_type *)&jarg2;
  arg2 = (std::vector< llvm::GlobalAlias * >::value_type *)&temp2; 
  std_vector_Sl_GlobalAlias_Sm__Sg__doAdd__SWIG_0(arg1,(llvm::GlobalAlias *const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_AliasSetType_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< GlobalAlias * > *arg1 = (std::vector< GlobalAlias * > *) 0 ; jint arg2 ;
  std::vector< llvm::GlobalAlias * >::value_type *arg3 = 0 ; std::vector< llvm::GlobalAlias * >::value_type temp3 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< GlobalAlias * > **)&jarg1;  arg2 = jarg2; 
  temp3 = *(std::vector< llvm::GlobalAlias * >::value_type *)&jarg3;
  arg3 = (std::vector< llvm::GlobalAlias * >::value_type *)&temp3;  try {
    std_vector_Sl_GlobalAlias_Sm__Sg__doAdd__SWIG_1(arg1,arg2,(llvm::GlobalAlias *const &)*arg3);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_AliasSetType_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< GlobalAlias * > *arg1 = (std::vector< GlobalAlias * > *) 0 ; jint arg2 ;
  std::vector< llvm::GlobalAlias * >::value_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< GlobalAlias * > **)&jarg1;  arg2 = jarg2;  try {
    result = (std::vector< llvm::GlobalAlias * >::value_type)std_vector_Sl_GlobalAlias_Sm__Sg__doRemove(arg1,arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< llvm::GlobalAlias * >::value_type *)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_AliasSetType_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< GlobalAlias * > *arg1 = (std::vector< GlobalAlias * > *) 0 ; jint arg2 ;
  std::vector< llvm::GlobalAlias * >::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< GlobalAlias * > **)&jarg1;  arg2 = jarg2;  try {
    result = (std::vector< llvm::GlobalAlias * >::value_type *) &std_vector_Sl_GlobalAlias_Sm__Sg__doGet(arg1,arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< llvm::GlobalAlias * >::value_type *)&jresult = *result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_AliasSetType_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ; std::vector< GlobalAlias * > *arg1 = (std::vector< GlobalAlias * > *) 0 ; jint arg2 ;
  std::vector< llvm::GlobalAlias * >::value_type *arg3 = 0 ; std::vector< llvm::GlobalAlias * >::value_type temp3 = 0 ;
  std::vector< llvm::GlobalAlias * >::value_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< GlobalAlias * > **)&jarg1;  arg2 = jarg2; 
  temp3 = *(std::vector< llvm::GlobalAlias * >::value_type *)&jarg3;
  arg3 = (std::vector< llvm::GlobalAlias * >::value_type *)&temp3;  try {
    result = (std::vector< llvm::GlobalAlias * >::value_type)std_vector_Sl_GlobalAlias_Sm__Sg__doSet(arg1,arg2,(llvm::GlobalAlias *const &)*arg3);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< llvm::GlobalAlias * >::value_type *)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_AliasSetType_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< GlobalAlias * > *arg1 = (std::vector< GlobalAlias * > *) 0 ; jint arg2 ; jint arg3 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::vector< GlobalAlias * > **)&jarg1;  arg2 = jarg2;  arg3 = jarg3;  try {
    std_vector_Sl_GlobalAlias_Sm__Sg__doRemoveRange(arg1,arg2,arg3);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1AliasSetType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< GlobalAlias * > *arg1 = (std::vector< GlobalAlias * > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::vector< GlobalAlias * > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1FunDeclToDefMapTy_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::map< Function const *,Function * > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::map< Function const *,Function * > *)new std::map< Function const *,Function * >();
  *(std::map< Function const *,Function * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1FunDeclToDefMapTy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< Function const *,Function * > *arg1 = 0 ; std::map< Function const *,Function * > *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< Function const *,Function * > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< Function const *,Function * > const & reference is null");
    return 0; }  
  result = (std::map< Function const *,Function * > *)new std::map< Function const *,Function * >((std::map< Function const *,Function * > const &)*arg1);
  *(std::map< Function const *,Function * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_FunDeclToDefMapTy_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::map< Function const *,Function * >::iterator *arg1 = (std::map< Function const *,Function * >::iterator *) 0 ;
  SwigValueWrapper< std::map< llvm::Function const *,llvm::Function * >::iterator > result; (void)jenv; (void)jcls;
  arg1 = *(std::map< Function const *,Function * >::iterator **)&jarg1; 
  result = std_map_Sl_Function_SS_const_Sm__Sc_Function_Sm__Sg__iterator_getNextUnchecked(arg1);
  *(std::map< llvm::Function const *,llvm::Function *,std::less< llvm::Function const * > >::iterator **)&jresult = new std::map< llvm::Function const *,llvm::Function *,std::less< llvm::Function const * > >::iterator((const std::map< llvm::Function const *,llvm::Function *,std::less< llvm::Function const * > >::iterator &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_FunDeclToDefMapTy_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  std::map< Function const *,Function * >::iterator *arg1 = (std::map< Function const *,Function * >::iterator *) 0 ;
  SwigValueWrapper< std::map< llvm::Function const *,llvm::Function * >::iterator > arg2 ;
  std::map< llvm::Function const *,llvm::Function * >::iterator *argp2 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(std::map< Function const *,Function * >::iterator **)&jarg1; 
  argp2 = *(std::map< llvm::Function const *,llvm::Function * >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< llvm::Function const *,llvm::Function * >::iterator");
    return 0; }  arg2 = *argp2; 
  result = (bool)std_map_Sl_Function_SS_const_Sm__Sc_Function_Sm__Sg__iterator_isNot((std::map< llvm::Function const *,llvm::Function * >::iterator const *)arg1,arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_FunDeclToDefMapTy_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::map< Function const *,Function * >::iterator *arg1 = (std::map< Function const *,Function * >::iterator *) 0 ;
  llvm::Function *result = 0 ; (void)jenv; (void)jcls; arg1 = *(std::map< Function const *,Function * >::iterator **)&jarg1; 
  result = (llvm::Function *)std_map_Sl_Function_SS_const_Sm__Sc_Function_Sm__Sg__iterator_getKey((std::map< llvm::Function const *,llvm::Function * >::iterator const *)arg1);
  *(llvm::Function **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_FunDeclToDefMapTy_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::map< Function const *,Function * >::iterator *arg1 = (std::map< Function const *,Function * >::iterator *) 0 ;
  llvm::Function *result = 0 ; (void)jenv; (void)jcls; arg1 = *(std::map< Function const *,Function * >::iterator **)&jarg1; 
  result = (llvm::Function *)std_map_Sl_Function_SS_const_Sm__Sc_Function_Sm__Sg__iterator_getValue((std::map< llvm::Function const *,llvm::Function * >::iterator const *)arg1);
  *(llvm::Function **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_FunDeclToDefMapTy_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::map< Function const *,Function * >::iterator *arg1 = (std::map< Function const *,Function * >::iterator *) 0 ;
  llvm::Function **arg2 = 0 ; llvm::Function *temp2 = 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::map< Function const *,Function * >::iterator **)&jarg1;  temp2 = *(llvm::Function **)&jarg2;
  arg2 = (llvm::Function **)&temp2; 
  std_map_Sl_Function_SS_const_Sm__Sc_Function_Sm__Sg__iterator_setValue(arg1,(llvm::Function *const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1FunDeclToDefMapTy_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< Function const *,Function * >::iterator *arg1 = (std::map< Function const *,Function * >::iterator *) 0 ;
  (void)jenv; (void)jcls; arg1 = *(std::map< Function const *,Function * >::iterator **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_FunDeclToDefMapTy_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::map< Function const *,Function * > *arg1 = (std::map< Function const *,Function * > *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< Function const *,Function * > **)&jarg1; 
  result = (bool)((std::map< Function const *,Function * > const *)arg1)->empty(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_FunDeclToDefMapTy_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< Function const *,Function * > *arg1 = (std::map< Function const *,Function * > *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< Function const *,Function * > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_FunDeclToDefMapTy_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; std::map< Function const *,Function * > *arg1 = (std::map< Function const *,Function * > *) 0 ;
  llvm::Function **arg2 = 0 ; llvm::Function *temp2 = 0 ;
  SwigValueWrapper< std::map< llvm::Function const *,llvm::Function * >::iterator > result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< Function const *,Function * > **)&jarg1;  temp2 = *(llvm::Function **)&jarg2;
  arg2 = (llvm::Function **)&temp2;  result = (arg1)->find((llvm::Function const *const &)*arg2);
  *(std::map< llvm::Function const *,llvm::Function * >::iterator **)&jresult = new std::map< llvm::Function const *,llvm::Function * >::iterator((const std::map< llvm::Function const *,llvm::Function * >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_FunDeclToDefMapTy_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< Function const *,Function * > *arg1 = (std::map< Function const *,Function * > *) 0 ;
  SwigValueWrapper< std::map< llvm::Function const *,llvm::Function * >::iterator > result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< Function const *,Function * > **)&jarg1;  result = (arg1)->begin();
  *(std::map< llvm::Function const *,llvm::Function * >::iterator **)&jresult = new std::map< llvm::Function const *,llvm::Function * >::iterator((const std::map< llvm::Function const *,llvm::Function * >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_FunDeclToDefMapTy_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< Function const *,Function * > *arg1 = (std::map< Function const *,Function * > *) 0 ;
  SwigValueWrapper< std::map< llvm::Function const *,llvm::Function * >::iterator > result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< Function const *,Function * > **)&jarg1;  result = (arg1)->end();
  *(std::map< llvm::Function const *,llvm::Function * >::iterator **)&jresult = new std::map< llvm::Function const *,llvm::Function * >::iterator((const std::map< llvm::Function const *,llvm::Function * >::iterator &)result); 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_FunDeclToDefMapTy_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::map< Function const *,Function * > *arg1 = (std::map< Function const *,Function * > *) 0 ;
  jint result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< Function const *,Function * > **)&jarg1;  try {
    result = std_map_Sl_Function_SS_const_Sm__Sc_Function_Sm__Sg__sizeImpl((std::map< llvm::Function const *,llvm::Function * > const *)arg1);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_FunDeclToDefMapTy_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; std::map< Function const *,Function * > *arg1 = (std::map< Function const *,Function * > *) 0 ;
  llvm::Function **arg2 = 0 ; llvm::Function *temp2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< Function const *,Function * > **)&jarg1;  temp2 = *(llvm::Function **)&jarg2;
  arg2 = (llvm::Function **)&temp2; 
  result = (bool)std_map_Sl_Function_SS_const_Sm__Sc_Function_Sm__Sg__containsImpl(arg1,(llvm::Function const *const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_FunDeclToDefMapTy_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  std::map< Function const *,Function * > *arg1 = (std::map< Function const *,Function * > *) 0 ; llvm::Function **arg2 = 0 ;
  llvm::Function **arg3 = 0 ; llvm::Function *temp2 = 0 ; llvm::Function *temp3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< Function const *,Function * > **)&jarg1;  temp2 = *(llvm::Function **)&jarg2;
  arg2 = (llvm::Function **)&temp2;  temp3 = *(llvm::Function **)&jarg3; arg3 = (llvm::Function **)&temp3; 
  std_map_Sl_Function_SS_const_Sm__Sc_Function_Sm__Sg__putUnchecked(arg1,(llvm::Function const *const &)*arg2,(llvm::Function *const &)*arg3); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_FunDeclToDefMapTy_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::map< Function const *,Function * > *arg1 = (std::map< Function const *,Function * > *) 0 ;
  SwigValueWrapper< std::map< llvm::Function const *,llvm::Function * >::iterator > arg2 ;
  std::map< llvm::Function const *,llvm::Function *,std::less< llvm::Function const * > >::iterator const *argp2 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::map< Function const *,Function * > **)&jarg1; 
  argp2 = *(std::map< llvm::Function const *,llvm::Function *,std::less< llvm::Function const * > >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< llvm::Function const *,llvm::Function *,std::less< llvm::Function const * > >::iterator const");
    return ; }  arg2 = *argp2;  std_map_Sl_Function_SS_const_Sm__Sc_Function_Sm__Sg__removeUnchecked(arg1,arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1FunDeclToDefMapTy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< Function const *,Function * > *arg1 = (std::map< Function const *,Function * > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::map< Function const *,Function * > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1FunDefToDeclsMapTy_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::map< Function const *,FunctionSetType > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::map< Function const *,FunctionSetType > *)new std::map< Function const *,FunctionSetType >();
  *(std::map< Function const *,FunctionSetType > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1FunDefToDeclsMapTy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< Function const *,FunctionSetType > *arg1 = 0 ;
  std::map< Function const *,FunctionSetType > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< Function const *,FunctionSetType > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< Function const *,FunctionSetType > const & reference is null");
    return 0; }  
  result = (std::map< Function const *,FunctionSetType > *)new std::map< Function const *,FunctionSetType >((std::map< Function const *,FunctionSetType > const &)*arg1);
  *(std::map< Function const *,FunctionSetType > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_FunDefToDeclsMapTy_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::map< Function const *,FunctionSetType >::iterator *arg1 = (std::map< Function const *,FunctionSetType >::iterator *) 0 ;
  SwigValueWrapper< std::map< llvm::Function const *,FunctionSetType >::iterator > result; (void)jenv; (void)jcls;
  arg1 = *(std::map< Function const *,FunctionSetType >::iterator **)&jarg1; 
  result = std_map_Sl_Function_SS_const_Sm__Sc_FunctionSetType_Sg__iterator_getNextUnchecked(arg1);
  *(std::map< llvm::Function const *,FunctionSetType,std::less< llvm::Function const * > >::iterator **)&jresult = new std::map< llvm::Function const *,FunctionSetType,std::less< llvm::Function const * > >::iterator((const std::map< llvm::Function const *,FunctionSetType,std::less< llvm::Function const * > >::iterator &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_FunDefToDeclsMapTy_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  std::map< Function const *,FunctionSetType >::iterator *arg1 = (std::map< Function const *,FunctionSetType >::iterator *) 0 ;
  SwigValueWrapper< std::map< llvm::Function const *,FunctionSetType >::iterator > arg2 ;
  std::map< llvm::Function const *,FunctionSetType >::iterator *argp2 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(std::map< Function const *,FunctionSetType >::iterator **)&jarg1; 
  argp2 = *(std::map< llvm::Function const *,FunctionSetType >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< llvm::Function const *,FunctionSetType >::iterator");
    return 0; }  arg2 = *argp2; 
  result = (bool)std_map_Sl_Function_SS_const_Sm__Sc_FunctionSetType_Sg__iterator_isNot((std::map< llvm::Function const *,FunctionSetType >::iterator const *)arg1,arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_FunDefToDeclsMapTy_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::map< Function const *,FunctionSetType >::iterator *arg1 = (std::map< Function const *,FunctionSetType >::iterator *) 0 ;
  llvm::Function *result = 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::map< Function const *,FunctionSetType >::iterator **)&jarg1; 
  result = (llvm::Function *)std_map_Sl_Function_SS_const_Sm__Sc_FunctionSetType_Sg__iterator_getKey((std::map< llvm::Function const *,FunctionSetType >::iterator const *)arg1);
  *(llvm::Function **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_FunDefToDeclsMapTy_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::map< Function const *,FunctionSetType >::iterator *arg1 = (std::map< Function const *,FunctionSetType >::iterator *) 0 ;
  FunctionSetType result; (void)jenv; (void)jcls; arg1 = *(std::map< Function const *,FunctionSetType >::iterator **)&jarg1; 
  result = std_map_Sl_Function_SS_const_Sm__Sc_FunctionSetType_Sg__iterator_getValue((std::map< llvm::Function const *,FunctionSetType >::iterator const *)arg1);
  *(FunctionSetType **)&jresult = new FunctionSetType((const FunctionSetType &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_FunDefToDeclsMapTy_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::map< Function const *,FunctionSetType >::iterator *arg1 = (std::map< Function const *,FunctionSetType >::iterator *) 0 ;
  FunctionSetType *arg2 = 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::map< Function const *,FunctionSetType >::iterator **)&jarg1;  arg2 = *(FunctionSetType **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FunctionSetType const & reference is null"); return ; }  
  std_map_Sl_Function_SS_const_Sm__Sc_FunctionSetType_Sg__iterator_setValue(arg1,(FunctionSetType const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1FunDefToDeclsMapTy_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< Function const *,FunctionSetType >::iterator *arg1 = (std::map< Function const *,FunctionSetType >::iterator *) 0 ;
  (void)jenv; (void)jcls; arg1 = *(std::map< Function const *,FunctionSetType >::iterator **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_FunDefToDeclsMapTy_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< Function const *,FunctionSetType > *arg1 = (std::map< Function const *,FunctionSetType > *) 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< Function const *,FunctionSetType > **)&jarg1; 
  result = (bool)((std::map< Function const *,FunctionSetType > const *)arg1)->empty(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_FunDefToDeclsMapTy_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< Function const *,FunctionSetType > *arg1 = (std::map< Function const *,FunctionSetType > *) 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::map< Function const *,FunctionSetType > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_FunDefToDeclsMapTy_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; std::map< Function const *,FunctionSetType > *arg1 = (std::map< Function const *,FunctionSetType > *) 0 ;
  llvm::Function **arg2 = 0 ; llvm::Function *temp2 = 0 ;
  SwigValueWrapper< std::map< llvm::Function const *,FunctionSetType >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< Function const *,FunctionSetType > **)&jarg1;  temp2 = *(llvm::Function **)&jarg2;
  arg2 = (llvm::Function **)&temp2;  result = (arg1)->find((llvm::Function const *const &)*arg2);
  *(std::map< llvm::Function const *,FunctionSetType >::iterator **)&jresult = new std::map< llvm::Function const *,FunctionSetType >::iterator((const std::map< llvm::Function const *,FunctionSetType >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_FunDefToDeclsMapTy_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< Function const *,FunctionSetType > *arg1 = (std::map< Function const *,FunctionSetType > *) 0 ;
  SwigValueWrapper< std::map< llvm::Function const *,FunctionSetType >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< Function const *,FunctionSetType > **)&jarg1;  result = (arg1)->begin();
  *(std::map< llvm::Function const *,FunctionSetType >::iterator **)&jresult = new std::map< llvm::Function const *,FunctionSetType >::iterator((const std::map< llvm::Function const *,FunctionSetType >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_FunDefToDeclsMapTy_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< Function const *,FunctionSetType > *arg1 = (std::map< Function const *,FunctionSetType > *) 0 ;
  SwigValueWrapper< std::map< llvm::Function const *,FunctionSetType >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< Function const *,FunctionSetType > **)&jarg1;  result = (arg1)->end();
  *(std::map< llvm::Function const *,FunctionSetType >::iterator **)&jresult = new std::map< llvm::Function const *,FunctionSetType >::iterator((const std::map< llvm::Function const *,FunctionSetType >::iterator &)result); 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_FunDefToDeclsMapTy_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::map< Function const *,FunctionSetType > *arg1 = (std::map< Function const *,FunctionSetType > *) 0 ;
  jint result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< Function const *,FunctionSetType > **)&jarg1;  try {
    result = std_map_Sl_Function_SS_const_Sm__Sc_FunctionSetType_Sg__sizeImpl((std::map< llvm::Function const *,FunctionSetType > const *)arg1);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_FunDefToDeclsMapTy_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  std::map< Function const *,FunctionSetType > *arg1 = (std::map< Function const *,FunctionSetType > *) 0 ;
  llvm::Function **arg2 = 0 ; llvm::Function *temp2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< Function const *,FunctionSetType > **)&jarg1;  temp2 = *(llvm::Function **)&jarg2;
  arg2 = (llvm::Function **)&temp2; 
  result = (bool)std_map_Sl_Function_SS_const_Sm__Sc_FunctionSetType_Sg__containsImpl(arg1,(llvm::Function const *const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_FunDefToDeclsMapTy_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  std::map< Function const *,FunctionSetType > *arg1 = (std::map< Function const *,FunctionSetType > *) 0 ;
  llvm::Function **arg2 = 0 ; FunctionSetType *arg3 = 0 ; llvm::Function *temp2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< Function const *,FunctionSetType > **)&jarg1;  temp2 = *(llvm::Function **)&jarg2;
  arg2 = (llvm::Function **)&temp2;  arg3 = *(FunctionSetType **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FunctionSetType const & reference is null"); return ; }  
  std_map_Sl_Function_SS_const_Sm__Sc_FunctionSetType_Sg__putUnchecked(arg1,(llvm::Function const *const &)*arg2,(FunctionSetType const &)*arg3); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_FunDefToDeclsMapTy_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::map< Function const *,FunctionSetType > *arg1 = (std::map< Function const *,FunctionSetType > *) 0 ;
  SwigValueWrapper< std::map< llvm::Function const *,FunctionSetType >::iterator > arg2 ;
  std::map< llvm::Function const *,FunctionSetType,std::less< llvm::Function const * > >::iterator const *argp2 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::map< Function const *,FunctionSetType > **)&jarg1; 
  argp2 = *(std::map< llvm::Function const *,FunctionSetType,std::less< llvm::Function const * > >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< llvm::Function const *,FunctionSetType,std::less< llvm::Function const * > >::iterator const");
    return ; }  arg2 = *argp2;  std_map_Sl_Function_SS_const_Sm__Sc_FunctionSetType_Sg__removeUnchecked(arg1,arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1FunDefToDeclsMapTy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< Function const *,FunctionSetType > *arg1 = (std::map< Function const *,FunctionSetType > *) 0 ; (void)jenv;
  (void)jcls; arg1 = *(std::map< Function const *,FunctionSetType > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1GlobalDefToRepMapTy_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::map< GlobalVariable const *,GlobalVariable * > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::map< GlobalVariable const *,GlobalVariable * > *)new std::map< GlobalVariable const *,GlobalVariable * >();
  *(std::map< GlobalVariable const *,GlobalVariable * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1GlobalDefToRepMapTy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::map< GlobalVariable const *,GlobalVariable * > *arg1 = 0 ;
  std::map< GlobalVariable const *,GlobalVariable * > *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< GlobalVariable const *,GlobalVariable * > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< GlobalVariable const *,GlobalVariable * > const & reference is null");
    return 0; }  
  result = (std::map< GlobalVariable const *,GlobalVariable * > *)new std::map< GlobalVariable const *,GlobalVariable * >((std::map< GlobalVariable const *,GlobalVariable * > const &)*arg1);
  *(std::map< GlobalVariable const *,GlobalVariable * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_GlobalDefToRepMapTy_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::map< GlobalVariable const *,GlobalVariable * >::iterator *arg1 = (std::map< GlobalVariable const *,GlobalVariable * >::iterator *) 0 ;
  SwigValueWrapper< std::map< llvm::GlobalVariable const *,llvm::GlobalVariable * >::iterator > result; (void)jenv; (void)jcls;
  arg1 = *(std::map< GlobalVariable const *,GlobalVariable * >::iterator **)&jarg1; 
  result = std_map_Sl_GlobalVariable_SS_const_Sm__Sc_GlobalVariable_Sm__Sg__iterator_getNextUnchecked(arg1);
  *(std::map< llvm::GlobalVariable const *,llvm::GlobalVariable *,std::less< llvm::GlobalVariable const * > >::iterator **)&jresult = new std::map< llvm::GlobalVariable const *,llvm::GlobalVariable *,std::less< llvm::GlobalVariable const * > >::iterator((const std::map< llvm::GlobalVariable const *,llvm::GlobalVariable *,std::less< llvm::GlobalVariable const * > >::iterator &)result); 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_GlobalDefToRepMapTy_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  std::map< GlobalVariable const *,GlobalVariable * >::iterator *arg1 = (std::map< GlobalVariable const *,GlobalVariable * >::iterator *) 0 ;
  SwigValueWrapper< std::map< llvm::GlobalVariable const *,llvm::GlobalVariable * >::iterator > arg2 ;
  std::map< llvm::GlobalVariable const *,llvm::GlobalVariable * >::iterator *argp2 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(std::map< GlobalVariable const *,GlobalVariable * >::iterator **)&jarg1; 
  argp2 = *(std::map< llvm::GlobalVariable const *,llvm::GlobalVariable * >::iterator **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< llvm::GlobalVariable const *,llvm::GlobalVariable * >::iterator");
    return 0; }  arg2 = *argp2; 
  result = (bool)std_map_Sl_GlobalVariable_SS_const_Sm__Sc_GlobalVariable_Sm__Sg__iterator_isNot((std::map< llvm::GlobalVariable const *,llvm::GlobalVariable * >::iterator const *)arg1,arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_GlobalDefToRepMapTy_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::map< GlobalVariable const *,GlobalVariable * >::iterator *arg1 = (std::map< GlobalVariable const *,GlobalVariable * >::iterator *) 0 ;
  llvm::GlobalVariable *result = 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::map< GlobalVariable const *,GlobalVariable * >::iterator **)&jarg1; 
  result = (llvm::GlobalVariable *)std_map_Sl_GlobalVariable_SS_const_Sm__Sc_GlobalVariable_Sm__Sg__iterator_getKey((std::map< llvm::GlobalVariable const *,llvm::GlobalVariable * >::iterator const *)arg1);
  *(llvm::GlobalVariable **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_GlobalDefToRepMapTy_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::map< GlobalVariable const *,GlobalVariable * >::iterator *arg1 = (std::map< GlobalVariable const *,GlobalVariable * >::iterator *) 0 ;
  llvm::GlobalVariable *result = 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::map< GlobalVariable const *,GlobalVariable * >::iterator **)&jarg1; 
  result = (llvm::GlobalVariable *)std_map_Sl_GlobalVariable_SS_const_Sm__Sc_GlobalVariable_Sm__Sg__iterator_getValue((std::map< llvm::GlobalVariable const *,llvm::GlobalVariable * >::iterator const *)arg1);
  *(llvm::GlobalVariable **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_GlobalDefToRepMapTy_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::map< GlobalVariable const *,GlobalVariable * >::iterator *arg1 = (std::map< GlobalVariable const *,GlobalVariable * >::iterator *) 0 ;
  llvm::GlobalVariable **arg2 = 0 ; llvm::GlobalVariable *temp2 = 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::map< GlobalVariable const *,GlobalVariable * >::iterator **)&jarg1;  temp2 = *(llvm::GlobalVariable **)&jarg2;
  arg2 = (llvm::GlobalVariable **)&temp2; 
  std_map_Sl_GlobalVariable_SS_const_Sm__Sc_GlobalVariable_Sm__Sg__iterator_setValue(arg1,(llvm::GlobalVariable *const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1GlobalDefToRepMapTy_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< GlobalVariable const *,GlobalVariable * >::iterator *arg1 = (std::map< GlobalVariable const *,GlobalVariable * >::iterator *) 0 ;
  (void)jenv; (void)jcls; arg1 = *(std::map< GlobalVariable const *,GlobalVariable * >::iterator **)&jarg1;  delete arg1; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_GlobalDefToRepMapTy_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< GlobalVariable const *,GlobalVariable * > *arg1 = (std::map< GlobalVariable const *,GlobalVariable * > *) 0 ;
  bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< GlobalVariable const *,GlobalVariable * > **)&jarg1; 
  result = (bool)((std::map< GlobalVariable const *,GlobalVariable * > const *)arg1)->empty(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_GlobalDefToRepMapTy_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< GlobalVariable const *,GlobalVariable * > *arg1 = (std::map< GlobalVariable const *,GlobalVariable * > *) 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< GlobalVariable const *,GlobalVariable * > **)&jarg1; 
  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_GlobalDefToRepMapTy_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::map< GlobalVariable const *,GlobalVariable * > *arg1 = (std::map< GlobalVariable const *,GlobalVariable * > *) 0 ;
  llvm::GlobalVariable **arg2 = 0 ; llvm::GlobalVariable *temp2 = 0 ;
  SwigValueWrapper< std::map< llvm::GlobalVariable const *,llvm::GlobalVariable * >::iterator > result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< GlobalVariable const *,GlobalVariable * > **)&jarg1; 
  temp2 = *(llvm::GlobalVariable **)&jarg2; arg2 = (llvm::GlobalVariable **)&temp2; 
  result = (arg1)->find((llvm::GlobalVariable const *const &)*arg2);
  *(std::map< llvm::GlobalVariable const *,llvm::GlobalVariable * >::iterator **)&jresult = new std::map< llvm::GlobalVariable const *,llvm::GlobalVariable * >::iterator((const std::map< llvm::GlobalVariable const *,llvm::GlobalVariable * >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_GlobalDefToRepMapTy_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< GlobalVariable const *,GlobalVariable * > *arg1 = (std::map< GlobalVariable const *,GlobalVariable * > *) 0 ;
  SwigValueWrapper< std::map< llvm::GlobalVariable const *,llvm::GlobalVariable * >::iterator > result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< GlobalVariable const *,GlobalVariable * > **)&jarg1;  result = (arg1)->begin();
  *(std::map< llvm::GlobalVariable const *,llvm::GlobalVariable * >::iterator **)&jresult = new std::map< llvm::GlobalVariable const *,llvm::GlobalVariable * >::iterator((const std::map< llvm::GlobalVariable const *,llvm::GlobalVariable * >::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_GlobalDefToRepMapTy_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< GlobalVariable const *,GlobalVariable * > *arg1 = (std::map< GlobalVariable const *,GlobalVariable * > *) 0 ;
  SwigValueWrapper< std::map< llvm::GlobalVariable const *,llvm::GlobalVariable * >::iterator > result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::map< GlobalVariable const *,GlobalVariable * > **)&jarg1;  result = (arg1)->end();
  *(std::map< llvm::GlobalVariable const *,llvm::GlobalVariable * >::iterator **)&jresult = new std::map< llvm::GlobalVariable const *,llvm::GlobalVariable * >::iterator((const std::map< llvm::GlobalVariable const *,llvm::GlobalVariable * >::iterator &)result); 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_GlobalDefToRepMapTy_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::map< GlobalVariable const *,GlobalVariable * > *arg1 = (std::map< GlobalVariable const *,GlobalVariable * > *) 0 ;
  jint result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< GlobalVariable const *,GlobalVariable * > **)&jarg1; 
  try {
    result = std_map_Sl_GlobalVariable_SS_const_Sm__Sc_GlobalVariable_Sm__Sg__sizeImpl((std::map< llvm::GlobalVariable const *,llvm::GlobalVariable * > const *)arg1);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_GlobalDefToRepMapTy_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  std::map< GlobalVariable const *,GlobalVariable * > *arg1 = (std::map< GlobalVariable const *,GlobalVariable * > *) 0 ;
  llvm::GlobalVariable **arg2 = 0 ; llvm::GlobalVariable *temp2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< GlobalVariable const *,GlobalVariable * > **)&jarg1;  temp2 = *(llvm::GlobalVariable **)&jarg2;
  arg2 = (llvm::GlobalVariable **)&temp2; 
  result = (bool)std_map_Sl_GlobalVariable_SS_const_Sm__Sc_GlobalVariable_Sm__Sg__containsImpl(arg1,(llvm::GlobalVariable const *const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_GlobalDefToRepMapTy_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  std::map< GlobalVariable const *,GlobalVariable * > *arg1 = (std::map< GlobalVariable const *,GlobalVariable * > *) 0 ;
  llvm::GlobalVariable **arg2 = 0 ; llvm::GlobalVariable **arg3 = 0 ; llvm::GlobalVariable *temp2 = 0 ;
  llvm::GlobalVariable *temp3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::map< GlobalVariable const *,GlobalVariable * > **)&jarg1;  temp2 = *(llvm::GlobalVariable **)&jarg2;
  arg2 = (llvm::GlobalVariable **)&temp2;  temp3 = *(llvm::GlobalVariable **)&jarg3; arg3 = (llvm::GlobalVariable **)&temp3; 
  std_map_Sl_GlobalVariable_SS_const_Sm__Sc_GlobalVariable_Sm__Sg__putUnchecked(arg1,(llvm::GlobalVariable const *const &)*arg2,(llvm::GlobalVariable *const &)*arg3); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_GlobalDefToRepMapTy_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::map< GlobalVariable const *,GlobalVariable * > *arg1 = (std::map< GlobalVariable const *,GlobalVariable * > *) 0 ;
  SwigValueWrapper< std::map< llvm::GlobalVariable const *,llvm::GlobalVariable * >::iterator > arg2 ;
  std::map< llvm::GlobalVariable const *,llvm::GlobalVariable *,std::less< llvm::GlobalVariable const * > >::iterator const *argp2 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::map< GlobalVariable const *,GlobalVariable * > **)&jarg1; 
  argp2 = *(std::map< llvm::GlobalVariable const *,llvm::GlobalVariable *,std::less< llvm::GlobalVariable const * > >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< llvm::GlobalVariable const *,llvm::GlobalVariable *,std::less< llvm::GlobalVariable const * > >::iterator const");
    return ; }  arg2 = *argp2;  std_map_Sl_GlobalVariable_SS_const_Sm__Sc_GlobalVariable_Sm__Sg__removeUnchecked(arg1,arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1GlobalDefToRepMapTy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< GlobalVariable const *,GlobalVariable * > *arg1 = (std::map< GlobalVariable const *,GlobalVariable * > *) 0 ;
  (void)jenv; (void)jcls; arg1 = *(std::map< GlobalVariable const *,GlobalVariable * > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1StringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::vector< std::string > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >(); *(std::vector< std::string > **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1StringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< std::string > *arg1 = 0 ; std::vector< std::string > *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::vector< std::string > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0; }  
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  *(std::vector< std::string > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_StringVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_StringVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; std::vector< std::string >::size_type arg2 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2;  try { (arg1)->reserve(arg2);}  catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_StringVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_StringVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1StringVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ; jint arg1 ; std::string *arg2 = 0 ; std::vector< std::string > *result = 0 ; (void)jenv; (void)jcls;
  arg1 = jarg1;  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1,(std::string const &)*arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< std::string > **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_StringVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; jint result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::vector< std::string > **)&jarg1;  try {
    result = std_vector_Sl_std_string_Sg__doSize((std::vector< std::string > const *)arg1);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; }  jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_StringVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; std::vector< std::string >::value_type *arg2 = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< std::string > **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  std_vector_Sl_std_string_Sg__doAdd__SWIG_0(arg1,(std::string const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_StringVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; jint arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;  arg2 = jarg2;  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try { std_vector_Sl_std_string_Sg__doAdd__SWIG_1(arg1,arg2,(std::string const &)*arg3);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_StringVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ; std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; jint arg2 ;
  std::vector< std::string >::value_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;  arg2 = jarg2;  try {
    result = std_vector_Sl_std_string_Sg__doRemove(arg1,arg2);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_StringVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ; std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; jint arg2 ;
  std::vector< std::string >::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;  arg2 = jarg2;  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__doGet(arg1,arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = jenv->NewStringUTF(result->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_StringVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jstring jresult = 0 ; std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; jint arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ; std::vector< std::string >::value_type result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::vector< std::string > **)&jarg1;  arg2 = jarg2;  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);  if (!arg3_pstr) return 0;
  std::vector< std::string >::value_type arg3_str(arg3_pstr); arg3 = &arg3_str; jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try { result = std_vector_Sl_std_string_Sg__doSet(arg1,arg2,(std::string const &)*arg3);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_StringVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; jint arg2 ; jint arg3 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(std::vector< std::string > **)&jarg1;  arg2 = jarg2;  arg3 = jarg3;  try {
    std_vector_Sl_std_string_Sg__doRemoveRange(arg1,arg2,arg3);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1StringVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1BasicBlockVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::vector< BasicBlock const * > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::vector< BasicBlock const * > *)new std::vector< BasicBlock const * >();
  *(std::vector< BasicBlock const * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1BasicBlockVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< BasicBlock const * > *arg1 = 0 ; std::vector< BasicBlock const * > *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::vector< BasicBlock const * > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< BasicBlock const * > const & reference is null");
    return 0; }  
  result = (std::vector< BasicBlock const * > *)new std::vector< BasicBlock const * >((std::vector< BasicBlock const * > const &)*arg1);
  *(std::vector< BasicBlock const * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_BasicBlockVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< BasicBlock const * > *arg1 = (std::vector< BasicBlock const * > *) 0 ;
  std::vector< llvm::BasicBlock const * >::size_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< BasicBlock const * > **)&jarg1;  result = ((std::vector< BasicBlock const * > const *)arg1)->capacity();
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_BasicBlockVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< BasicBlock const * > *arg1 = (std::vector< BasicBlock const * > *) 0 ;
  std::vector< llvm::BasicBlock const * >::size_type arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< BasicBlock const * > **)&jarg1;  arg2 = (std::vector< llvm::BasicBlock const * >::size_type)jarg2; 
  try { (arg1)->reserve(arg2);}  catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_BasicBlockVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::vector< BasicBlock const * > *arg1 = (std::vector< BasicBlock const * > *) 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< BasicBlock const * > **)&jarg1; 
  result = (bool)((std::vector< BasicBlock const * > const *)arg1)->empty(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_BasicBlockVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< BasicBlock const * > *arg1 = (std::vector< BasicBlock const * > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< BasicBlock const * > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1BasicBlockVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ; jint arg1 ; llvm::BasicBlock **arg2 = 0 ; llvm::BasicBlock *temp2 = 0 ;
  std::vector< BasicBlock const * > *result = 0 ; (void)jenv; (void)jcls; arg1 = jarg1;  temp2 = *(llvm::BasicBlock **)&jarg2;
  arg2 = (llvm::BasicBlock **)&temp2;  try {
    result = (std::vector< BasicBlock const * > *)new_std_vector_Sl_BasicBlock_SS_const_Sm__Sg___SWIG_2(arg1,(llvm::BasicBlock const *const &)*arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< BasicBlock const * > **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_BasicBlockVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::vector< BasicBlock const * > *arg1 = (std::vector< BasicBlock const * > *) 0 ; jint result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< BasicBlock const * > **)&jarg1;  try {
    result = std_vector_Sl_BasicBlock_SS_const_Sm__Sg__doSize((std::vector< llvm::BasicBlock const * > const *)arg1);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_BasicBlockVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< BasicBlock const * > *arg1 = (std::vector< BasicBlock const * > *) 0 ;
  std::vector< llvm::BasicBlock const * >::value_type *arg2 = 0 ;
  std::vector< llvm::BasicBlock const * >::value_type temp2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< BasicBlock const * > **)&jarg1;  temp2 = *(std::vector< llvm::BasicBlock const * >::value_type *)&jarg2;
  arg2 = (std::vector< llvm::BasicBlock const * >::value_type *)&temp2; 
  std_vector_Sl_BasicBlock_SS_const_Sm__Sg__doAdd__SWIG_0(arg1,(llvm::BasicBlock const *const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_BasicBlockVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< BasicBlock const * > *arg1 = (std::vector< BasicBlock const * > *) 0 ; jint arg2 ;
  std::vector< llvm::BasicBlock const * >::value_type *arg3 = 0 ;
  std::vector< llvm::BasicBlock const * >::value_type temp3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< BasicBlock const * > **)&jarg1;  arg2 = jarg2; 
  temp3 = *(std::vector< llvm::BasicBlock const * >::value_type *)&jarg3;
  arg3 = (std::vector< llvm::BasicBlock const * >::value_type *)&temp3;  try {
    std_vector_Sl_BasicBlock_SS_const_Sm__Sg__doAdd__SWIG_1(arg1,arg2,(llvm::BasicBlock const *const &)*arg3);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_BasicBlockVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< BasicBlock const * > *arg1 = (std::vector< BasicBlock const * > *) 0 ; jint arg2 ;
  std::vector< llvm::BasicBlock const * >::value_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< BasicBlock const * > **)&jarg1;  arg2 = jarg2;  try {
    result = (std::vector< llvm::BasicBlock const * >::value_type)std_vector_Sl_BasicBlock_SS_const_Sm__Sg__doRemove(arg1,arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< llvm::BasicBlock const * >::value_type *)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_BasicBlockVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< BasicBlock const * > *arg1 = (std::vector< BasicBlock const * > *) 0 ; jint arg2 ;
  std::vector< llvm::BasicBlock const * >::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< BasicBlock const * > **)&jarg1;  arg2 = jarg2;  try {
    result = (std::vector< llvm::BasicBlock const * >::value_type *) &std_vector_Sl_BasicBlock_SS_const_Sm__Sg__doGet(arg1,arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< llvm::BasicBlock const * >::value_type *)&jresult = *result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_BasicBlockVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ; std::vector< BasicBlock const * > *arg1 = (std::vector< BasicBlock const * > *) 0 ; jint arg2 ;
  std::vector< llvm::BasicBlock const * >::value_type *arg3 = 0 ;
  std::vector< llvm::BasicBlock const * >::value_type temp3 = 0 ; std::vector< llvm::BasicBlock const * >::value_type result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< BasicBlock const * > **)&jarg1;  arg2 = jarg2; 
  temp3 = *(std::vector< llvm::BasicBlock const * >::value_type *)&jarg3;
  arg3 = (std::vector< llvm::BasicBlock const * >::value_type *)&temp3;  try {
    result = (std::vector< llvm::BasicBlock const * >::value_type)std_vector_Sl_BasicBlock_SS_const_Sm__Sg__doSet(arg1,arg2,(llvm::BasicBlock const *const &)*arg3);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< llvm::BasicBlock const * >::value_type *)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_BasicBlockVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< BasicBlock const * > *arg1 = (std::vector< BasicBlock const * > *) 0 ; jint arg2 ; jint arg3 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::vector< BasicBlock const * > **)&jarg1;  arg2 = jarg2;  arg3 = jarg3;  try {
    std_vector_Sl_BasicBlock_SS_const_Sm__Sg__doRemoveRange(arg1,arg2,arg3);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1BasicBlockVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< BasicBlock const * > *arg1 = (std::vector< BasicBlock const * > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::vector< BasicBlock const * > **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1InstructionVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; std::vector< Instruction const * > *result = 0 ; (void)jenv; (void)jcls;
  result = (std::vector< Instruction const * > *)new std::vector< Instruction const * >();
  *(std::vector< Instruction const * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1InstructionVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< Instruction const * > *arg1 = 0 ; std::vector< Instruction const * > *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< Instruction const * > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Instruction const * > const & reference is null");
    return 0; }  
  result = (std::vector< Instruction const * > *)new std::vector< Instruction const * >((std::vector< Instruction const * > const &)*arg1);
  *(std::vector< Instruction const * > **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_InstructionVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< Instruction const * > *arg1 = (std::vector< Instruction const * > *) 0 ;
  std::vector< llvm::Instruction const * >::size_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< Instruction const * > **)&jarg1; 
  result = ((std::vector< Instruction const * > const *)arg1)->capacity(); jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_InstructionVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Instruction const * > *arg1 = (std::vector< Instruction const * > *) 0 ;
  std::vector< llvm::Instruction const * >::size_type arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< Instruction const * > **)&jarg1;  arg2 = (std::vector< llvm::Instruction const * >::size_type)jarg2; 
  try { (arg1)->reserve(arg2);}  catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_InstructionVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; std::vector< Instruction const * > *arg1 = (std::vector< Instruction const * > *) 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< Instruction const * > **)&jarg1; 
  result = (bool)((std::vector< Instruction const * > const *)arg1)->empty(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_InstructionVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Instruction const * > *arg1 = (std::vector< Instruction const * > *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< Instruction const * > **)&jarg1;  (arg1)->clear(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1InstructionVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ; jint arg1 ; llvm::Instruction **arg2 = 0 ; llvm::Instruction *temp2 = 0 ;
  std::vector< Instruction const * > *result = 0 ; (void)jenv; (void)jcls; arg1 = jarg1;  temp2 = *(llvm::Instruction **)&jarg2;
  arg2 = (llvm::Instruction **)&temp2;  try {
    result = (std::vector< Instruction const * > *)new_std_vector_Sl_Instruction_SS_const_Sm__Sg___SWIG_2(arg1,(llvm::Instruction const *const &)*arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< Instruction const * > **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_InstructionVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; std::vector< Instruction const * > *arg1 = (std::vector< Instruction const * > *) 0 ; jint result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< Instruction const * > **)&jarg1;  try {
    result = std_vector_Sl_Instruction_SS_const_Sm__Sg__doSize((std::vector< llvm::Instruction const * > const *)arg1);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_InstructionVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Instruction const * > *arg1 = (std::vector< Instruction const * > *) 0 ;
  std::vector< llvm::Instruction const * >::value_type *arg2 = 0 ;
  std::vector< llvm::Instruction const * >::value_type temp2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< Instruction const * > **)&jarg1; 
  temp2 = *(std::vector< llvm::Instruction const * >::value_type *)&jarg2;
  arg2 = (std::vector< llvm::Instruction const * >::value_type *)&temp2; 
  std_vector_Sl_Instruction_SS_const_Sm__Sg__doAdd__SWIG_0(arg1,(llvm::Instruction const *const &)*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_InstructionVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< Instruction const * > *arg1 = (std::vector< Instruction const * > *) 0 ; jint arg2 ;
  std::vector< llvm::Instruction const * >::value_type *arg3 = 0 ;
  std::vector< llvm::Instruction const * >::value_type temp3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< Instruction const * > **)&jarg1;  arg2 = jarg2; 
  temp3 = *(std::vector< llvm::Instruction const * >::value_type *)&jarg3;
  arg3 = (std::vector< llvm::Instruction const * >::value_type *)&temp3;  try {
    std_vector_Sl_Instruction_SS_const_Sm__Sg__doAdd__SWIG_1(arg1,arg2,(llvm::Instruction const *const &)*arg3);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_InstructionVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< Instruction const * > *arg1 = (std::vector< Instruction const * > *) 0 ; jint arg2 ;
  std::vector< llvm::Instruction const * >::value_type result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< Instruction const * > **)&jarg1;  arg2 = jarg2;  try {
    result = (std::vector< llvm::Instruction const * >::value_type)std_vector_Sl_Instruction_SS_const_Sm__Sg__doRemove(arg1,arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< llvm::Instruction const * >::value_type *)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_InstructionVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ; std::vector< Instruction const * > *arg1 = (std::vector< Instruction const * > *) 0 ; jint arg2 ;
  std::vector< llvm::Instruction const * >::value_type *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< Instruction const * > **)&jarg1;  arg2 = jarg2;  try {
    result = (std::vector< llvm::Instruction const * >::value_type *) &std_vector_Sl_Instruction_SS_const_Sm__Sg__doGet(arg1,arg2);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< llvm::Instruction const * >::value_type *)&jresult = *result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_InstructionVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ; std::vector< Instruction const * > *arg1 = (std::vector< Instruction const * > *) 0 ; jint arg2 ;
  std::vector< llvm::Instruction const * >::value_type *arg3 = 0 ;
  std::vector< llvm::Instruction const * >::value_type temp3 = 0 ; std::vector< llvm::Instruction const * >::value_type result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(std::vector< Instruction const * > **)&jarg1;  arg2 = jarg2; 
  temp3 = *(std::vector< llvm::Instruction const * >::value_type *)&jarg3;
  arg3 = (std::vector< llvm::Instruction const * >::value_type *)&temp3;  try {
    result = (std::vector< llvm::Instruction const * >::value_type)std_vector_Sl_Instruction_SS_const_Sm__Sg__doSet(arg1,arg2,(llvm::Instruction const *const &)*arg3);}
   catch(std::out_of_range &_e) { SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return 0; } 
  *(std::vector< llvm::Instruction const * >::value_type *)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_InstructionVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< Instruction const * > *arg1 = (std::vector< Instruction const * > *) 0 ; jint arg2 ; jint arg3 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(std::vector< Instruction const * > **)&jarg1;  arg2 = jarg2;  arg3 = jarg3;  try {
    std_vector_Sl_Instruction_SS_const_Sm__Sg__doRemoveRange(arg1,arg2,arg3);}  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what()); return ; }  }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1InstructionVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Instruction const * > *arg1 = (std::vector< Instruction const * > *) 0 ; (void)jenv; (void)jcls;
  arg1 = *(std::vector< Instruction const * > **)&jarg1;  delete arg1; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_DGENERAL_1get(JNIEnv *jenv, jclass jcls) { jstring jresult = 0 ;
  char *result = 0 ; (void)jenv; (void)jcls; result = (char *)("general");
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_DPAGBuild_1get(JNIEnv *jenv, jclass jcls) { jstring jresult = 0 ;
  char *result = 0 ; (void)jenv; (void)jcls; result = (char *)("pag");
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_DMemModel_1get(JNIEnv *jenv, jclass jcls) { jstring jresult = 0 ;
  char *result = 0 ; (void)jenv; (void)jcls; result = (char *)("mm");
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_DMemModelCE_1get(JNIEnv *jenv, jclass jcls) { jstring jresult = 0 ;
  char *result = 0 ; (void)jenv; (void)jcls; result = (char *)("mmce");
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_DCOMModel_1get(JNIEnv *jenv, jclass jcls) { jstring jresult = 0 ;
  char *result = 0 ; (void)jenv; (void)jcls; result = (char *)("comm");
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_DDDA_1get(JNIEnv *jenv, jclass jcls) { jstring jresult = 0 ;
  char *result = 0 ; (void)jenv; (void)jcls; result = (char *)("dda");
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_DDumpPT_1get(JNIEnv *jenv, jclass jcls) { jstring jresult = 0 ;
  char *result = 0 ; (void)jenv; (void)jcls; result = (char *)("dumppt");
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_DRefinePT_1get(JNIEnv *jenv, jclass jcls) { jstring jresult = 0 ;
  char *result = 0 ; (void)jenv; (void)jcls; result = (char *)("sbpt");
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_DCache_1get(JNIEnv *jenv, jclass jcls) { jstring jresult = 0 ;
  char *result = 0 ; (void)jenv; (void)jcls; result = (char *)("cache");
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_DWPA_1get(JNIEnv *jenv, jclass jcls) { jstring jresult = 0 ;
  char *result = 0 ; (void)jenv; (void)jcls; result = (char *)("wpa");
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_DMSSA_1get(JNIEnv *jenv, jclass jcls) { jstring jresult = 0 ;
  char *result = 0 ; (void)jenv; (void)jcls; result = (char *)("mssa");
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_DInstrument_1get(JNIEnv *jenv, jclass jcls) { jstring jresult = 0 ;
  char *result = 0 ; (void)jenv; (void)jcls; result = (char *)("ins");
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_DAndersen_1get(JNIEnv *jenv, jclass jcls) { jstring jresult = 0 ;
  char *result = 0 ; (void)jenv; (void)jcls; result = (char *)("ander");
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_DSaber_1get(JNIEnv *jenv, jclass jcls) { jstring jresult = 0 ;
  char *result = 0 ; (void)jenv; (void)jcls; result = (char *)("saber");
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_DMTA_1get(JNIEnv *jenv, jclass jcls) { jstring jresult = 0 ;
  char *result = 0 ; (void)jenv; (void)jcls; result = (char *)("mta");
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_DCHA_1get(JNIEnv *jenv, jclass jcls) { jstring jresult = 0 ;
  char *result = 0 ; (void)jenv; (void)jcls; result = (char *)("cha");
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_TIMEINTERVAL_1get(JNIEnv *jenv, jclass jcls) { jint jresult = 0 ;
  int result; (void)jenv; (void)jcls; result = (int)(1000); jresult = (jint)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1TotalAnalysisTime_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::TotalAnalysisTime = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::TotalAnalysisTime, (const char *)arg1); }  else { PTAStat::TotalAnalysisTime = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1TotalAnalysisTime_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::TotalAnalysisTime;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1SCCDetectionTime_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::SCCDetectionTime = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::SCCDetectionTime, (const char *)arg1); }  else { PTAStat::SCCDetectionTime = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1SCCDetectionTime_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::SCCDetectionTime;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1SCCMergeTime_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::SCCMergeTime = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::SCCMergeTime, (const char *)arg1); }  else { PTAStat::SCCMergeTime = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1SCCMergeTime_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::SCCMergeTime;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1ProcessLoadStoreTime_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) {
      PTAStat::ProcessLoadStoreTime = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::ProcessLoadStoreTime, (const char *)arg1); }  else { PTAStat::ProcessLoadStoreTime = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1ProcessLoadStoreTime_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::ProcessLoadStoreTime;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1ProcessCopyGepTime_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::ProcessCopyGepTime = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::ProcessCopyGepTime, (const char *)arg1); }  else { PTAStat::ProcessCopyGepTime = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1ProcessCopyGepTime_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::ProcessCopyGepTime;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1UpdateCallGraphTime_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::UpdateCallGraphTime = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::UpdateCallGraphTime, (const char *)arg1); }  else { PTAStat::UpdateCallGraphTime = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1UpdateCallGraphTime_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::UpdateCallGraphTime;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1TotalNumOfPointers_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::TotalNumOfPointers = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::TotalNumOfPointers, (const char *)arg1); }  else { PTAStat::TotalNumOfPointers = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1TotalNumOfPointers_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::TotalNumOfPointers;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1TotalNumOfObjects_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::TotalNumOfObjects = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::TotalNumOfObjects, (const char *)arg1); }  else { PTAStat::TotalNumOfObjects = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1TotalNumOfObjects_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::TotalNumOfObjects;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1TotalNumOfFieldObjects_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) {
      PTAStat::TotalNumOfFieldObjects = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::TotalNumOfFieldObjects, (const char *)arg1); }  else { PTAStat::TotalNumOfFieldObjects = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1TotalNumOfFieldObjects_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::TotalNumOfFieldObjects;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1MaxStructSize_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::MaxStructSize = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::MaxStructSize, (const char *)arg1); }  else { PTAStat::MaxStructSize = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1MaxStructSize_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::MaxStructSize;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1TotalNumOfEdges_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::TotalNumOfEdges = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::TotalNumOfEdges, (const char *)arg1); }  else { PTAStat::TotalNumOfEdges = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1TotalNumOfEdges_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::TotalNumOfEdges;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfAddrs_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfAddrs = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfAddrs, (const char *)arg1); }  else { PTAStat::NumOfAddrs = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfAddrs_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfAddrs;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfLoads_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfLoads = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfLoads, (const char *)arg1); }  else { PTAStat::NumOfLoads = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfLoads_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfLoads;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfStores_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfStores = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfStores, (const char *)arg1); }  else { PTAStat::NumOfStores = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfStores_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfStores;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfCopys_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfCopys = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfCopys, (const char *)arg1); }  else { PTAStat::NumOfCopys = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfCopys_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfCopys;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfGeps_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfGeps = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfGeps, (const char *)arg1); }  else { PTAStat::NumOfGeps = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfGeps_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfGeps;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfCalls_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfCalls = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfCalls, (const char *)arg1); }  else { PTAStat::NumOfCalls = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfCalls_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfCalls;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfReturns_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfReturns = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfReturns, (const char *)arg1); }  else { PTAStat::NumOfReturns = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfReturns_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfReturns;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfProcessedAddrs_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfProcessedAddrs = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfProcessedAddrs, (const char *)arg1); }  else { PTAStat::NumOfProcessedAddrs = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfProcessedAddrs_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfProcessedAddrs;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfProcessedLoads_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfProcessedLoads = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfProcessedLoads, (const char *)arg1); }  else { PTAStat::NumOfProcessedLoads = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfProcessedLoads_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfProcessedLoads;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfProcessedStores_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) {
      PTAStat::NumOfProcessedStores = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfProcessedStores, (const char *)arg1); }  else { PTAStat::NumOfProcessedStores = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfProcessedStores_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfProcessedStores;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfProcessedCopys_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfProcessedCopys = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfProcessedCopys, (const char *)arg1); }  else { PTAStat::NumOfProcessedCopys = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfProcessedCopys_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfProcessedCopys;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfProcessedGeps_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfProcessedGeps = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfProcessedGeps, (const char *)arg1); }  else { PTAStat::NumOfProcessedGeps = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfProcessedGeps_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfProcessedGeps;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfSfr_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfSfr = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfSfr, (const char *)arg1); }  else { PTAStat::NumOfSfr = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfSfr_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfSfr;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfFieldExpand_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfFieldExpand = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfFieldExpand, (const char *)arg1); }  else { PTAStat::NumOfFieldExpand = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfFieldExpand_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfFieldExpand;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfFunctionObjs_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfFunctionObjs = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfFunctionObjs, (const char *)arg1); }  else { PTAStat::NumOfFunctionObjs = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfFunctionObjs_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfFunctionObjs;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfGlobalObjs_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfGlobalObjs = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfGlobalObjs, (const char *)arg1); }  else { PTAStat::NumOfGlobalObjs = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfGlobalObjs_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfGlobalObjs;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfHeapObjs_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfHeapObjs = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfHeapObjs, (const char *)arg1); }  else { PTAStat::NumOfHeapObjs = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfHeapObjs_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfHeapObjs;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfStackObjs_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfStackObjs = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfStackObjs, (const char *)arg1); }  else { PTAStat::NumOfStackObjs = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfStackObjs_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfStackObjs;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfObjsHasVarStruct_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) {
      PTAStat::NumOfObjsHasVarStruct = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfObjsHasVarStruct, (const char *)arg1); }  else { PTAStat::NumOfObjsHasVarStruct = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfObjsHasVarStruct_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfObjsHasVarStruct;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfObjsHasVarArray_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) {
      PTAStat::NumOfObjsHasVarArray = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfObjsHasVarArray, (const char *)arg1); }  else { PTAStat::NumOfObjsHasVarArray = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfObjsHasVarArray_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfObjsHasVarArray;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfObjsHasConstStruct_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) {
      PTAStat::NumOfObjsHasConstStruct = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfObjsHasConstStruct, (const char *)arg1); }  else { PTAStat::NumOfObjsHasConstStruct = 0; }  }
   if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfObjsHasConstStruct_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfObjsHasConstStruct;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfObjsHasConstArray_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) {
      PTAStat::NumOfObjsHasConstArray = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfObjsHasConstArray, (const char *)arg1); }  else { PTAStat::NumOfObjsHasConstArray = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfObjsHasConstArray_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfObjsHasConstArray;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfNonPtrObjs_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfNonPtrObjs = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfNonPtrObjs, (const char *)arg1); }  else { PTAStat::NumOfNonPtrObjs = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfNonPtrObjs_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfNonPtrObjs;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfConstantObjs_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfConstantObjs = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfConstantObjs, (const char *)arg1); }  else { PTAStat::NumOfConstantObjs = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfConstantObjs_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfConstantObjs;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumberOfFieldInsensitiveObj_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) {
      PTAStat::NumberOfFieldInsensitiveObj = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumberOfFieldInsensitiveObj, (const char *)arg1); }  else {
      PTAStat::NumberOfFieldInsensitiveObj = 0; }  }  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumberOfFieldInsensitiveObj_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumberOfFieldInsensitiveObj;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumberOfFieldSensitiveObj_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) {
      PTAStat::NumberOfFieldSensitiveObj = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumberOfFieldSensitiveObj, (const char *)arg1); }  else { PTAStat::NumberOfFieldSensitiveObj = 0; }
     }  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumberOfFieldSensitiveObj_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumberOfFieldSensitiveObj;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfPointers_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfPointers = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfPointers, (const char *)arg1); }  else { PTAStat::NumOfPointers = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfPointers_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfPointers;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfGepFieldPointers_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) {
      PTAStat::NumOfGepFieldPointers = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfGepFieldPointers, (const char *)arg1); }  else { PTAStat::NumOfGepFieldPointers = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfGepFieldPointers_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfGepFieldPointers;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfMemObjects_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfMemObjects = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfMemObjects, (const char *)arg1); }  else { PTAStat::NumOfMemObjects = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfMemObjects_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfMemObjects;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfGepFieldObjects_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) {
      PTAStat::NumOfGepFieldObjects = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfGepFieldObjects, (const char *)arg1); }  else { PTAStat::NumOfGepFieldObjects = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfGepFieldObjects_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfGepFieldObjects;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1AveragePointsToSetSize_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) {
      PTAStat::AveragePointsToSetSize = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::AveragePointsToSetSize, (const char *)arg1); }  else { PTAStat::AveragePointsToSetSize = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1AveragePointsToSetSize_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::AveragePointsToSetSize;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1AverageTopLevPointsToSetSize_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) {
      PTAStat::AverageTopLevPointsToSetSize = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::AverageTopLevPointsToSetSize, (const char *)arg1); }  else {
      PTAStat::AverageTopLevPointsToSetSize = 0; }  }  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1AverageTopLevPointsToSetSize_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::AverageTopLevPointsToSetSize;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1MaxPointsToSetSize_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::MaxPointsToSetSize = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::MaxPointsToSetSize, (const char *)arg1); }  else { PTAStat::MaxPointsToSetSize = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1MaxPointsToSetSize_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::MaxPointsToSetSize;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfIterations_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfIterations = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfIterations, (const char *)arg1); }  else { PTAStat::NumOfIterations = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfIterations_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfIterations;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfIndirectCallSites_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) {
      PTAStat::NumOfIndirectCallSites = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfIndirectCallSites, (const char *)arg1); }  else { PTAStat::NumOfIndirectCallSites = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfIndirectCallSites_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfIndirectCallSites;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfIndirectEdgeSolved_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) {
      PTAStat::NumOfIndirectEdgeSolved = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfIndirectEdgeSolved, (const char *)arg1); }  else { PTAStat::NumOfIndirectEdgeSolved = 0; }  }
   if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfIndirectEdgeSolved_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfIndirectEdgeSolved;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfSCCDetection_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfSCCDetection = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfSCCDetection, (const char *)arg1); }  else { PTAStat::NumOfSCCDetection = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfSCCDetection_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfSCCDetection;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfCycles_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfCycles = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfCycles, (const char *)arg1); }  else { PTAStat::NumOfCycles = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfCycles_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfCycles;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfPWCCycles_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfPWCCycles = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfPWCCycles, (const char *)arg1); }  else { PTAStat::NumOfPWCCycles = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfPWCCycles_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfPWCCycles;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfNodesInCycles_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfNodesInCycles = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfNodesInCycles, (const char *)arg1); }  else { PTAStat::NumOfNodesInCycles = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfNodesInCycles_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfNodesInCycles;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1MaxNumOfNodesInSCC_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::MaxNumOfNodesInSCC = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::MaxNumOfNodesInSCC, (const char *)arg1); }  else { PTAStat::MaxNumOfNodesInSCC = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1MaxNumOfNodesInSCC_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::MaxNumOfNodesInSCC;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfNullPointer_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ; (void)jenv; (void)jcls; arg1 = 0; if (jarg1) { arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ; }  { if (arg1) { PTAStat::NumOfNullPointer = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)PTAStat::NumOfNullPointer, (const char *)arg1); }  else { PTAStat::NumOfNullPointer = 0; }  } 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1NumOfNullPointer_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; char *result = 0 ; (void)jenv; (void)jcls; result = (char *)PTAStat::NumOfNullPointer;
  if (result) jresult = jenv->NewStringUTF((const char *)result); return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1PTAStat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; PTAStat *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  result = (PTAStat *)new PTAStat(arg1); *(PTAStat **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1PTAStat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PTAStat *arg1 = (PTAStat *) 0 ; (void)jenv; (void)jcls; arg1 = *(PTAStat **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1startClk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  PTAStat *arg1 = (PTAStat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PTAStat **)&jarg1;  (arg1)->startClk(); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1endClk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  PTAStat *arg1 = (PTAStat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PTAStat **)&jarg1;  (arg1)->endClk(); }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1getClk(JNIEnv *jenv, jclass jcls) { jdouble jresult = 0 ;
  double result; (void)jenv; (void)jcls; result = (double)PTAStat::getClk(); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1generalNumMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PTAStat *arg1 = (PTAStat *) 0 ; PTAStat::NUMStatMap *arg2 = (PTAStat::NUMStatMap *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(PTAStat **)&jarg1;  arg2 = *(PTAStat::NUMStatMap **)&jarg2;  if (arg1) (arg1)->generalNumMap = *arg2; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1generalNumMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; PTAStat *arg1 = (PTAStat *) 0 ; PTAStat::NUMStatMap *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(PTAStat **)&jarg1;  result = (PTAStat::NUMStatMap *)& ((arg1)->generalNumMap);
  *(PTAStat::NUMStatMap **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1PTNumStatMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PTAStat *arg1 = (PTAStat *) 0 ; PTAStat::NUMStatMap *arg2 = (PTAStat::NUMStatMap *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(PTAStat **)&jarg1;  arg2 = *(PTAStat::NUMStatMap **)&jarg2;  if (arg1) (arg1)->PTNumStatMap = *arg2; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1PTNumStatMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; PTAStat *arg1 = (PTAStat *) 0 ; PTAStat::NUMStatMap *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(PTAStat **)&jarg1;  result = (PTAStat::NUMStatMap *)& ((arg1)->PTNumStatMap);
  *(PTAStat::NUMStatMap **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1timeStatMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PTAStat *arg1 = (PTAStat *) 0 ; PTAStat::TIMEStatMap *arg2 = (PTAStat::TIMEStatMap *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(PTAStat **)&jarg1;  arg2 = *(PTAStat::TIMEStatMap **)&jarg2; 
  if (arg1) (arg1)->timeStatMap = *arg2; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1timeStatMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; PTAStat *arg1 = (PTAStat *) 0 ; PTAStat::TIMEStatMap *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(PTAStat **)&jarg1;  result = (PTAStat::TIMEStatMap *)& ((arg1)->timeStatMap);
  *(PTAStat::TIMEStatMap **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1localVarInRecursion_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  PTAStat *arg1 = (PTAStat *) 0 ; NodeBS arg2 ; NodeBS *argp2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(PTAStat **)&jarg1;  argp2 = *(NodeBS **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null NodeBS"); return ; } 
  arg2 = *argp2;  if (arg1) (arg1)->localVarInRecursion = arg2; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1localVarInRecursion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; PTAStat *arg1 = (PTAStat *) 0 ; NodeBS result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(PTAStat **)&jarg1;  result =  ((arg1)->localVarInRecursion);
  *(NodeBS **)&jresult = new NodeBS((const NodeBS &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1startTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  PTAStat *arg1 = (PTAStat *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PTAStat **)&jarg1; 
  arg2 = (double)jarg2;  if (arg1) (arg1)->startTime = arg2; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1startTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; PTAStat *arg1 = (PTAStat *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(PTAStat **)&jarg1;  result = (double) ((arg1)->startTime); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1endTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  PTAStat *arg1 = (PTAStat *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PTAStat **)&jarg1; 
  arg2 = (double)jarg2;  if (arg1) (arg1)->endTime = arg2; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1endTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; PTAStat *arg1 = (PTAStat *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(PTAStat **)&jarg1;  result = (double) ((arg1)->endTime); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1performStat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  PTAStat *arg1 = (PTAStat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PTAStat **)&jarg1;  (arg1)->performStat(); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1printStat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  PTAStat *arg1 = (PTAStat *) 0 ; std::string arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PTAStat **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; }  
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ; (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  (arg1)->printStat(arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1printStat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  PTAStat *arg1 = (PTAStat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PTAStat **)&jarg1;  (arg1)->printStat(); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1performStatPerQuery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  PTAStat *arg1 = (PTAStat *) 0 ; NodeID arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PTAStat **)&jarg1; 
  arg2 = (NodeID)jarg2;  (arg1)->performStatPerQuery(arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1printStatPerQuery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  PTAStat *arg1 = (PTAStat *) 0 ; NodeID arg2 ; PointsTo *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(PTAStat **)&jarg1;  arg2 = (NodeID)jarg2;  arg3 = *(PointsTo **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PointsTo const & reference is null"); return ; }  
  (arg1)->printStatPerQuery(arg2,(PointsTo const &)*arg3); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PTAStat_1callgraphStat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  PTAStat *arg1 = (PTAStat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PTAStat **)&jarg1;  (arg1)->callgraphStat(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_outs(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  raw_ostream *result = 0 ; (void)jenv; (void)jcls; result = (raw_ostream *) &SVFUtil::outs();
  *(raw_ostream **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_errs(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  raw_ostream *result = 0 ; (void)jenv; (void)jcls; result = (raw_ostream *) &SVFUtil::errs();
  *(raw_ostream **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isIntrinsicDbgFun(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Function *arg1 = (Function *) 0 ; bool result; (void)jenv; (void)jcls; arg1 = *(Function **)&jarg1; 
  result = (bool)SVFUtil::isIntrinsicDbgFun((llvm::Function const *)arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isInstrinsicDbgInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (bool)SVFUtil::isInstrinsicDbgInst((llvm::Instruction const *)arg1);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isAnAllocationWraper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (bool)SVFUtil::isAnAllocationWraper((llvm::Instruction const *)arg1);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isCallSite(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (bool)SVFUtil::isCallSite((llvm::Instruction const *)arg1);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isNonInstricCallSite(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (bool)SVFUtil::isNonInstricCallSite((llvm::Instruction const *)arg1);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isReturn(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (bool)SVFUtil::isReturn((llvm::Instruction const *)arg1);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_getLLVMFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; Value *arg1 = (Value *) 0 ; Function *result = 0 ; (void)jenv; (void)jcls; arg1 = *(Value **)&jarg1; 
  result = (Function *)SVFUtil::getLLVMFunction((llvm::Value const *)arg1); *(Function **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_getLLVMCallSite(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; CallSite result; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = SVFUtil::getLLVMCallSite((llvm::Instruction const *)arg1);
  *(CallSite **)&jresult = new CallSite((const CallSite &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_getDefFunForMultipleModule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; Function *arg1 = (Function *) 0 ; Function *result = 0 ; (void)jenv; (void)jcls;
  arg1 = *(Function **)&jarg1;  result = (Function *)SVFUtil::getDefFunForMultipleModule((llvm::Function const *)arg1);
  *(Function **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_getCallee_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; CallSite arg1 ; CallSite const *argp1 ; Function *result = 0 ; (void)jenv; (void)jcls;
  argp1 = *(CallSite **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite const"); return 0; } 
  arg1 = *argp1;  result = (Function *)SVFUtil::getCallee(arg1); *(Function **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_getCallee_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; Function *result = 0 ; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (Function *)SVFUtil::getCallee((llvm::Instruction const *)arg1);
  *(Function **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isExtCall_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Function *arg1 = (Function *) 0 ; bool result; (void)jenv; (void)jcls; arg1 = *(Function **)&jarg1; 
  result = (bool)SVFUtil::isExtCall((llvm::Function const *)arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isExtCall_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; CallSite arg1 ; CallSite const *argp1 ; bool result; (void)jenv; (void)jcls;
  argp1 = *(CallSite **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite const"); return 0; } 
  arg1 = *argp1;  result = (bool)SVFUtil::isExtCall(arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isExtCall_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (bool)SVFUtil::isExtCall((llvm::Instruction const *)arg1);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isHeapAllocExtFunViaRet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Function *arg1 = (Function *) 0 ; bool result; (void)jenv; (void)jcls; arg1 = *(Function **)&jarg1; 
  result = (bool)SVFUtil::isHeapAllocExtFunViaRet((llvm::Function const *)arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isHeapAllocExtFunViaArg(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Function *arg1 = (Function *) 0 ; bool result; (void)jenv; (void)jcls; arg1 = *(Function **)&jarg1; 
  result = (bool)SVFUtil::isHeapAllocExtFunViaArg((llvm::Function const *)arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isHeapAllocExtCallViaRet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; CallSite arg1 ; CallSite const *argp1 ; bool result; (void)jenv; (void)jcls;
  argp1 = *(CallSite **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite const"); return 0; } 
  arg1 = *argp1;  result = (bool)SVFUtil::isHeapAllocExtCallViaRet(arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isHeapAllocExtCallViaRet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (bool)SVFUtil::isHeapAllocExtCallViaRet((llvm::Instruction const *)arg1);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isHeapAllocExtCallViaArg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; CallSite arg1 ; CallSite const *argp1 ; bool result; (void)jenv; (void)jcls;
  argp1 = *(CallSite **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite const"); return 0; } 
  arg1 = *argp1;  result = (bool)SVFUtil::isHeapAllocExtCallViaArg(arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isHeapAllocExtCallViaArg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (bool)SVFUtil::isHeapAllocExtCallViaArg((llvm::Instruction const *)arg1);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isHeapAllocExtCall_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; CallSite arg1 ; CallSite const *argp1 ; bool result; (void)jenv; (void)jcls;
  argp1 = *(CallSite **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite const"); return 0; } 
  arg1 = *argp1;  result = (bool)SVFUtil::isHeapAllocExtCall(arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isHeapAllocExtCall_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (bool)SVFUtil::isHeapAllocExtCall((llvm::Instruction const *)arg1);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_getHeapAllocHoldingArgPosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ; Function *arg1 = (Function *) 0 ; int result; (void)jenv; (void)jcls; arg1 = *(Function **)&jarg1; 
  result = (int)SVFUtil::getHeapAllocHoldingArgPosition((llvm::Function const *)arg1); jresult = (jint)result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_getHeapAllocHoldingArgPosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ; CallSite arg1 ; CallSite const *argp1 ; int result; (void)jenv; (void)jcls; argp1 = *(CallSite **)&jarg1; 
  if (!argp1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite const");
    return 0; }  arg1 = *argp1;  result = (int)SVFUtil::getHeapAllocHoldingArgPosition(arg1); jresult = (jint)result; 
  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_getHeapAllocHoldingArgPosition_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; int result; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (int)SVFUtil::getHeapAllocHoldingArgPosition((llvm::Instruction const *)arg1);
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isReallocExtFun(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Function *arg1 = (Function *) 0 ; bool result; (void)jenv; (void)jcls; arg1 = *(Function **)&jarg1; 
  result = (bool)SVFUtil::isReallocExtFun((llvm::Function const *)arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isReallocExtCall_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; CallSite arg1 ; CallSite const *argp1 ; bool result; (void)jenv; (void)jcls;
  argp1 = *(CallSite **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite const"); return 0; } 
  arg1 = *argp1;  result = (bool)SVFUtil::isReallocExtCall(arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isReallocExtCall_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (bool)SVFUtil::isReallocExtCall((llvm::Instruction const *)arg1);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isDeallocExtFun(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Function *arg1 = (Function *) 0 ; bool result; (void)jenv; (void)jcls; arg1 = *(Function **)&jarg1; 
  result = (bool)SVFUtil::isDeallocExtFun((llvm::Function const *)arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isDeallocExtCall_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; CallSite arg1 ; CallSite const *argp1 ; bool result; (void)jenv; (void)jcls;
  argp1 = *(CallSite **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite const"); return 0; } 
  arg1 = *argp1;  result = (bool)SVFUtil::isDeallocExtCall(arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isDeallocExtCall_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (bool)SVFUtil::isDeallocExtCall((llvm::Instruction const *)arg1);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isStaticExtFun(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Function *arg1 = (Function *) 0 ; bool result; (void)jenv; (void)jcls; arg1 = *(Function **)&jarg1; 
  result = (bool)SVFUtil::isStaticExtFun((llvm::Function const *)arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isStaticExtCall_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; CallSite arg1 ; CallSite const *argp1 ; bool result; (void)jenv; (void)jcls;
  argp1 = *(CallSite **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite const"); return 0; } 
  arg1 = *argp1;  result = (bool)SVFUtil::isStaticExtCall(arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isStaticExtCall_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (bool)SVFUtil::isStaticExtCall((llvm::Instruction const *)arg1);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isHeapAllocOrStaticExtCall_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; CallSite arg1 ; CallSite const *argp1 ; bool result; (void)jenv; (void)jcls;
  argp1 = *(CallSite **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite const"); return 0; } 
  arg1 = *argp1;  result = (bool)SVFUtil::isHeapAllocOrStaticExtCall(arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isHeapAllocOrStaticExtCall_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (bool)SVFUtil::isHeapAllocOrStaticExtCall((llvm::Instruction const *)arg1);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_extCallTy(JNIEnv *jenv, jclass jcls, jlong jarg1) { jlong jresult = 0 ;
  Function *arg1 = (Function *) 0 ; ExtAPI::extf_t result; (void)jenv; (void)jcls; arg1 = *(Function **)&jarg1; 
  result = SVFUtil::extCallTy((llvm::Function const *)arg1);
  *(ExtAPI::extf_t **)&jresult = new ExtAPI::extf_t((const ExtAPI::extf_t &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_getRefTypeOfHeapAllocOrStatic_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; CallSite arg1 ; CallSite const *argp1 ; PointerType *result = 0 ; (void)jenv; (void)jcls;
  argp1 = *(CallSite **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite const"); return 0; } 
  arg1 = *argp1;  result = (PointerType *)SVFUtil::getRefTypeOfHeapAllocOrStatic(arg1); *(PointerType **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_getRefTypeOfHeapAllocOrStatic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; PointerType *result = 0 ; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1; 
  result = (PointerType *)SVFUtil::getRefTypeOfHeapAllocOrStatic((llvm::Instruction const *)arg1);
  *(PointerType **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isThreadForkCall_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; CallSite arg1 ; CallSite const *argp1 ; bool result; (void)jenv; (void)jcls;
  argp1 = *(CallSite **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite const"); return 0; } 
  arg1 = *argp1;  result = (bool)SVFUtil::isThreadForkCall(arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isThreadForkCall_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (bool)SVFUtil::isThreadForkCall((llvm::Instruction const *)arg1);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isHareParForCall_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; CallSite arg1 ; CallSite const *argp1 ; bool result; (void)jenv; (void)jcls;
  argp1 = *(CallSite **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite const"); return 0; } 
  arg1 = *argp1;  result = (bool)SVFUtil::isHareParForCall(arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isHareParForCall_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (bool)SVFUtil::isHareParForCall((llvm::Instruction const *)arg1);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isThreadJoinCall_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; CallSite arg1 ; CallSite const *argp1 ; bool result; (void)jenv; (void)jcls;
  argp1 = *(CallSite **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite const"); return 0; } 
  arg1 = *argp1;  result = (bool)SVFUtil::isThreadJoinCall(arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isThreadJoinCall_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (bool)SVFUtil::isThreadJoinCall((llvm::Instruction const *)arg1);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isThreadExitCall_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; CallSite arg1 ; CallSite const *argp1 ; bool result; (void)jenv; (void)jcls;
  argp1 = *(CallSite **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite const"); return 0; } 
  arg1 = *argp1;  result = (bool)SVFUtil::isThreadExitCall(arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isThreadExitCall_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (bool)SVFUtil::isThreadExitCall((llvm::Instruction const *)arg1);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isLockAquireCall_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; CallSite arg1 ; CallSite const *argp1 ; bool result; (void)jenv; (void)jcls;
  argp1 = *(CallSite **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite const"); return 0; } 
  arg1 = *argp1;  result = (bool)SVFUtil::isLockAquireCall(arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isLockAquireCall_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (bool)SVFUtil::isLockAquireCall((llvm::Instruction const *)arg1);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isLockReleaseCall_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; CallSite arg1 ; CallSite const *argp1 ; bool result; (void)jenv; (void)jcls;
  argp1 = *(CallSite **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite const"); return 0; } 
  arg1 = *argp1;  result = (bool)SVFUtil::isLockReleaseCall(arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isLockReleaseCall_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (bool)SVFUtil::isLockReleaseCall((llvm::Instruction const *)arg1);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isBarrierWaitCall_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; CallSite arg1 ; CallSite const *argp1 ; bool result; (void)jenv; (void)jcls;
  argp1 = *(CallSite **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite const"); return 0; } 
  arg1 = *argp1;  result = (bool)SVFUtil::isBarrierWaitCall(arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isBarrierWaitCall_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (bool)SVFUtil::isBarrierWaitCall((llvm::Instruction const *)arg1);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_getForkedFun_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; CallSite arg1 ; CallSite const *argp1 ; Value *result = 0 ; (void)jenv; (void)jcls;
  argp1 = *(CallSite **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite const"); return 0; } 
  arg1 = *argp1;  result = (Value *)SVFUtil::getForkedFun(arg1); *(Value **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_getForkedFun_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; Value *result = 0 ; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (Value *)SVFUtil::getForkedFun((llvm::Instruction const *)arg1);
  *(Value **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_getActualParmAtForkSite_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; CallSite arg1 ; CallSite const *argp1 ; Value *result = 0 ; (void)jenv; (void)jcls;
  argp1 = *(CallSite **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite const"); return 0; } 
  arg1 = *argp1;  result = (Value *)SVFUtil::getActualParmAtForkSite(arg1); *(Value **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_getActualParmAtForkSite_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; Value *result = 0 ; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (Value *)SVFUtil::getActualParmAtForkSite((llvm::Instruction const *)arg1);
  *(Value **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_getTaskFuncAtHareParForSite_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; CallSite arg1 ; CallSite const *argp1 ; Value *result = 0 ; (void)jenv; (void)jcls;
  argp1 = *(CallSite **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite const"); return 0; } 
  arg1 = *argp1;  result = (Value *)SVFUtil::getTaskFuncAtHareParForSite(arg1); *(Value **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_getTaskFuncAtHareParForSite_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; Value *result = 0 ; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (Value *)SVFUtil::getTaskFuncAtHareParForSite((llvm::Instruction const *)arg1);
  *(Value **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_getTaskDataAtHareParForSite_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; CallSite arg1 ; CallSite const *argp1 ; Value *result = 0 ; (void)jenv; (void)jcls;
  argp1 = *(CallSite **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite const"); return 0; } 
  arg1 = *argp1;  result = (Value *)SVFUtil::getTaskDataAtHareParForSite(arg1); *(Value **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_getTaskDataAtHareParForSite_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; Value *result = 0 ; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (Value *)SVFUtil::getTaskDataAtHareParForSite((llvm::Instruction const *)arg1);
  *(Value **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Value *arg1 = (Value *) 0 ; bool result; (void)jenv; (void)jcls; arg1 = *(Value **)&jarg1; 
  result = (bool)SVFUtil::isObject((llvm::Value const *)arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isDeadFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Function *arg1 = (Function *) 0 ; bool result; (void)jenv; (void)jcls; arg1 = *(Function **)&jarg1; 
  result = (bool)SVFUtil::isDeadFunction((llvm::Function const *)arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_ArgInDeadFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Value *arg1 = (Value *) 0 ; bool result; (void)jenv; (void)jcls; arg1 = *(Value **)&jarg1; 
  result = (bool)SVFUtil::ArgInDeadFunction((llvm::Value const *)arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isProgEntryFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Function *arg1 = (Function *) 0 ; bool result; (void)jenv; (void)jcls; arg1 = *(Function **)&jarg1; 
  result = (bool)SVFUtil::isProgEntryFunction((llvm::Function const *)arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_getProgEntryFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SVFModule arg1 ; SVFModule *argp1 ; Function *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  argp1 = *(SVFModule **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SVFModule"); return 0; } 
  arg1 = *argp1;  result = (Function *)SVFUtil::getProgEntryFunction(arg1); *(Function **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_ArgInProgEntryFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Value *arg1 = (Value *) 0 ; bool result; (void)jenv; (void)jcls; arg1 = *(Value **)&jarg1; 
  result = (bool)SVFUtil::ArgInProgEntryFunction((llvm::Value const *)arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isPtrInDeadFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Value *arg1 = (Value *) 0 ; bool result; (void)jenv; (void)jcls; arg1 = *(Value **)&jarg1; 
  result = (bool)SVFUtil::isPtrInDeadFunction((llvm::Value const *)arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isProgExitFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Function *arg1 = (Function *) 0 ; bool result; (void)jenv; (void)jcls; arg1 = *(Function **)&jarg1; 
  result = (bool)SVFUtil::isProgExitFunction((llvm::Function const *)arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isProgExitCall_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; CallSite arg1 ; CallSite const *argp1 ; bool result; (void)jenv; (void)jcls;
  argp1 = *(CallSite **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite const"); return 0; } 
  arg1 = *argp1;  result = (bool)SVFUtil::isProgExitCall(arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isProgExitCall_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Instruction *arg1 = (Instruction *) 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(Instruction **)&jarg1;  result = (bool)SVFUtil::isProgExitCall((llvm::Instruction const *)arg1);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isNoCallerFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Function *arg1 = (Function *) 0 ; bool result; (void)jenv; (void)jcls; arg1 = *(Function **)&jarg1; 
  result = (bool)SVFUtil::isNoCallerFunction((llvm::Function const *)arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_ArgInNoCallerFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Value *arg1 = (Value *) 0 ; bool result; (void)jenv; (void)jcls; arg1 = *(Value **)&jarg1; 
  result = (bool)SVFUtil::ArgInNoCallerFunction((llvm::Value const *)arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_functionDoesNotRet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ; Function *arg1 = (Function *) 0 ; bool result; (void)jenv; (void)jcls; arg1 = *(Function **)&jarg1; 
  result = (bool)SVFUtil::functionDoesNotRet((llvm::Function const *)arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_getFunReachableBBs(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  Function *arg1 = (Function *) 0 ; DominatorTree *arg2 = (DominatorTree *) 0 ; std::vector< BasicBlock const * > *arg3 = 0 ;
  (void)jenv; (void)jcls; (void)jarg3_; arg1 = *(Function **)&jarg1;  arg2 = *(DominatorTree **)&jarg2; 
  arg3 = *(std::vector< BasicBlock const * > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< BasicBlock const * > & reference is null");
    return ; }   SVFUtil::getFunReachableBBs((llvm::Function const *)arg1,arg2,*arg3); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_getFunExitBB(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; Function *arg1 = (Function *) 0 ; BasicBlock *result = 0 ; (void)jenv; (void)jcls;
  arg1 = *(Function **)&jarg1;  result = (BasicBlock *)SVFUtil::getFunExitBB((llvm::Function const *)arg1);
  *(BasicBlock **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_stripConstantCasts(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; Value *arg1 = (Value *) 0 ; Value *result = 0 ; (void)jenv; (void)jcls; arg1 = *(Value **)&jarg1; 
  result = (Value *)SVFUtil::stripConstantCasts((llvm::Value const *)arg1); *(Value **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_stripAllCasts(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; Value *arg1 = (Value *) 0 ; Value *result = 0 ; (void)jenv; (void)jcls; arg1 = *(Value **)&jarg1; 
  result = (Value *)SVFUtil::stripAllCasts(arg1); *(Value **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_getTypeOfHeapAlloc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; llvm::Instruction *arg1 = (llvm::Instruction *) 0 ; Type *result = 0 ; (void)jenv; (void)jcls;
  arg1 = *(llvm::Instruction **)&jarg1;  result = (Type *)SVFUtil::getTypeOfHeapAlloc((llvm::Instruction const *)arg1);
  *(Type **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_isGepConstantExpr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; Value *arg1 = (Value *) 0 ; ConstantExpr *result = 0 ; (void)jenv; (void)jcls; arg1 = *(Value **)&jarg1; 
  result = (ConstantExpr *)SVFUtil::isGepConstantExpr((llvm::Value const *)arg1); *(ConstantExpr **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_isInt2PtrConstantExpr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; Value *arg1 = (Value *) 0 ; ConstantExpr *result = 0 ; (void)jenv; (void)jcls; arg1 = *(Value **)&jarg1; 
  result = (ConstantExpr *)SVFUtil::isInt2PtrConstantExpr((llvm::Value const *)arg1); *(ConstantExpr **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_isPtr2IntConstantExpr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; Value *arg1 = (Value *) 0 ; ConstantExpr *result = 0 ; (void)jenv; (void)jcls; arg1 = *(Value **)&jarg1; 
  result = (ConstantExpr *)SVFUtil::isPtr2IntConstantExpr((llvm::Value const *)arg1); *(ConstantExpr **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_isCastConstantExpr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; Value *arg1 = (Value *) 0 ; ConstantExpr *result = 0 ; (void)jenv; (void)jcls; arg1 = *(Value **)&jarg1; 
  result = (ConstantExpr *)SVFUtil::isCastConstantExpr((llvm::Value const *)arg1); *(ConstantExpr **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_isSelectConstantExpr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; Value *arg1 = (Value *) 0 ; ConstantExpr *result = 0 ; (void)jenv; (void)jcls; arg1 = *(Value **)&jarg1; 
  result = (ConstantExpr *)SVFUtil::isSelectConstantExpr((llvm::Value const *)arg1); *(ConstantExpr **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_isTruncConstantExpr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; Value *arg1 = (Value *) 0 ; ConstantExpr *result = 0 ; (void)jenv; (void)jcls; arg1 = *(Value **)&jarg1; 
  result = (ConstantExpr *)SVFUtil::isTruncConstantExpr((llvm::Value const *)arg1); *(ConstantExpr **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_isCmpConstantExpr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; Value *arg1 = (Value *) 0 ; ConstantExpr *result = 0 ; (void)jenv; (void)jcls; arg1 = *(Value **)&jarg1; 
  result = (ConstantExpr *)SVFUtil::isCmpConstantExpr((llvm::Value const *)arg1); *(ConstantExpr **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_getNextInsts(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  Instruction *arg1 = (Instruction *) 0 ; std::vector< Instruction const * > *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg2_;
  arg1 = *(Instruction **)&jarg1;  arg2 = *(std::vector< Instruction const * > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Instruction const * > & reference is null");
    return ; }   SVFUtil::getNextInsts((llvm::Instruction const *)arg1,*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_getPrevInsts(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  Instruction *arg1 = (Instruction *) 0 ; std::vector< Instruction const * > *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg2_;
  arg1 = *(Instruction **)&jarg1;  arg2 = *(std::vector< Instruction const * > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Instruction const * > & reference is null");
    return ; }   SVFUtil::getPrevInsts((llvm::Instruction const *)arg1,*arg2); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_getBBSuccessorPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ; BasicBlock *arg1 = (BasicBlock *) 0 ; BasicBlock *arg2 = (BasicBlock *) 0 ; u32_t result; (void)jenv;
  (void)jcls; arg1 = *(BasicBlock **)&jarg1;  arg2 = *(BasicBlock **)&jarg2; 
  result = (u32_t)SVFUtil::getBBSuccessorPos((llvm::BasicBlock const *)arg1,(llvm::BasicBlock const *)arg2);
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_getBBSuccessorNum(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; BasicBlock *arg1 = (BasicBlock *) 0 ; u32_t result; (void)jenv; (void)jcls;
  arg1 = *(BasicBlock **)&jarg1;  result = (u32_t)SVFUtil::getBBSuccessorNum((llvm::BasicBlock const *)arg1);
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_getBBPredecessorPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ; BasicBlock *arg1 = (BasicBlock *) 0 ; BasicBlock *arg2 = (BasicBlock *) 0 ; u32_t result; (void)jenv;
  (void)jcls; arg1 = *(BasicBlock **)&jarg1;  arg2 = *(BasicBlock **)&jarg2; 
  result = (u32_t)SVFUtil::getBBPredecessorPos((llvm::BasicBlock const *)arg1,(llvm::BasicBlock const *)arg2);
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_getBBPredecessorNum(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; BasicBlock *arg1 = (BasicBlock *) 0 ; u32_t result; (void)jenv; (void)jcls;
  arg1 = *(BasicBlock **)&jarg1;  result = (u32_t)SVFUtil::getBBPredecessorNum((llvm::BasicBlock const *)arg1);
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_getSourceLoc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ; Value *arg1 = (Value *) 0 ; std::string result; (void)jenv; (void)jcls; arg1 = *(Value **)&jarg1; 
  result = SVFUtil::getSourceLoc((llvm::Value const *)arg1); jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_getSourceLocOfFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ; Function *arg1 = (Function *) 0 ; std::string result; (void)jenv; (void)jcls;
  arg1 = *(Function **)&jarg1;  result = SVFUtil::getSourceLocOfFunction((llvm::Function const *)arg1);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_dumpSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  NodeBS arg1 ; raw_ostream *arg2 = 0 ; NodeBS *argp1 ; (void)jenv; (void)jcls; argp1 = *(NodeBS **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null NodeBS"); return ; } 
  arg1 = *argp1;  arg2 = *(raw_ostream **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "raw_ostream & reference is null"); return ; }  
  SVFUtil::dumpSet(arg1,*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_dumpSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NodeBS arg1 ; NodeBS *argp1 ; (void)jenv; (void)jcls; argp1 = *(NodeBS **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null NodeBS"); return ; } 
  arg1 = *argp1;  SVFUtil::dumpSet(arg1); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_dumpPointsToSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  unsigned int arg1 ; NodeBS arg2 ; NodeBS *argp2 ; (void)jenv; (void)jcls; arg1 = (unsigned int)jarg1; 
  argp2 = *(NodeBS **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null NodeBS"); return ; } 
  arg2 = *argp2;  SVFUtil::dumpPointsToSet(arg1,arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_dumpAliasSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  unsigned int arg1 ; NodeBS arg2 ; NodeBS *argp2 ; (void)jenv; (void)jcls; arg1 = (unsigned int)jarg1; 
  argp2 = *(NodeBS **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null NodeBS"); return ; } 
  arg2 = *argp2;  SVFUtil::dumpAliasSet(arg1,arg2); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_sucMsg(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ; std::string arg1 ; std::string result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr); jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  result = SVFUtil::sucMsg(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_wrnMsg(JNIEnv *jenv, jclass jcls, jstring jarg1) { std::string arg1 ;
  (void)jenv; (void)jcls; if(!jarg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; }  
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return ; (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  SVFUtil::wrnMsg(arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_errMsg(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ; std::string arg1 ; std::string result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr); jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  result = SVFUtil::errMsg(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_bugMsg1(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ; std::string arg1 ; std::string result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr); jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  result = SVFUtil::bugMsg1(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_bugMsg2(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ; std::string arg1 ; std::string result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr); jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  result = SVFUtil::bugMsg2(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_bugMsg3(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ; std::string arg1 ; std::string result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr); jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  result = SVFUtil::bugMsg3(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_pasMsg(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ; std::string arg1 ; std::string result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; }  
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr); jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  result = SVFUtil::pasMsg(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_reportMemoryUsageKB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  std::string *arg1 = 0 ; raw_ostream *arg2 = 0 ; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(raw_ostream **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "raw_ostream & reference is null"); return ; }  
  SVFUtil::reportMemoryUsageKB((std::string const &)*arg1,*arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_reportMemoryUsageKB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  SVFUtil::reportMemoryUsageKB((std::string const &)*arg1); }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_getMemoryUsageKB(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ; u32_t *arg1 = (u32_t *) 0 ; u32_t *arg2 = (u32_t *) 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(u32_t **)&jarg1;  arg2 = *(u32_t **)&jarg2;  result = (bool)SVFUtil::getMemoryUsageKB(arg1,arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_increaseStackSize(JNIEnv *jenv, jclass jcls) { (void)jenv; (void)jcls;
  SVFUtil::increaseStackSize(); }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_isIRFile(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ; std::string *arg1 = 0 ; bool result; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr); arg1 = &arg1_str; jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)SVFUtil::isIRFile((std::string const &)*arg1); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_processArguments(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  int arg1 ; char **arg2 = (char **) 0 ; int *arg3 = 0 ; char **arg4 = (char **) 0 ; std::vector< std::string > *arg5 = 0 ;
  (void)jenv; (void)jcls; (void)jarg5_; arg1 = (int)jarg1;  arg2 = *(char ***)&jarg2;  arg3 = *(int **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null"); return ; }  
  arg4 = *(char ***)&jarg4;  arg5 = *(std::vector< std::string > **)&jarg5; if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null"); return ; }  
  SVFUtil::processArguments(arg1,arg2,*arg3,arg4,*arg5); }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_cmpPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ; PointsTo *arg1 = 0 ; PointsTo *arg2 = 0 ; bool result; (void)jenv; (void)jcls;
  arg1 = *(PointsTo **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PointsTo const & reference is null"); return 0; }  
  arg2 = *(PointsTo **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PointsTo const & reference is null"); return 0; }  
  result = (bool)SVFUtil::cmpPts((llvm::SparseBitVector< > const &)*arg1,(llvm::SparseBitVector< > const &)*arg2);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1LLVMModuleSetMNV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< std::string > *arg1 = 0 ; LLVMModuleSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0; }   result = (LLVMModuleSet *)new LLVMModuleSet((std::vector< std::string > const &)*arg1);
  *(LLVMModuleSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1LLVMModuleSetMOD(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; Module *arg1 = (Module *) 0 ; LLVMModuleSet *result = 0 ; (void)jenv; (void)jcls;
  arg1 = *(Module **)&jarg1;  result = (LLVMModuleSet *)new LLVMModuleSet(arg1); *(LLVMModuleSet **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1LLVMModuleSetAMOD(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; Module *arg1 = 0 ; LLVMModuleSet *result = 0 ; (void)jenv; (void)jcls; arg1 = *(Module **)&jarg1;
  if (!arg1) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Module & reference is null"); return 0; }  
  result = (LLVMModuleSet *)new LLVMModuleSet(*arg1); *(LLVMModuleSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1LLVMModuleSet(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  LLVMModuleSet *result = 0 ; (void)jenv; (void)jcls; result = (LLVMModuleSet *)new LLVMModuleSet();
  *(LLVMModuleSet **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_LLVMModuleSet_1build(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LLVMModuleSet *arg1 = (LLVMModuleSet *) 0 ; std::vector< std::string > *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(LLVMModuleSet **)&jarg1;  arg2 = *(std::vector< std::string > **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ; }   (arg1)->build((std::vector< std::string > const &)*arg2); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_LLVMModuleSet_1getModuleNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; LLVMModuleSet *arg1 = (LLVMModuleSet *) 0 ; u32_t result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(LLVMModuleSet **)&jarg1;  result = (u32_t)((LLVMModuleSet const *)arg1)->getModuleNum(); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_LLVMModuleSet_1getModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; LLVMModuleSet *arg1 = (LLVMModuleSet *) 0 ; u32_t arg2 ; Module *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(LLVMModuleSet **)&jarg1;  arg2 = (u32_t)jarg2; 
  result = (Module *)((LLVMModuleSet const *)arg1)->getModule(arg2); *(Module **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_LLVMModuleSet_1getModuleRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; LLVMModuleSet *arg1 = (LLVMModuleSet *) 0 ; u32_t arg2 ; Module *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(LLVMModuleSet **)&jarg1;  arg2 = (u32_t)jarg2; 
  result = (Module *) &((LLVMModuleSet const *)arg1)->getModuleRef(arg2); *(Module **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_LLVMModuleSet_1dumpModulesToFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  LLVMModuleSet *arg1 = (LLVMModuleSet *) 0 ; std::string arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(LLVMModuleSet **)&jarg1;  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ; }   const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr); jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  (arg1)->dumpModulesToFile(arg2); }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_LLVMModuleSet_1hasDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; LLVMModuleSet *arg1 = (LLVMModuleSet *) 0 ; Function *arg2 = (Function *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(LLVMModuleSet **)&jarg1;  arg2 = *(Function **)&jarg2; 
  result = (bool)((LLVMModuleSet const *)arg1)->hasDefinition((Function const *)arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_LLVMModuleSet_1getDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; LLVMModuleSet *arg1 = (LLVMModuleSet *) 0 ; Function *arg2 = (Function *) 0 ; Function *result = 0 ;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(LLVMModuleSet **)&jarg1;  arg2 = *(Function **)&jarg2; 
  result = (Function *)((LLVMModuleSet const *)arg1)->getDefinition((Function const *)arg2); *(Function **)&jresult = result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_LLVMModuleSet_1hasDeclaration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; LLVMModuleSet *arg1 = (LLVMModuleSet *) 0 ; Function *arg2 = (Function *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(LLVMModuleSet **)&jarg1;  arg2 = *(Function **)&jarg2; 
  result = (bool)((LLVMModuleSet const *)arg1)->hasDeclaration((Function const *)arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_LLVMModuleSet_1getDeclaration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; LLVMModuleSet *arg1 = (LLVMModuleSet *) 0 ; Function *arg2 = (Function *) 0 ;
  LLVMModuleSet::FunctionSetType *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(LLVMModuleSet **)&jarg1; 
  arg2 = *(Function **)&jarg2; 
  result = (LLVMModuleSet::FunctionSetType *) &((LLVMModuleSet const *)arg1)->getDeclaration((Function const *)arg2);
  *(LLVMModuleSet::FunctionSetType **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_LLVMModuleSet_1hasGlobalRep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; LLVMModuleSet *arg1 = (LLVMModuleSet *) 0 ; GlobalVariable *arg2 = (GlobalVariable *) 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(LLVMModuleSet **)&jarg1;  arg2 = *(GlobalVariable **)&jarg2; 
  result = (bool)((LLVMModuleSet const *)arg1)->hasGlobalRep((GlobalVariable const *)arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_LLVMModuleSet_1getGlobalRep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; LLVMModuleSet *arg1 = (LLVMModuleSet *) 0 ; GlobalVariable *arg2 = (GlobalVariable *) 0 ;
  GlobalVariable *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(LLVMModuleSet **)&jarg1; 
  arg2 = *(GlobalVariable **)&jarg2; 
  result = (GlobalVariable *)((LLVMModuleSet const *)arg1)->getGlobalRep((GlobalVariable const *)arg2);
  *(GlobalVariable **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_LLVMModuleSet_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; LLVMModuleSet *arg1 = (LLVMModuleSet *) 0 ;
  SwigValueWrapper< std::vector< llvm::Function * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(LLVMModuleSet **)&jarg1;  result = (arg1)->begin();
  *(LLVMModuleSet::iterator **)&jresult = new LLVMModuleSet::iterator((const LLVMModuleSet::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_LLVMModuleSet_1begin_1const(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; LLVMModuleSet *arg1 = (LLVMModuleSet *) 0 ;
  SwigValueWrapper< std::vector< llvm::Function * >::const_iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(LLVMModuleSet **)&jarg1;  result = ((LLVMModuleSet const *)arg1)->begin();
  *(LLVMModuleSet::const_iterator **)&jresult = new LLVMModuleSet::const_iterator((const LLVMModuleSet::const_iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_LLVMModuleSet_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; LLVMModuleSet *arg1 = (LLVMModuleSet *) 0 ;
  SwigValueWrapper< std::vector< llvm::Function * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(LLVMModuleSet **)&jarg1;  result = (arg1)->end();
  *(LLVMModuleSet::iterator **)&jresult = new LLVMModuleSet::iterator((const LLVMModuleSet::iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_LLVMModuleSet_1end_1const(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; LLVMModuleSet *arg1 = (LLVMModuleSet *) 0 ;
  SwigValueWrapper< std::vector< llvm::Function * >::const_iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(LLVMModuleSet **)&jarg1;  result = ((LLVMModuleSet const *)arg1)->end();
  *(LLVMModuleSet::const_iterator **)&jresult = new LLVMModuleSet::const_iterator((const LLVMModuleSet::const_iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_LLVMModuleSet_1global_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; LLVMModuleSet *arg1 = (LLVMModuleSet *) 0 ;
  SwigValueWrapper< std::vector< llvm::GlobalVariable * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(LLVMModuleSet **)&jarg1;  result = (arg1)->global_begin();
  *(LLVMModuleSet::global_iterator **)&jresult = new LLVMModuleSet::global_iterator((const LLVMModuleSet::global_iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_LLVMModuleSet_1global_1begin_1const(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; LLVMModuleSet *arg1 = (LLVMModuleSet *) 0 ;
  SwigValueWrapper< std::vector< llvm::GlobalVariable * >::const_iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(LLVMModuleSet **)&jarg1;  result = ((LLVMModuleSet const *)arg1)->global_begin();
  *(LLVMModuleSet::const_global_iterator **)&jresult = new LLVMModuleSet::const_global_iterator((const LLVMModuleSet::const_global_iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_LLVMModuleSet_1global_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; LLVMModuleSet *arg1 = (LLVMModuleSet *) 0 ;
  SwigValueWrapper< std::vector< llvm::GlobalVariable * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(LLVMModuleSet **)&jarg1;  result = (arg1)->global_end();
  *(LLVMModuleSet::global_iterator **)&jresult = new LLVMModuleSet::global_iterator((const LLVMModuleSet::global_iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_LLVMModuleSet_1global_1end_1const(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; LLVMModuleSet *arg1 = (LLVMModuleSet *) 0 ;
  SwigValueWrapper< std::vector< llvm::GlobalVariable * >::const_iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(LLVMModuleSet **)&jarg1;  result = ((LLVMModuleSet const *)arg1)->global_end();
  *(LLVMModuleSet::const_global_iterator **)&jresult = new LLVMModuleSet::const_global_iterator((const LLVMModuleSet::const_global_iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_LLVMModuleSet_1alias_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; LLVMModuleSet *arg1 = (LLVMModuleSet *) 0 ;
  SwigValueWrapper< std::vector< llvm::GlobalAlias * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(LLVMModuleSet **)&jarg1;  result = (arg1)->alias_begin();
  *(LLVMModuleSet::alias_iterator **)&jresult = new LLVMModuleSet::alias_iterator((const LLVMModuleSet::alias_iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_LLVMModuleSet_1alias_1begin_1const(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; LLVMModuleSet *arg1 = (LLVMModuleSet *) 0 ;
  SwigValueWrapper< std::vector< llvm::GlobalAlias * >::const_iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(LLVMModuleSet **)&jarg1;  result = ((LLVMModuleSet const *)arg1)->alias_begin();
  *(LLVMModuleSet::const_alias_iterator **)&jresult = new LLVMModuleSet::const_alias_iterator((const LLVMModuleSet::const_alias_iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_LLVMModuleSet_1alias_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; LLVMModuleSet *arg1 = (LLVMModuleSet *) 0 ;
  SwigValueWrapper< std::vector< llvm::GlobalAlias * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(LLVMModuleSet **)&jarg1;  result = (arg1)->alias_end();
  *(LLVMModuleSet::alias_iterator **)&jresult = new LLVMModuleSet::alias_iterator((const LLVMModuleSet::alias_iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_LLVMModuleSet_1alias_1end_1const(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; LLVMModuleSet *arg1 = (LLVMModuleSet *) 0 ;
  SwigValueWrapper< std::vector< llvm::GlobalAlias * >::const_iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(LLVMModuleSet **)&jarg1;  result = ((LLVMModuleSet const *)arg1)->alias_end();
  *(LLVMModuleSet::const_alias_iterator **)&jresult = new LLVMModuleSet::const_alias_iterator((const LLVMModuleSet::const_alias_iterator &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1LLVMModuleSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LLVMModuleSet *arg1 = (LLVMModuleSet *) 0 ; (void)jenv; (void)jcls; arg1 = *(LLVMModuleSet **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1SVFModuleMNV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; std::vector< std::string > *arg1 = 0 ; SVFModule *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0; }   result = (SVFModule *)new SVFModule((std::vector< std::string > const &)*arg1);
  *(SVFModule **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1SVFModulePointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; Module *arg1 = (Module *) 0 ; SVFModule *result = 0 ; (void)jenv; (void)jcls; arg1 = *(Module **)&jarg1; 
  result = (SVFModule *)new SVFModule(arg1); *(SVFModule **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1SVFModuleAddr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; Module *arg1 = 0 ; SVFModule *result = 0 ; (void)jenv; (void)jcls; arg1 = *(Module **)&jarg1; if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Module & reference is null"); return 0; }  
  result = (SVFModule *)new SVFModule(*arg1); *(SVFModule **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1SVFModule(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  SVFModule *result = 0 ; (void)jenv; (void)jcls; result = (SVFModule *)new SVFModule(); *(SVFModule **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1getLLVMModuleSet(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ; LLVMModuleSet *result = 0 ; (void)jenv; (void)jcls;
  result = (LLVMModuleSet *)SVFModule::getLLVMModuleSet(); *(LLVMModuleSet **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1setPagFromTXT(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string arg1 ; (void)jenv; (void)jcls; if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; }  
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);  if (!arg1_pstr) return ; (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);  SVFModule::setPagFromTXT(arg1); }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1pagFileName(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ; std::string result; (void)jenv; (void)jcls; result = SVFModule::pagFileName();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1pagReadFromTXT(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ; bool result; (void)jenv; (void)jcls; result = (bool)SVFModule::pagReadFromTXT();
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1releaseLLVMModuleSet(JNIEnv *jenv, jclass jcls) { (void)jenv;
  (void)jcls; SVFModule::releaseLLVMModuleSet(); }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SVFModule **)&jarg1;  result = (bool)((SVFModule const *)arg1)->empty(); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1getModuleNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ; u32_t result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SVFModule **)&jarg1;  result = (u32_t)((SVFModule const *)arg1)->getModuleNum(); jresult = (jlong)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1getModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ; u32_t arg2 ; Module *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SVFModule **)&jarg1;  arg2 = (u32_t)jarg2; 
  result = (Module *)((SVFModule const *)arg1)->getModule(arg2); *(Module **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1getModuleRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ; u32_t arg2 ; Module *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(SVFModule **)&jarg1;  arg2 = (u32_t)jarg2; 
  result = (Module *) &((SVFModule const *)arg1)->getModuleRef(arg2); *(Module **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1dumpModulesToFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  SVFModule *arg1 = (SVFModule *) 0 ; std::string arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SVFModule **)&jarg1; 
  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return ; }  
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ; (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);  ((SVFModule const *)arg1)->dumpModulesToFile(arg2); }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1hasDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ; Function *arg2 = (Function *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(SVFModule **)&jarg1;  arg2 = *(Function **)&jarg2; 
  result = (bool)((SVFModule const *)arg1)->hasDefinition((Function const *)arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1getDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ; Function *arg2 = (Function *) 0 ; Function *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(SVFModule **)&jarg1;  arg2 = *(Function **)&jarg2; 
  result = (Function *)((SVFModule const *)arg1)->getDefinition((Function const *)arg2); *(Function **)&jresult = result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1hasDeclaration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ; Function *arg2 = (Function *) 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(SVFModule **)&jarg1;  arg2 = *(Function **)&jarg2; 
  result = (bool)((SVFModule const *)arg1)->hasDeclaration((Function const *)arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1getDeclaration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ; Function *arg2 = (Function *) 0 ;
  SVFModule::FunctionSetType *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SVFModule **)&jarg1; 
  arg2 = *(Function **)&jarg2; 
  result = (SVFModule::FunctionSetType *) &((SVFModule const *)arg1)->getDeclaration((Function const *)arg2);
  *(SVFModule::FunctionSetType **)&jresult = result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1hasGlobalRep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ; GlobalVariable *arg2 = (GlobalVariable *) 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SVFModule **)&jarg1;  arg2 = *(GlobalVariable **)&jarg2; 
  result = (bool)((SVFModule const *)arg1)->hasGlobalRep((GlobalVariable const *)arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1getGlobalRep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ; GlobalVariable *arg2 = (GlobalVariable *) 0 ;
  GlobalVariable *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SVFModule **)&jarg1; 
  arg2 = *(GlobalVariable **)&jarg2; 
  result = (GlobalVariable *)((SVFModule const *)arg1)->getGlobalRep((GlobalVariable const *)arg2);
  *(GlobalVariable **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ; SwigValueWrapper< std::vector< llvm::Function * >::iterator > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SVFModule **)&jarg1;  result = (arg1)->begin();
  *(SVFModule::iterator **)&jresult = new SVFModule::iterator((const SVFModule::iterator &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1begin_1const(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ;
  SwigValueWrapper< std::vector< llvm::Function * >::const_iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SVFModule **)&jarg1;  result = ((SVFModule const *)arg1)->begin();
  *(SVFModule::const_iterator **)&jresult = new SVFModule::const_iterator((const SVFModule::const_iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ; SwigValueWrapper< std::vector< llvm::Function * >::iterator > result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(SVFModule **)&jarg1;  result = (arg1)->end();
  *(SVFModule::iterator **)&jresult = new SVFModule::iterator((const SVFModule::iterator &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1end_1const(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ;
  SwigValueWrapper< std::vector< llvm::Function * >::const_iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SVFModule **)&jarg1;  result = ((SVFModule const *)arg1)->end();
  *(SVFModule::const_iterator **)&jresult = new SVFModule::const_iterator((const SVFModule::const_iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1getMainLLVMModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ; Module *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SVFModule **)&jarg1;  result = (Module *)((SVFModule const *)arg1)->getMainLLVMModule();
  *(Module **)&jresult = result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1getModuleIdentifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ; std::string *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SVFModule **)&jarg1;  result = (std::string *) &((SVFModule const *)arg1)->getModuleIdentifier();
  jresult = jenv->NewStringUTF(result->c_str());  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1getContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ; LLVMContext *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SVFModule **)&jarg1;  result = (LLVMContext *) &((SVFModule const *)arg1)->getContext();
  *(LLVMContext **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1getFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ; StringRef arg2 ; StringRef *argp2 ; Function *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(SVFModule **)&jarg1;  argp2 = *(StringRef **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null StringRef"); return 0; } 
  arg2 = *argp2;  result = (Function *)((SVFModule const *)arg1)->getFunction(arg2); *(Function **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1global_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ;
  SwigValueWrapper< std::vector< llvm::GlobalVariable * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SVFModule **)&jarg1;  result = (arg1)->global_begin();
  *(SVFModule::global_iterator **)&jresult = new SVFModule::global_iterator((const SVFModule::global_iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1global_1begin_1const(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ;
  SwigValueWrapper< std::vector< llvm::GlobalVariable * >::const_iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SVFModule **)&jarg1;  result = ((SVFModule const *)arg1)->global_begin();
  *(SVFModule::const_global_iterator **)&jresult = new SVFModule::const_global_iterator((const SVFModule::const_global_iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1global_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ;
  SwigValueWrapper< std::vector< llvm::GlobalVariable * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SVFModule **)&jarg1;  result = (arg1)->global_end();
  *(SVFModule::global_iterator **)&jresult = new SVFModule::global_iterator((const SVFModule::global_iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1global_1end_1const(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ;
  SwigValueWrapper< std::vector< llvm::GlobalVariable * >::const_iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SVFModule **)&jarg1;  result = ((SVFModule const *)arg1)->global_end();
  *(SVFModule::const_global_iterator **)&jresult = new SVFModule::const_global_iterator((const SVFModule::const_global_iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1alias_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ;
  SwigValueWrapper< std::vector< llvm::GlobalAlias * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SVFModule **)&jarg1;  result = (arg1)->alias_begin();
  *(SVFModule::alias_iterator **)&jresult = new SVFModule::alias_iterator((const SVFModule::alias_iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1alias_1begin_1const(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ;
  SwigValueWrapper< std::vector< llvm::GlobalAlias * >::const_iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SVFModule **)&jarg1;  result = ((SVFModule const *)arg1)->alias_begin();
  *(SVFModule::const_alias_iterator **)&jresult = new SVFModule::const_alias_iterator((const SVFModule::const_alias_iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1alias_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ;
  SwigValueWrapper< std::vector< llvm::GlobalAlias * >::iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SVFModule **)&jarg1;  result = (arg1)->alias_end();
  *(SVFModule::alias_iterator **)&jresult = new SVFModule::alias_iterator((const SVFModule::alias_iterator &)result); 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_SVFModule_1alias_1end_1const(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SVFModule *arg1 = (SVFModule *) 0 ;
  SwigValueWrapper< std::vector< llvm::GlobalAlias * >::const_iterator > result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(SVFModule **)&jarg1;  result = ((SVFModule const *)arg1)->alias_end();
  *(SVFModule::const_alias_iterator **)&jresult = new SVFModule::const_alias_iterator((const SVFModule::const_alias_iterator &)result); 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1SVFModule(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SVFModule *arg1 = (SVFModule *) 0 ; (void)jenv; (void)jcls; arg1 = *(SVFModule **)&jarg1;  delete arg1; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1getNumOfResolvedIndCallEdge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; Size_t result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(PointerAnalysis **)&jarg1;  result = (Size_t)((PointerAnalysis const *)arg1)->getNumOfResolvedIndCallEdge();
  jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1getPTACallGraph(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; PTACallGraph *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1; 
  result = (PTACallGraph *)((PointerAnalysis const *)arg1)->getPTACallGraph(); *(PTACallGraph **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1getCallGraphSCC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; PointerAnalysis::CallGraphSCC *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1; 
  result = (PointerAnalysis::CallGraphSCC *)((PointerAnalysis const *)arg1)->getCallGraphSCC();
  *(PointerAnalysis::CallGraphSCC **)&jresult = result;  return jresult; }
SWIGEXPORT jint JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1getAnalysisTy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; PointerAnalysis::PTATY result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1; 
  result = (PointerAnalysis::PTATY)((PointerAnalysis const *)arg1)->getAnalysisTy(); jresult = (jint)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1getPAG(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; PAG *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(PointerAnalysis **)&jarg1;  result = (PAG *)((PointerAnalysis const *)arg1)->getPAG(); *(PAG **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1setPAG(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PAG *arg1 = (PAG *) 0 ; (void)jenv; (void)jcls; arg1 = *(PAG **)&jarg1;  PointerAnalysis::setPAG(arg1); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1getStat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; PTAStat *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  result = (PTAStat *)((PointerAnalysis const *)arg1)->getStat();
  *(PTAStat **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1getModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; SVFModule result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(PointerAnalysis **)&jarg1;  result = ((PointerAnalysis const *)arg1)->getModule();
  *(SVFModule **)&jresult = new SVFModule((const SVFModule &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1getAllValidPtrs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; NodeSet *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  result = (NodeSet *) &(arg1)->getAllValidPtrs();
  *(NodeSet **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1PointerAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; (void)jenv; (void)jcls; arg1 = *(PointerAnalysis **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; SVFModule arg2 ; SVFModule *argp2 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(PointerAnalysis **)&jarg1;  argp2 = *(SVFModule **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SVFModule"); return ; } 
  arg2 = *argp2;  (arg1)->initialize(arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1finalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1; 
  (arg1)->finalize(); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1analyze(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; SVFModule arg2 ; SVFModule *argp2 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(PointerAnalysis **)&jarg1;  argp2 = *(SVFModule **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SVFModule"); return ; } 
  arg2 = *argp2;  (arg1)->analyze(arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1computeDDAPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; NodeID arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(PointerAnalysis **)&jarg1;  arg2 = (NodeID)jarg2;  (arg1)->computeDDAPts(arg2); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1alias_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; MemoryLocation *arg2 = 0 ; MemoryLocation *arg3 = 0 ;
  AliasResult result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1; 
  arg2 = *(MemoryLocation **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MemoryLocation const & reference is null"); return 0; }  
  arg3 = *(MemoryLocation **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MemoryLocation const & reference is null"); return 0; }  
  result = (arg1)->alias((MemoryLocation const &)*arg2,(MemoryLocation const &)*arg3);
  *(AliasResult **)&jresult = new AliasResult((const AliasResult &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1alias_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; Value *arg2 = (Value *) 0 ; Value *arg3 = (Value *) 0 ;
  AliasResult result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  arg2 = *(Value **)&jarg2; 
  arg3 = *(Value **)&jarg3;  result = (arg1)->alias((Value const *)arg2,(Value const *)arg3);
  *(AliasResult **)&jresult = new AliasResult((const AliasResult &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1alias_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; NodeID arg2 ; NodeID arg3 ; AliasResult result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  arg2 = (NodeID)jarg2;  arg3 = (NodeID)jarg3; 
  result = (arg1)->alias(arg2,arg3); *(AliasResult **)&jresult = new AliasResult((const AliasResult &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1dumpStat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1; 
  (arg1)->dumpStat(); }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1containBlackHoleNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; PointsTo *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  arg2 = *(PointsTo **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PointsTo & reference is null"); return 0; }  
  result = (bool)(arg1)->containBlackHoleNode(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1containConstantNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; PointsTo *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  arg2 = *(PointsTo **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PointsTo & reference is null"); return 0; }  
  result = (bool)(arg1)->containConstantNode(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1isBlkObjOrConstantObj(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; NodeID arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  arg2 = (NodeID)jarg2; 
  result = (bool)((PointerAnalysis const *)arg1)->isBlkObjOrConstantObj(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1isNonPointerObj(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; NodeID arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  arg2 = (NodeID)jarg2; 
  result = (bool)((PointerAnalysis const *)arg1)->isNonPointerObj(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1isHeapMemObj(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; NodeID arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  arg2 = (NodeID)jarg2; 
  result = (bool)((PointerAnalysis const *)arg1)->isHeapMemObj(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1isArrayMemObj(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; NodeID arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  arg2 = (NodeID)jarg2; 
  result = (bool)((PointerAnalysis const *)arg1)->isArrayMemObj(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1isFIObjNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; NodeID arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  arg2 = (NodeID)jarg2; 
  result = (bool)((PointerAnalysis const *)arg1)->isFIObjNode(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1getBaseObjNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; NodeID arg2 ; NodeID result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  arg2 = (NodeID)jarg2;  result = (NodeID)(arg1)->getBaseObjNode(arg2);
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1getFIObjNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; NodeID arg2 ; NodeID result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  arg2 = (NodeID)jarg2;  result = (NodeID)(arg1)->getFIObjNode(arg2);
  jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1getGepObjNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; NodeID arg2 ; LocationSet *arg3 = 0 ; NodeID result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  arg2 = (NodeID)jarg2; 
  arg3 = *(LocationSet **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LocationSet const & reference is null"); return 0; }  
  result = (NodeID)(arg1)->getGepObjNode(arg2,(LocationSet const &)*arg3); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1getAllFieldsObjNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; NodeID arg2 ; NodeBS *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  arg2 = (NodeID)jarg2; 
  result = (NodeBS *) &(arg1)->getAllFieldsObjNode(arg2); *(NodeBS **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1setObjFieldInsensitive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; NodeID arg2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(PointerAnalysis **)&jarg1;  arg2 = (NodeID)jarg2;  (arg1)->setObjFieldInsensitive(arg2); }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1isFieldInsensitive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; NodeID arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  arg2 = (NodeID)jarg2; 
  result = (bool)((PointerAnalysis const *)arg1)->isFieldInsensitive(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1printStat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(PointerAnalysis **)&jarg1;  result = (bool)(arg1)->printStat(); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1disablePrintStat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1; 
  (arg1)->disablePrintStat(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1getIndCallMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; PointerAnalysis::CallEdgeMap *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1; 
  result = (PointerAnalysis::CallEdgeMap *) &(arg1)->getIndCallMap(); *(PointerAnalysis::CallEdgeMap **)&jresult = result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1hasIndCSCallees(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; CallSite arg2 ; CallSite *argp2 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  argp2 = *(CallSite **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite"); return 0; } 
  arg2 = *argp2;  result = (bool)((PointerAnalysis const *)arg1)->hasIndCSCallees(arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1getIndCSCallees_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; CallSite arg2 ; CallSite *argp2 ;
  PointerAnalysis::FunctionSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1; 
  argp2 = *(CallSite **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite"); return 0; } 
  arg2 = *argp2;  result = (PointerAnalysis::FunctionSet *) &((PointerAnalysis const *)arg1)->getIndCSCallees(arg2);
  *(PointerAnalysis::FunctionSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1getIndCSCallees_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; CallInst *arg2 = (CallInst *) 0 ;
  PointerAnalysis::FunctionSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1; 
  arg2 = *(CallInst **)&jarg2; 
  result = (PointerAnalysis::FunctionSet *) &((PointerAnalysis const *)arg1)->getIndCSCallees(arg2);
  *(PointerAnalysis::FunctionSet **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1resolveIndCalls_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; CallSite arg2 ; PointsTo *arg3 = 0 ; PointerAnalysis::CallEdgeMap *arg4 = 0 ;
  LLVMCallGraph *arg5 = (LLVMCallGraph *) 0 ; CallSite *argp2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(PointerAnalysis **)&jarg1;  argp2 = *(CallSite **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite"); return ; } 
  arg2 = *argp2;  arg3 = *(PointsTo **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PointsTo const & reference is null"); return ; }  
  arg4 = *(PointerAnalysis::CallEdgeMap **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PointerAnalysis::CallEdgeMap & reference is null"); return ; }
    arg5 = *(LLVMCallGraph **)&jarg5;  (arg1)->resolveIndCalls(arg2,(PointsTo const &)*arg3,*arg4,arg5); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1resolveIndCalls_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; CallSite arg2 ; PointsTo *arg3 = 0 ; PointerAnalysis::CallEdgeMap *arg4 = 0 ;
  CallSite *argp2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  argp2 = *(CallSite **)&jarg2; 
  if (!argp2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite"); return ; }
   arg2 = *argp2;  arg3 = *(PointsTo **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PointsTo const & reference is null"); return ; }  
  arg4 = *(PointerAnalysis::CallEdgeMap **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PointerAnalysis::CallEdgeMap & reference is null"); return ; }
    (arg1)->resolveIndCalls(arg2,(PointsTo const &)*arg3,*arg4); }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1matchArgs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; CallSite arg2 ; Function *arg3 = (Function *) 0 ;
  CallSite *argp2 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1; 
  argp2 = *(CallSite **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite"); return 0; } 
  arg2 = *argp2;  arg3 = *(Function **)&jarg3;  result = (bool)(arg1)->matchArgs(arg2,(Function const *)arg3);
  jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1callGraphSCCDetection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1; 
  (arg1)->callGraphSCCDetection(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1getCallGraphSCCRepNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; NodeID arg2 ; NodeID result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  arg2 = (NodeID)jarg2; 
  result = (NodeID)((PointerAnalysis const *)arg1)->getCallGraphSCCRepNode(arg2); jresult = (jlong)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1inSameCallGraphSCC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; Function *arg2 = (Function *) 0 ;
  Function *arg3 = (Function *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1; 
  arg2 = *(Function **)&jarg2;  arg3 = *(Function **)&jarg3; 
  result = (bool)(arg1)->inSameCallGraphSCC((Function const *)arg2,(Function const *)arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1isInRecursion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; Function *arg2 = (Function *) 0 ; bool result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  arg2 = *(Function **)&jarg2; 
  result = (bool)((PointerAnalysis const *)arg1)->isInRecursion((Function const *)arg2); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1isLocalVarInRecursiveFun(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; NodeID arg2 ; bool result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  arg2 = (NodeID)jarg2; 
  result = (bool)((PointerAnalysis const *)arg1)->isLocalVarInRecursiveFun(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jstring JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1PTAName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; std::string result; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  result = ((PointerAnalysis const *)arg1)->PTAName();
  jresult = jenv->NewStringUTF((&result)->c_str());  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1getPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; NodeID arg2 ; PointsTo *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  arg2 = (NodeID)jarg2; 
  result = (PointsTo *) &(arg1)->getPts(arg2); *(PointsTo **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1getRevPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; NodeID arg2 ; PointsTo *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  arg2 = (NodeID)jarg2; 
  result = (PointsTo *) &(arg1)->getRevPts(arg2); *(PointsTo **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1clearPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1; 
  (arg1)->clearPts(); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1printIndCSTargets_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; CallSite arg2 ; PointerAnalysis::FunctionSet *arg3 = 0 ;
  CallSite const *argp2 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_; arg1 = *(PointerAnalysis **)&jarg1; 
  argp2 = *(CallSite **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite const"); return ; } 
  arg2 = *argp2;  arg3 = *(PointerAnalysis::FunctionSet **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PointerAnalysis::FunctionSet const & reference is null");
    return ; }   (arg1)->printIndCSTargets(arg2,(PointerAnalysis::FunctionSet const &)*arg3); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1dumpTopLevelPtsTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1; 
  (arg1)->dumpTopLevelPtsTo(); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1dumpAllPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1; 
  (arg1)->dumpAllPts(); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1dumpCPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1; 
  (arg1)->dumpCPts(); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1dumpPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; NodeID arg2 ; PointsTo *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(PointerAnalysis **)&jarg1;  arg2 = (NodeID)jarg2;  arg3 = *(PointsTo **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PointsTo const & reference is null"); return ; }  
  (arg1)->dumpPts(arg2,(PointsTo const &)*arg3); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1printIndCSTargets_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1; 
  (arg1)->printIndCSTargets(); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1dumpAllTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1; 
  (arg1)->dumpAllTypes(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1getCHGraph(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; CHGraph *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  result = (CHGraph *)((PointerAnalysis const *)arg1)->getCHGraph();
  *(CHGraph **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1getVFnsFromCHA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; CallSite arg2 ; std::set< Function const * > *arg3 = 0 ; CallSite *argp2 ;
  (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_; arg1 = *(PointerAnalysis **)&jarg1;  argp2 = *(CallSite **)&jarg2; 
  if (!argp2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite"); return ; }
   arg2 = *argp2;  arg3 = *(std::set< Function const * > **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::set< Function const * > & reference is null"); return ; }
    (arg1)->getVFnsFromCHA(arg2,*arg3); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1getVFnsFromPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; CallSite arg2 ; PointsTo *arg3 = 0 ; PointerAnalysis::VFunSet *arg4 = 0 ;
  CallSite *argp2 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg4_; arg1 = *(PointerAnalysis **)&jarg1; 
  argp2 = *(CallSite **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite"); return ; } 
  arg2 = *argp2;  arg3 = *(PointsTo **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PointsTo const & reference is null"); return ; }  
  arg4 = *(PointerAnalysis::VFunSet **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PointerAnalysis::VFunSet & reference is null"); return ; }  
  (arg1)->getVFnsFromPts(arg2,(PointsTo const &)*arg3,*arg4); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1connectVCallToVFns(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; CallSite arg2 ; PointerAnalysis::VFunSet *arg3 = 0 ;
  PointerAnalysis::CallEdgeMap *arg4 = 0 ; CallSite *argp2 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg3_;
  arg1 = *(PointerAnalysis **)&jarg1;  argp2 = *(CallSite **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite"); return ; } 
  arg2 = *argp2;  arg3 = *(PointerAnalysis::VFunSet **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PointerAnalysis::VFunSet const & reference is null");
    return ; }   arg4 = *(PointerAnalysis::CallEdgeMap **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PointerAnalysis::CallEdgeMap & reference is null"); return ; }
    (arg1)->connectVCallToVFns(arg2,(PointerAnalysis::VFunSet const &)*arg3,*arg4); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1resolveCPPIndCalls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; CallSite arg2 ; PointsTo *arg3 = 0 ; PointerAnalysis::CallEdgeMap *arg4 = 0 ;
  CallSite *argp2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  argp2 = *(CallSite **)&jarg2; 
  if (!argp2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CallSite"); return ; }
   arg2 = *argp2;  arg3 = *(PointsTo **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PointsTo const & reference is null"); return ; }  
  arg4 = *(PointerAnalysis::CallEdgeMap **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PointerAnalysis::CallEdgeMap & reference is null"); return ; }
    (arg1)->resolveCPPIndCalls(arg2,(PointsTo const &)*arg3,*arg4); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_PointerAnalysis_1getTypeSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; PointerAnalysis *arg1 = (PointerAnalysis *) 0 ; TypeSystem *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(PointerAnalysis **)&jarg1;  result = (TypeSystem *)((PointerAnalysis const *)arg1)->getTypeSystem();
  *(TypeSystem **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1BVDataPTAImpl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BVDataPTAImpl *arg1 = (BVDataPTAImpl *) 0 ; (void)jenv; (void)jcls; arg1 = *(BVDataPTAImpl **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_BVDataPTAImpl_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BVDataPTAImpl *arg1 = (BVDataPTAImpl *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(BVDataPTAImpl **)&jarg1; 
  (arg1)->destroy(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_BVDataPTAImpl_1getPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; BVDataPTAImpl *arg1 = (BVDataPTAImpl *) 0 ; NodeID arg2 ; PointsTo *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(BVDataPTAImpl **)&jarg1;  arg2 = (NodeID)jarg2;  result = (PointsTo *) &(arg1)->getPts(arg2);
  *(PointsTo **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_BVDataPTAImpl_1getRevPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; BVDataPTAImpl *arg1 = (BVDataPTAImpl *) 0 ; NodeID arg2 ; PointsTo *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(BVDataPTAImpl **)&jarg1;  arg2 = (NodeID)jarg2;  result = (PointsTo *) &(arg1)->getRevPts(arg2);
  *(PointsTo **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_BVDataPTAImpl_1expandFIObjs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  BVDataPTAImpl *arg1 = (BVDataPTAImpl *) 0 ; PointsTo *arg2 = 0 ; PointsTo *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(BVDataPTAImpl **)&jarg1;  arg2 = *(PointsTo **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PointsTo const & reference is null"); return ; }  
  arg3 = *(PointsTo **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PointsTo & reference is null"); return ; }  
  (arg1)->expandFIObjs((PointsTo const &)*arg2,*arg3); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_BVDataPTAImpl_1writeToFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  BVDataPTAImpl *arg1 = (BVDataPTAImpl *) 0 ; std::string *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(BVDataPTAImpl **)&jarg1;  if(!jarg2) { SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ; }  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->writeToFile((std::string const &)*arg2); }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_BVDataPTAImpl_1readFromFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ; BVDataPTAImpl *arg1 = (BVDataPTAImpl *) 0 ; std::string *arg2 = 0 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(BVDataPTAImpl **)&jarg1;  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string"); return 0; } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr); arg2 = &arg2_str; jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->readFromFile((std::string const &)*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_BVDataPTAImpl_1alias_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ; BVDataPTAImpl *arg1 = (BVDataPTAImpl *) 0 ; MemoryLocation *arg2 = 0 ; MemoryLocation *arg3 = 0 ;
  AliasResult result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(BVDataPTAImpl **)&jarg1; 
  arg2 = *(MemoryLocation **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MemoryLocation const & reference is null"); return 0; }  
  arg3 = *(MemoryLocation **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MemoryLocation const & reference is null"); return 0; }  
  result = (arg1)->alias((MemoryLocation const &)*arg2,(MemoryLocation const &)*arg3);
  *(AliasResult **)&jresult = new AliasResult((const AliasResult &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_BVDataPTAImpl_1alias_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ; BVDataPTAImpl *arg1 = (BVDataPTAImpl *) 0 ; Value *arg2 = (Value *) 0 ; Value *arg3 = (Value *) 0 ;
  AliasResult result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(BVDataPTAImpl **)&jarg1;  arg2 = *(Value **)&jarg2; 
  arg3 = *(Value **)&jarg3;  result = (arg1)->alias((Value const *)arg2,(Value const *)arg3);
  *(AliasResult **)&jresult = new AliasResult((const AliasResult &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_BVDataPTAImpl_1alias_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ; BVDataPTAImpl *arg1 = (BVDataPTAImpl *) 0 ; NodeID arg2 ; NodeID arg3 ; AliasResult result; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(BVDataPTAImpl **)&jarg1;  arg2 = (NodeID)jarg2;  arg3 = (NodeID)jarg3; 
  result = (arg1)->alias(arg2,arg3); *(AliasResult **)&jresult = new AliasResult((const AliasResult &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_BVDataPTAImpl_1alias_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ; BVDataPTAImpl *arg1 = (BVDataPTAImpl *) 0 ; PointsTo *arg2 = 0 ; PointsTo *arg3 = 0 ; AliasResult result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(BVDataPTAImpl **)&jarg1;  arg2 = *(PointsTo **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PointsTo const & reference is null"); return 0; }  
  arg3 = *(PointsTo **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PointsTo const & reference is null"); return 0; }  
  result = (arg1)->alias((PointsTo const &)*arg2,(PointsTo const &)*arg3);
  *(AliasResult **)&jresult = new AliasResult((const AliasResult &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_BVDataPTAImpl_1dumpCPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BVDataPTAImpl *arg1 = (BVDataPTAImpl *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(BVDataPTAImpl **)&jarg1; 
  (arg1)->dumpCPts(); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_BVDataPTAImpl_1dumpTopLevelPtsTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BVDataPTAImpl *arg1 = (BVDataPTAImpl *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(BVDataPTAImpl **)&jarg1; 
  (arg1)->dumpTopLevelPtsTo(); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_BVDataPTAImpl_1dumpAllPts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BVDataPTAImpl *arg1 = (BVDataPTAImpl *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(BVDataPTAImpl **)&jarg1; 
  (arg1)->dumpAllPts(); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1DDAStat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; FlowDDA *arg1 = (FlowDDA *) 0 ; DDAStat *result = 0 ; (void)jenv; (void)jcls; arg1 = *(FlowDDA **)&jarg1; 
  result = (DDAStat *)new DDAStat(arg1); *(DDAStat **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1DDAStat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ; ContextDDA *arg1 = (ContextDDA *) 0 ; DDAStat *result = 0 ; (void)jenv; (void)jcls;
  arg1 = *(ContextDDA **)&jarg1;  result = (DDAStat *)new DDAStat(arg1); *(DDAStat **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1_1NumOfDPM_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DDAStat *arg1 = (DDAStat *) 0 ; u32_t arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(DDAStat **)&jarg1; 
  arg2 = (u32_t)jarg2;  if (arg1) (arg1)->_NumOfDPM = arg2; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1_1NumOfDPM_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; DDAStat *arg1 = (DDAStat *) 0 ; u32_t result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(DDAStat **)&jarg1;  result = (u32_t) ((arg1)->_NumOfDPM); jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1_1NumOfStrongUpdates_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DDAStat *arg1 = (DDAStat *) 0 ; u32_t arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(DDAStat **)&jarg1; 
  arg2 = (u32_t)jarg2;  if (arg1) (arg1)->_NumOfStrongUpdates = arg2; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1_1NumOfStrongUpdates_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; DDAStat *arg1 = (DDAStat *) 0 ; u32_t result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(DDAStat **)&jarg1;  result = (u32_t) ((arg1)->_NumOfStrongUpdates); jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1_1NumOfMustAliases_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DDAStat *arg1 = (DDAStat *) 0 ; u32_t arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(DDAStat **)&jarg1; 
  arg2 = (u32_t)jarg2;  if (arg1) (arg1)->_NumOfMustAliases = arg2; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1_1NumOfMustAliases_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; DDAStat *arg1 = (DDAStat *) 0 ; u32_t result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(DDAStat **)&jarg1;  result = (u32_t) ((arg1)->_NumOfMustAliases); jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1_1NumOfInfeasiblePath_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DDAStat *arg1 = (DDAStat *) 0 ; u32_t arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(DDAStat **)&jarg1; 
  arg2 = (u32_t)jarg2;  if (arg1) (arg1)->_NumOfInfeasiblePath = arg2; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1_1NumOfInfeasiblePath_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; DDAStat *arg1 = (DDAStat *) 0 ; u32_t result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(DDAStat **)&jarg1;  result = (u32_t) ((arg1)->_NumOfInfeasiblePath); jresult = (jlong)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1_1NumOfStep_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  DDAStat *arg1 = (DDAStat *) 0 ; u64_t arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(DDAStat **)&jarg1;  {
    jclass clazz; jmethodID mid; jbyteArray ba; jbyte* bae; jsize sz; int i; if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null"); return ; } 
    clazz = jenv->GetObjectClass(jarg2); mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid); bae = jenv->GetByteArrayElements(ba, 0); sz = jenv->GetArrayLength(ba);
    arg2 = 0; if (sz > 0) { arg2 = (u64_t)(signed char)bae[0]; for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (u64_t)(unsigned char)bae[i]; }  }  jenv->ReleaseByteArrayElements(ba, bae, 0); } 
  if (arg1) (arg1)->_NumOfStep = arg2; }
SWIGEXPORT jobject JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1_1NumOfStep_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ; DDAStat *arg1 = (DDAStat *) 0 ; u64_t result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(DDAStat **)&jarg1;  result = (u64_t) ((arg1)->_NumOfStep); { jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0); jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V"); jobject bigint; int i; bae[0] = 0; for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i)); }  jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba); jenv->DeleteLocalRef(ba); jresult = bigint; }  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1_1NumOfStepInCycle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  DDAStat *arg1 = (DDAStat *) 0 ; u64_t arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(DDAStat **)&jarg1;  {
    jclass clazz; jmethodID mid; jbyteArray ba; jbyte* bae; jsize sz; int i; if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null"); return ; } 
    clazz = jenv->GetObjectClass(jarg2); mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid); bae = jenv->GetByteArrayElements(ba, 0); sz = jenv->GetArrayLength(ba);
    arg2 = 0; if (sz > 0) { arg2 = (u64_t)(signed char)bae[0]; for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (u64_t)(unsigned char)bae[i]; }  }  jenv->ReleaseByteArrayElements(ba, bae, 0); } 
  if (arg1) (arg1)->_NumOfStepInCycle = arg2; }
SWIGEXPORT jobject JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1_1NumOfStepInCycle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ; DDAStat *arg1 = (DDAStat *) 0 ; u64_t result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(DDAStat **)&jarg1;  result = (u64_t) ((arg1)->_NumOfStepInCycle); { jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0); jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V"); jobject bigint; int i; bae[0] = 0; for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i)); }  jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba); jenv->DeleteLocalRef(ba); jresult = bigint; }  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1_1AnaTimePerQuery_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  DDAStat *arg1 = (DDAStat *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(DDAStat **)&jarg1; 
  arg2 = (double)jarg2;  if (arg1) (arg1)->_AnaTimePerQuery = arg2; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1_1AnaTimePerQuery_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; DDAStat *arg1 = (DDAStat *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(DDAStat **)&jarg1;  result = (double) ((arg1)->_AnaTimePerQuery); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1_1AnaTimeCyclePerQuery_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  DDAStat *arg1 = (DDAStat *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(DDAStat **)&jarg1; 
  arg2 = (double)jarg2;  if (arg1) (arg1)->_AnaTimeCyclePerQuery = arg2; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1_1AnaTimeCyclePerQuery_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; DDAStat *arg1 = (DDAStat *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(DDAStat **)&jarg1;  result = (double) ((arg1)->_AnaTimeCyclePerQuery); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1_1TotalTimeOfQueries_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  DDAStat *arg1 = (DDAStat *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(DDAStat **)&jarg1; 
  arg2 = (double)jarg2;  if (arg1) (arg1)->_TotalTimeOfQueries = arg2; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1_1TotalTimeOfQueries_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; DDAStat *arg1 = (DDAStat *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(DDAStat **)&jarg1;  result = (double) ((arg1)->_TotalTimeOfQueries); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1_1TotalTimeOfBKCondition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  DDAStat *arg1 = (DDAStat *) 0 ; double arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(DDAStat **)&jarg1; 
  arg2 = (double)jarg2;  if (arg1) (arg1)->_TotalTimeOfBKCondition = arg2; }
SWIGEXPORT jdouble JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1_1TotalTimeOfBKCondition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ; DDAStat *arg1 = (DDAStat *) 0 ; double result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(DDAStat **)&jarg1;  result = (double) ((arg1)->_TotalTimeOfBKCondition); jresult = (jdouble)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1_1StrongUpdateStores_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DDAStat *arg1 = (DDAStat *) 0 ; NodeBS arg2 ; NodeBS *argp2 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(DDAStat **)&jarg1;  argp2 = *(NodeBS **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null NodeBS"); return ; } 
  arg2 = *argp2;  if (arg1) (arg1)->_StrongUpdateStores = arg2; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1_1StrongUpdateStores_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; DDAStat *arg1 = (DDAStat *) 0 ; NodeBS result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(DDAStat **)&jarg1;  result =  ((arg1)->_StrongUpdateStores);
  *(NodeBS **)&jresult = new NodeBS((const NodeBS &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1performStatPerQuery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DDAStat *arg1 = (DDAStat *) 0 ; NodeID arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(DDAStat **)&jarg1; 
  arg2 = (NodeID)jarg2;  (arg1)->performStatPerQuery(arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1performStat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DDAStat *arg1 = (DDAStat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(DDAStat **)&jarg1;  (arg1)->performStat(); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1printStat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DDAStat *arg1 = (DDAStat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(DDAStat **)&jarg1;  (arg1)->printStat(); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1printStatPerQuery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  DDAStat *arg1 = (DDAStat *) 0 ; NodeID arg2 ; PointsTo *arg3 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(DDAStat **)&jarg1;  arg2 = (NodeID)jarg2;  arg3 = *(PointsTo **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PointsTo const & reference is null"); return ; }  
  (arg1)->printStatPerQuery(arg2,(PointsTo const &)*arg3); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1getNumOfOOBQuery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DDAStat *arg1 = (DDAStat *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(DDAStat **)&jarg1; 
  (arg1)->getNumOfOOBQuery(); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1setMemUsageBefore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  DDAStat *arg1 = (DDAStat *) 0 ; u32_t arg2 ; u32_t arg3 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(DDAStat **)&jarg1; 
  arg2 = (u32_t)jarg2;  arg3 = (u32_t)jarg3;  (arg1)->setMemUsageBefore(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1setMemUsageAfter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  DDAStat *arg1 = (DDAStat *) 0 ; u32_t arg2 ; u32_t arg3 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(DDAStat **)&jarg1; 
  arg2 = (u32_t)jarg2;  arg3 = (u32_t)jarg3;  (arg1)->setMemUsageAfter(arg2,arg3); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1getSVFG(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; DDAStat *arg1 = (DDAStat *) 0 ; SVFG *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(DDAStat **)&jarg1;  result = (SVFG *)((DDAStat const *)arg1)->getSVFG(); *(SVFG **)&jresult = result; 
  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1getPTA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; DDAStat *arg1 = (DDAStat *) 0 ; PointerAnalysis *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(DDAStat **)&jarg1;  result = (PointerAnalysis *)((DDAStat const *)arg1)->getPTA();
  *(PointerAnalysis **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1getStrongUpdateStores(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; DDAStat *arg1 = (DDAStat *) 0 ; NodeBS *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(DDAStat **)&jarg1;  result = (NodeBS *) &(arg1)->getStrongUpdateStores(); *(NodeBS **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1DDAStat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DDAStat *arg1 = (DDAStat *) 0 ; (void)jenv; (void)jcls; arg1 = *(DDAStat **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1DDAClient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SVFModule arg1 ; SVFModule *argp1 ; DDAClient *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  argp1 = *(SVFModule **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SVFModule"); return 0; } 
  arg1 = *argp1;  result = (DDAClient *)new DDAClient(arg1); *(DDAClient **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1DDAClient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DDAClient *arg1 = (DDAClient *) 0 ; (void)jenv; (void)jcls; arg1 = *(DDAClient **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAClient_1initialise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DDAClient *arg1 = (DDAClient *) 0 ; SVFModule arg2 ; SVFModule *argp2 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(DDAClient **)&jarg1;  argp2 = *(SVFModule **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SVFModule"); return ; } 
  arg2 = *argp2;  (arg1)->initialise(arg2); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DDAClient_1collectCandidateQueries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; DDAClient *arg1 = (DDAClient *) 0 ; PAG *arg2 = (PAG *) 0 ; NodeSet *result = 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; arg1 = *(DDAClient **)&jarg1;  arg2 = *(PAG **)&jarg2; 
  result = (NodeSet *) &(arg1)->collectCandidateQueries(arg2); *(NodeSet **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DDAClient_1getCandidateQueries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; DDAClient *arg1 = (DDAClient *) 0 ; NodeSet *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(DDAClient **)&jarg1;  result = (NodeSet *) &((DDAClient const *)arg1)->getCandidateQueries();
  *(NodeSet **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAClient_1handleStatement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  DDAClient *arg1 = (DDAClient *) 0 ; SVFGNode *arg2 = (SVFGNode *) 0 ; NodeID arg3 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(DDAClient **)&jarg1;  arg2 = *(SVFGNode **)&jarg2;  arg3 = (NodeID)jarg3; 
  (arg1)->handleStatement((SVFGNode const *)arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAClient_1setPAG(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DDAClient *arg1 = (DDAClient *) 0 ; PAG *arg2 = (PAG *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(DDAClient **)&jarg1;  arg2 = *(PAG **)&jarg2;  (arg1)->setPAG(arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAClient_1setCurrentQueryPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DDAClient *arg1 = (DDAClient *) 0 ; NodeID arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(DDAClient **)&jarg1; 
  arg2 = (NodeID)jarg2;  (arg1)->setCurrentQueryPtr(arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAClient_1setQuery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DDAClient *arg1 = (DDAClient *) 0 ; NodeID arg2 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(DDAClient **)&jarg1; 
  arg2 = (NodeID)jarg2;  (arg1)->setQuery(arg2); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DDAClient_1getModule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; DDAClient *arg1 = (DDAClient *) 0 ; SVFModule result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(DDAClient **)&jarg1;  result = ((DDAClient const *)arg1)->getModule();
  *(SVFModule **)&jresult = new SVFModule((const SVFModule &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAClient_1answerQueries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DDAClient *arg1 = (DDAClient *) 0 ; PointerAnalysis *arg2 = (PointerAnalysis *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(DDAClient **)&jarg1;  arg2 = *(PointerAnalysis **)&jarg2;  (arg1)->answerQueries(arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAClient_1performStat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DDAClient *arg1 = (DDAClient *) 0 ; PointerAnalysis *arg2 = (PointerAnalysis *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(DDAClient **)&jarg1;  arg2 = *(PointerAnalysis **)&jarg2;  (arg1)->performStat(arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAClient_1collectWPANum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DDAClient *arg1 = (DDAClient *) 0 ; SVFModule arg2 ; SVFModule *argp2 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(DDAClient **)&jarg1;  argp2 = *(SVFModule **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SVFModule"); return ; } 
  arg2 = *argp2;  (arg1)->collectWPANum(arg2); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1FunptrDDAClient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; SVFModule arg1 ; SVFModule *argp1 ; FunptrDDAClient *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  argp1 = *(SVFModule **)&jarg1;  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SVFModule"); return 0; } 
  arg1 = *argp1;  result = (FunptrDDAClient *)new FunptrDDAClient(arg1); *(FunptrDDAClient **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1FunptrDDAClient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FunptrDDAClient *arg1 = (FunptrDDAClient *) 0 ; (void)jenv; (void)jcls; arg1 = *(FunptrDDAClient **)&jarg1;  delete arg1; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_FunptrDDAClient_1collectCandidateQueries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; FunptrDDAClient *arg1 = (FunptrDDAClient *) 0 ; PAG *arg2 = (PAG *) 0 ; NodeSet *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(FunptrDDAClient **)&jarg1;  arg2 = *(PAG **)&jarg2; 
  result = (NodeSet *) &(arg1)->collectCandidateQueries(arg2); *(NodeSet **)&jresult = result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_FunptrDDAClient_1performStat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FunptrDDAClient *arg1 = (FunptrDDAClient *) 0 ; PointerAnalysis *arg2 = (PointerAnalysis *) 0 ; (void)jenv; (void)jcls;
  (void)jarg1_; (void)jarg2_; arg1 = *(FunptrDDAClient **)&jarg1;  arg2 = *(PointerAnalysis **)&jarg2; 
  (arg1)->performStat(arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAPass_1ID_1set(JNIEnv *jenv, jclass jcls, jchar jarg1) { char arg1 ;
  (void)jenv; (void)jcls; arg1 = (char)jarg1;  DDAPass::ID = arg1; }
SWIGEXPORT jchar JNICALL Java_org_supa_bindings_SUPAJNI_DDAPass_1ID_1get(JNIEnv *jenv, jclass jcls) { jchar jresult = 0 ;
  char result; (void)jenv; (void)jcls; result = (char)DDAPass::ID; jresult = (jchar)result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_new_1DDAPass(JNIEnv *jenv, jclass jcls) { jlong jresult = 0 ;
  DDAPass *result = 0 ; (void)jenv; (void)jcls; result = (DDAPass *)new DDAPass(); *(DDAPass **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_delete_1DDAPass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DDAPass *arg1 = (DDAPass *) 0 ; (void)jenv; (void)jcls; arg1 = *(DDAPass **)&jarg1;  delete arg1; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAPass_1getAnalysisUsage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DDAPass *arg1 = (DDAPass *) 0 ; AnalysisUsage *arg2 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(DDAPass **)&jarg1; 
  arg2 = *(AnalysisUsage **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AnalysisUsage & reference is null"); return ; }  
  ((DDAPass const *)arg1)->getAnalysisUsage(*arg2); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DDAPass_1getAdjustedAnalysisPointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ; DDAPass *arg1 = (DDAPass *) 0 ; AnalysisID arg2 = (AnalysisID) 0 ; void *result = 0 ; (void)jenv;
  (void)jcls; (void)jarg1_; arg1 = *(DDAPass **)&jarg1;  arg2 = *(AnalysisID *)&jarg2; 
  result = (void *)(arg1)->getAdjustedAnalysisPointer(arg2); *(void **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DDAPass_1alias_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ; DDAPass *arg1 = (DDAPass *) 0 ; MemoryLocation *arg2 = 0 ; MemoryLocation *arg3 = 0 ; AliasResult result;
  (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(DDAPass **)&jarg1;  arg2 = *(MemoryLocation **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MemoryLocation const & reference is null"); return 0; }  
  arg3 = *(MemoryLocation **)&jarg3; if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MemoryLocation const & reference is null"); return 0; }  
  result = (arg1)->alias((MemoryLocation const &)*arg2,(MemoryLocation const &)*arg3);
  *(AliasResult **)&jresult = new AliasResult((const AliasResult &)result);  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DDAPass_1alias_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ; DDAPass *arg1 = (DDAPass *) 0 ; Value *arg2 = (Value *) 0 ; Value *arg3 = (Value *) 0 ;
  AliasResult result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(DDAPass **)&jarg1;  arg2 = *(Value **)&jarg2; 
  arg3 = *(Value **)&jarg3;  result = (arg1)->alias((Value const *)arg2,(Value const *)arg3);
  *(AliasResult **)&jresult = new AliasResult((const AliasResult &)result);  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_DDAPass_1runOnModule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ; DDAPass *arg1 = (DDAPass *) 0 ; SVFModule arg2 ; SVFModule *argp2 ; bool result; (void)jenv;
  (void)jcls; (void)jarg1_; (void)jarg2_; arg1 = *(DDAPass **)&jarg1;  argp2 = *(SVFModule **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SVFModule"); return 0; } 
  arg2 = *argp2;  result = (bool)(arg1)->runOnModule(arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_DDAPass_1runOnModule_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ; DDAPass *arg1 = (DDAPass *) 0 ; Module *arg2 = 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(DDAPass **)&jarg1;  arg2 = *(Module **)&jarg2; if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Module & reference is null"); return 0; }  
  result = (bool)(arg1)->runOnModule(*arg2); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAPass_1selectClient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DDAPass *arg1 = (DDAPass *) 0 ; SVFModule arg2 ; SVFModule *argp2 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(DDAPass **)&jarg1;  argp2 = *(SVFModule **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SVFModule"); return ; } 
  arg2 = *argp2;  (arg1)->selectClient(arg2); }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DDAPass_1getPassName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; DDAPass *arg1 = (DDAPass *) 0 ; StringRef result; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(DDAPass **)&jarg1;  result = ((DDAPass const *)arg1)->getPassName();
  *(StringRef **)&jresult = new StringRef((const StringRef &)result);  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAPass_1printQueryPTS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DDAPass *arg1 = (DDAPass *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(DDAPass **)&jarg1;  (arg1)->printQueryPTS(); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAPass_1runPointerAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  DDAPass *arg1 = (DDAPass *) 0 ; SVFModule arg2 ; u32_t arg3 ; SVFModule *argp2 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(DDAPass **)&jarg1;  argp2 = *(SVFModule **)&jarg2;  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SVFModule"); return ; } 
  arg2 = *argp2;  arg3 = (u32_t)jarg3;  (arg1)->runPointerAnalysis(arg2,arg3); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAPass_1answerQueries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DDAPass *arg1 = (DDAPass *) 0 ; PointerAnalysis *arg2 = (PointerAnalysis *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(DDAPass **)&jarg1;  arg2 = *(PointerAnalysis **)&jarg2;  (arg1)->answerQueries(arg2); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAPass_1initCxtInsensitiveEdges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  DDAPass *arg1 = (DDAPass *) 0 ; PointerAnalysis *arg2 = (PointerAnalysis *) 0 ; SVFG *arg3 = (SVFG *) 0 ;
  DDAPass::SVFGSCC *arg4 = (DDAPass::SVFGSCC *) 0 ; DDAPass::SVFGEdgeSet *arg5 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; (void)jarg5_; arg1 = *(DDAPass **)&jarg1;  arg2 = *(PointerAnalysis **)&jarg2;  arg3 = *(SVFG **)&jarg3; 
  arg4 = *(DDAPass::SVFGSCC **)&jarg4;  arg5 = *(DDAPass::SVFGEdgeSet **)&jarg5; if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DDAPass::SVFGEdgeSet & reference is null"); return ; }  
  (arg1)->initCxtInsensitiveEdges(arg2,(SVFG const *)arg3,(DDAPass::SVFGSCC const *)arg4,*arg5); }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_DDAPass_1edgeInSVFGSCC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ; DDAPass *arg1 = (DDAPass *) 0 ; DDAPass::SVFGSCC *arg2 = (DDAPass::SVFGSCC *) 0 ;
  SVFGEdge *arg3 = (SVFGEdge *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; arg1 = *(DDAPass **)&jarg1; 
  arg2 = *(DDAPass::SVFGSCC **)&jarg2;  arg3 = *(SVFGEdge **)&jarg3; 
  result = (bool)(arg1)->edgeInSVFGSCC((DDAPass::SVFGSCC const *)arg2,(SVFGEdge const *)arg3); jresult = (jboolean)result; 
  return jresult; }
SWIGEXPORT jboolean JNICALL Java_org_supa_bindings_SUPAJNI_DDAPass_1edgeInCallGraphSCC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ; DDAPass *arg1 = (DDAPass *) 0 ; PointerAnalysis *arg2 = (PointerAnalysis *) 0 ;
  SVFGEdge *arg3 = (SVFGEdge *) 0 ; bool result; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(DDAPass **)&jarg1;  arg2 = *(PointerAnalysis **)&jarg2;  arg3 = *(SVFGEdge **)&jarg3; 
  result = (bool)(arg1)->edgeInCallGraphSCC(arg2,(SVFGEdge const *)arg3); jresult = (jboolean)result;  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAPass_1collectCxtInsenEdgeForRecur(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  DDAPass *arg1 = (DDAPass *) 0 ; PointerAnalysis *arg2 = (PointerAnalysis *) 0 ; SVFG *arg3 = (SVFG *) 0 ;
  DDAPass::SVFGEdgeSet *arg4 = 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_; (void)jarg4_;
  arg1 = *(DDAPass **)&jarg1;  arg2 = *(PointerAnalysis **)&jarg2;  arg3 = *(SVFG **)&jarg3; 
  arg4 = *(DDAPass::SVFGEdgeSet **)&jarg4; if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DDAPass::SVFGEdgeSet & reference is null"); return ; }  
  (arg1)->collectCxtInsenEdgeForRecur(arg2,(SVFG const *)arg3,*arg4); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAPass_1collectCxtInsenEdgeForVFCycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  DDAPass *arg1 = (DDAPass *) 0 ; PointerAnalysis *arg2 = (PointerAnalysis *) 0 ; SVFG *arg3 = (SVFG *) 0 ;
  DDAPass::SVFGSCC *arg4 = (DDAPass::SVFGSCC *) 0 ; DDAPass::SVFGEdgeSet *arg5 = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; (void)jarg5_; arg1 = *(DDAPass **)&jarg1;  arg2 = *(PointerAnalysis **)&jarg2;  arg3 = *(SVFG **)&jarg3; 
  arg4 = *(DDAPass::SVFGSCC **)&jarg4;  arg5 = *(DDAPass::SVFGEdgeSet **)&jarg5; if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DDAPass::SVFGEdgeSet & reference is null"); return ; }  
  (arg1)->collectCxtInsenEdgeForVFCycle(arg2,(SVFG const *)arg3,(DDAPass::SVFGSCC const *)arg4,*arg5); }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAPass_1_1pta_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DDAPass *arg1 = (DDAPass *) 0 ; PointerAnalysis *arg2 = (PointerAnalysis *) 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  (void)jarg2_; arg1 = *(DDAPass **)&jarg1;  arg2 = *(PointerAnalysis **)&jarg2;  if (arg1) (arg1)->_pta = arg2; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DDAPass_1_1pta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; DDAPass *arg1 = (DDAPass *) 0 ; PointerAnalysis *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(DDAPass **)&jarg1;  result = (PointerAnalysis *) ((arg1)->_pta); *(PointerAnalysis **)&jresult = result; 
  return jresult; }
SWIGEXPORT void JNICALL Java_org_supa_bindings_SUPAJNI_DDAPass_1_1client_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DDAPass *arg1 = (DDAPass *) 0 ; DDAClient *arg2 = (DDAClient *) 0 ; (void)jenv; (void)jcls; (void)jarg1_; (void)jarg2_;
  arg1 = *(DDAPass **)&jarg1;  arg2 = *(DDAClient **)&jarg2;  if (arg1) (arg1)->_client = arg2; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DDAPass_1_1client_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ; DDAPass *arg1 = (DDAPass *) 0 ; DDAClient *result = 0 ; (void)jenv; (void)jcls; (void)jarg1_;
  arg1 = *(DDAPass **)&jarg1;  result = (DDAClient *) ((arg1)->_client); *(DDAClient **)&jresult = result;  return jresult; }
SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_BVDataPTAImpl_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(PointerAnalysis **)&baseptr = *(BVDataPTAImpl **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DDAStat_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(PTAStat **)&baseptr = *(DDAStat **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_FunptrDDAClient_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(DDAClient **)&baseptr = *(FunptrDDAClient **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_supa_bindings_SUPAJNI_DDAPass_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(llvm::ModulePass **)&baseptr = *(DDAPass **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

