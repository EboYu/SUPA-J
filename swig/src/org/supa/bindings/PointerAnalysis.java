/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.supa.bindings;

public class PointerAnalysis {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected PointerAnalysis(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(PointerAnalysis obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        SUPAJNI.delete_PointerAnalysis(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public int getNumOfResolvedIndCallEdge() {
    return SUPAJNI.PointerAnalysis_getNumOfResolvedIndCallEdge(swigCPtr, this);
  }

  public SWIGTYPE_p_PTACallGraph getPTACallGraph() {
    long cPtr = SUPAJNI.PointerAnalysis_getPTACallGraph(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_PTACallGraph(cPtr, false);
  }

  public SWIGTYPE_p_SCCDetectionT_PTACallGraph_p_t getCallGraphSCC() {
    long cPtr = SUPAJNI.PointerAnalysis_getCallGraphSCC(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_SCCDetectionT_PTACallGraph_p_t(cPtr, false);
  }

  public PointerAnalysis.PTATY getAnalysisTy() {
    return PointerAnalysis.PTATY.swigToEnum(SUPAJNI.PointerAnalysis_getAnalysisTy(swigCPtr, this));
  }

  public SWIGTYPE_p_PAG getPAG() {
    long cPtr = SUPAJNI.PointerAnalysis_getPAG(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_PAG(cPtr, false);
  }

  public static void setPAG(SWIGTYPE_p_PAG g) {
    SUPAJNI.PointerAnalysis_setPAG(SWIGTYPE_p_PAG.getCPtr(g));
  }

  public PTAStat getStat() {
    long cPtr = SUPAJNI.PointerAnalysis_getStat(swigCPtr, this);
    return (cPtr == 0) ? null : new PTAStat(cPtr, false);
  }

  public SVFModule getModule() {
    return new SVFModule(SUPAJNI.PointerAnalysis_getModule(swigCPtr, this), true);
  }

  public NodeSet getAllValidPtrs() {
    return new NodeSet(SUPAJNI.PointerAnalysis_getAllValidPtrs(swigCPtr, this), false);
  }

  public void initialize(SVFModule svfModule) {
    SUPAJNI.PointerAnalysis_initialize(swigCPtr, this, SVFModule.getCPtr(svfModule), svfModule);
  }

  public void finalize() {
    SUPAJNI.PointerAnalysis_finalize(swigCPtr, this);
  }

  public void analyze(SVFModule svfModule) {
    SUPAJNI.PointerAnalysis_analyze(swigCPtr, this, SVFModule.getCPtr(svfModule), svfModule);
  }

  public void computeDDAPts(long id) {
    SUPAJNI.PointerAnalysis_computeDDAPts(swigCPtr, this, id);
  }

  public SWIGTYPE_p_llvm__AliasResult alias(SWIGTYPE_p_llvm__MemoryLocation LocA, SWIGTYPE_p_llvm__MemoryLocation LocB) {
    return new SWIGTYPE_p_llvm__AliasResult(SUPAJNI.PointerAnalysis_alias__SWIG_0(swigCPtr, this, SWIGTYPE_p_llvm__MemoryLocation.getCPtr(LocA), SWIGTYPE_p_llvm__MemoryLocation.getCPtr(LocB)), true);
  }

  public SWIGTYPE_p_llvm__AliasResult alias(SWIGTYPE_p_llvm__Value V1, SWIGTYPE_p_llvm__Value V2) {
    return new SWIGTYPE_p_llvm__AliasResult(SUPAJNI.PointerAnalysis_alias__SWIG_1(swigCPtr, this, SWIGTYPE_p_llvm__Value.getCPtr(V1), SWIGTYPE_p_llvm__Value.getCPtr(V2)), true);
  }

  public SWIGTYPE_p_llvm__AliasResult alias(long node1, long node2) {
    return new SWIGTYPE_p_llvm__AliasResult(SUPAJNI.PointerAnalysis_alias__SWIG_2(swigCPtr, this, node1, node2), true);
  }

  public void dumpStat() {
    SUPAJNI.PointerAnalysis_dumpStat(swigCPtr, this);
  }

  public boolean containBlackHoleNode(SWIGTYPE_p_llvm__SparseBitVectorT_t pts) {
    return SUPAJNI.PointerAnalysis_containBlackHoleNode(swigCPtr, this, SWIGTYPE_p_llvm__SparseBitVectorT_t.getCPtr(pts));
  }

  public boolean containConstantNode(SWIGTYPE_p_llvm__SparseBitVectorT_t pts) {
    return SUPAJNI.PointerAnalysis_containConstantNode(swigCPtr, this, SWIGTYPE_p_llvm__SparseBitVectorT_t.getCPtr(pts));
  }

  public boolean isBlkObjOrConstantObj(long ptd) {
    return SUPAJNI.PointerAnalysis_isBlkObjOrConstantObj(swigCPtr, this, ptd);
  }

  public boolean isNonPointerObj(long ptd) {
    return SUPAJNI.PointerAnalysis_isNonPointerObj(swigCPtr, this, ptd);
  }

  public boolean isHeapMemObj(long id) {
    return SUPAJNI.PointerAnalysis_isHeapMemObj(swigCPtr, this, id);
  }

  public boolean isArrayMemObj(long id) {
    return SUPAJNI.PointerAnalysis_isArrayMemObj(swigCPtr, this, id);
  }

  public boolean isFIObjNode(long id) {
    return SUPAJNI.PointerAnalysis_isFIObjNode(swigCPtr, this, id);
  }

  public long getBaseObjNode(long id) {
    return SUPAJNI.PointerAnalysis_getBaseObjNode(swigCPtr, this, id);
  }

  public long getFIObjNode(long id) {
    return SUPAJNI.PointerAnalysis_getFIObjNode(swigCPtr, this, id);
  }

  public long getGepObjNode(long id, SWIGTYPE_p_LocationSet ls) {
    return SUPAJNI.PointerAnalysis_getGepObjNode(swigCPtr, this, id, SWIGTYPE_p_LocationSet.getCPtr(ls));
  }

  public SWIGTYPE_p_llvm__SparseBitVectorT_t getAllFieldsObjNode(long id) {
    return new SWIGTYPE_p_llvm__SparseBitVectorT_t(SUPAJNI.PointerAnalysis_getAllFieldsObjNode(swigCPtr, this, id), false);
  }

  public void setObjFieldInsensitive(long id) {
    SUPAJNI.PointerAnalysis_setObjFieldInsensitive(swigCPtr, this, id);
  }

  public boolean isFieldInsensitive(long id) {
    return SUPAJNI.PointerAnalysis_isFieldInsensitive(swigCPtr, this, id);
  }

  public boolean printStat() {
    return SUPAJNI.PointerAnalysis_printStat(swigCPtr, this);
  }

  public void disablePrintStat() {
    SUPAJNI.PointerAnalysis_disablePrintStat(swigCPtr, this);
  }

  public SWIGTYPE_p_std__mapT_llvm__CallSite_std__setT_Function_const_p_t_std__lessT_llvm__CallSite_t_t getIndCallMap() {
    return new SWIGTYPE_p_std__mapT_llvm__CallSite_std__setT_Function_const_p_t_std__lessT_llvm__CallSite_t_t(SUPAJNI.PointerAnalysis_getIndCallMap(swigCPtr, this), false);
  }

  public boolean hasIndCSCallees(SWIGTYPE_p_llvm__CallSite cs) {
    return SUPAJNI.PointerAnalysis_hasIndCSCallees(swigCPtr, this, SWIGTYPE_p_llvm__CallSite.getCPtr(cs));
  }

  public FunctionSet getIndCSCallees(SWIGTYPE_p_llvm__CallSite cs) {
    return new FunctionSet(SUPAJNI.PointerAnalysis_getIndCSCallees__SWIG_0(swigCPtr, this, SWIGTYPE_p_llvm__CallSite.getCPtr(cs)), false);
  }

  public FunctionSet getIndCSCallees(SWIGTYPE_p_llvm__CallInst csInst) {
    return new FunctionSet(SUPAJNI.PointerAnalysis_getIndCSCallees__SWIG_1(swigCPtr, this, SWIGTYPE_p_llvm__CallInst.getCPtr(csInst)), false);
  }

  public void resolveIndCalls(SWIGTYPE_p_llvm__CallSite cs, SWIGTYPE_p_llvm__SparseBitVectorT_t target, SWIGTYPE_p_std__mapT_llvm__CallSite_std__setT_Function_const_p_t_std__lessT_llvm__CallSite_t_t newEdges, SWIGTYPE_p_llvm__CallGraph callgraph) {
    SUPAJNI.PointerAnalysis_resolveIndCalls__SWIG_0(swigCPtr, this, SWIGTYPE_p_llvm__CallSite.getCPtr(cs), SWIGTYPE_p_llvm__SparseBitVectorT_t.getCPtr(target), SWIGTYPE_p_std__mapT_llvm__CallSite_std__setT_Function_const_p_t_std__lessT_llvm__CallSite_t_t.getCPtr(newEdges), SWIGTYPE_p_llvm__CallGraph.getCPtr(callgraph));
  }

  public void resolveIndCalls(SWIGTYPE_p_llvm__CallSite cs, SWIGTYPE_p_llvm__SparseBitVectorT_t target, SWIGTYPE_p_std__mapT_llvm__CallSite_std__setT_Function_const_p_t_std__lessT_llvm__CallSite_t_t newEdges) {
    SUPAJNI.PointerAnalysis_resolveIndCalls__SWIG_1(swigCPtr, this, SWIGTYPE_p_llvm__CallSite.getCPtr(cs), SWIGTYPE_p_llvm__SparseBitVectorT_t.getCPtr(target), SWIGTYPE_p_std__mapT_llvm__CallSite_std__setT_Function_const_p_t_std__lessT_llvm__CallSite_t_t.getCPtr(newEdges));
  }

  public boolean matchArgs(SWIGTYPE_p_llvm__CallSite cs, SWIGTYPE_p_llvm__Function callee) {
    return SUPAJNI.PointerAnalysis_matchArgs(swigCPtr, this, SWIGTYPE_p_llvm__CallSite.getCPtr(cs), SWIGTYPE_p_llvm__Function.getCPtr(callee));
  }

  public void callGraphSCCDetection() {
    SUPAJNI.PointerAnalysis_callGraphSCCDetection(swigCPtr, this);
  }

  public long getCallGraphSCCRepNode(long id) {
    return SUPAJNI.PointerAnalysis_getCallGraphSCCRepNode(swigCPtr, this, id);
  }

  public boolean inSameCallGraphSCC(SWIGTYPE_p_llvm__Function fun1, SWIGTYPE_p_llvm__Function fun2) {
    return SUPAJNI.PointerAnalysis_inSameCallGraphSCC(swigCPtr, this, SWIGTYPE_p_llvm__Function.getCPtr(fun1), SWIGTYPE_p_llvm__Function.getCPtr(fun2));
  }

  public boolean isInRecursion(SWIGTYPE_p_llvm__Function fun) {
    return SUPAJNI.PointerAnalysis_isInRecursion(swigCPtr, this, SWIGTYPE_p_llvm__Function.getCPtr(fun));
  }

  public boolean isLocalVarInRecursiveFun(long id) {
    return SUPAJNI.PointerAnalysis_isLocalVarInRecursiveFun(swigCPtr, this, id);
  }

  public String PTAName() {
    return SUPAJNI.PointerAnalysis_PTAName(swigCPtr, this);
  }

  public SWIGTYPE_p_llvm__SparseBitVectorT_t getPts(long ptr) {
    return new SWIGTYPE_p_llvm__SparseBitVectorT_t(SUPAJNI.PointerAnalysis_getPts(swigCPtr, this, ptr), false);
  }

  public SWIGTYPE_p_llvm__SparseBitVectorT_t getRevPts(long nodeId) {
    return new SWIGTYPE_p_llvm__SparseBitVectorT_t(SUPAJNI.PointerAnalysis_getRevPts(swigCPtr, this, nodeId), false);
  }

  public void clearPts() {
    SUPAJNI.PointerAnalysis_clearPts(swigCPtr, this);
  }

  public void printIndCSTargets(SWIGTYPE_p_llvm__CallSite cs, FunctionSet targets) {
    SUPAJNI.PointerAnalysis_printIndCSTargets__SWIG_0(swigCPtr, this, SWIGTYPE_p_llvm__CallSite.getCPtr(cs), FunctionSet.getCPtr(targets), targets);
  }

  public void dumpTopLevelPtsTo() {
    SUPAJNI.PointerAnalysis_dumpTopLevelPtsTo(swigCPtr, this);
  }

  public void dumpAllPts() {
    SUPAJNI.PointerAnalysis_dumpAllPts(swigCPtr, this);
  }

  public void dumpCPts() {
    SUPAJNI.PointerAnalysis_dumpCPts(swigCPtr, this);
  }

  public void dumpPts(long ptr, SWIGTYPE_p_llvm__SparseBitVectorT_t pts) {
    SUPAJNI.PointerAnalysis_dumpPts(swigCPtr, this, ptr, SWIGTYPE_p_llvm__SparseBitVectorT_t.getCPtr(pts));
  }

  public void printIndCSTargets() {
    SUPAJNI.PointerAnalysis_printIndCSTargets__SWIG_1(swigCPtr, this);
  }

  public void dumpAllTypes() {
    SUPAJNI.PointerAnalysis_dumpAllTypes(swigCPtr, this);
  }

  public SWIGTYPE_p_CHGraph getCHGraph() {
    long cPtr = SUPAJNI.PointerAnalysis_getCHGraph(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_CHGraph(cPtr, false);
  }

  public void getVFnsFromCHA(SWIGTYPE_p_llvm__CallSite cs, FunctionSet vfns) {
    SUPAJNI.PointerAnalysis_getVFnsFromCHA(swigCPtr, this, SWIGTYPE_p_llvm__CallSite.getCPtr(cs), FunctionSet.getCPtr(vfns), vfns);
  }

  public void getVFnsFromPts(SWIGTYPE_p_llvm__CallSite cs, SWIGTYPE_p_llvm__SparseBitVectorT_t target, FunctionSet vfns) {
    SUPAJNI.PointerAnalysis_getVFnsFromPts(swigCPtr, this, SWIGTYPE_p_llvm__CallSite.getCPtr(cs), SWIGTYPE_p_llvm__SparseBitVectorT_t.getCPtr(target), FunctionSet.getCPtr(vfns), vfns);
  }

  public void connectVCallToVFns(SWIGTYPE_p_llvm__CallSite cs, FunctionSet vfns, SWIGTYPE_p_std__mapT_llvm__CallSite_std__setT_Function_const_p_t_std__lessT_llvm__CallSite_t_t newEdges) {
    SUPAJNI.PointerAnalysis_connectVCallToVFns(swigCPtr, this, SWIGTYPE_p_llvm__CallSite.getCPtr(cs), FunctionSet.getCPtr(vfns), vfns, SWIGTYPE_p_std__mapT_llvm__CallSite_std__setT_Function_const_p_t_std__lessT_llvm__CallSite_t_t.getCPtr(newEdges));
  }

  public void resolveCPPIndCalls(SWIGTYPE_p_llvm__CallSite cs, SWIGTYPE_p_llvm__SparseBitVectorT_t target, SWIGTYPE_p_std__mapT_llvm__CallSite_std__setT_Function_const_p_t_std__lessT_llvm__CallSite_t_t newEdges) {
    SUPAJNI.PointerAnalysis_resolveCPPIndCalls(swigCPtr, this, SWIGTYPE_p_llvm__CallSite.getCPtr(cs), SWIGTYPE_p_llvm__SparseBitVectorT_t.getCPtr(target), SWIGTYPE_p_std__mapT_llvm__CallSite_std__setT_Function_const_p_t_std__lessT_llvm__CallSite_t_t.getCPtr(newEdges));
  }

  public SWIGTYPE_p_TypeSystem getTypeSystem() {
    long cPtr = SUPAJNI.PointerAnalysis_getTypeSystem(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_TypeSystem(cPtr, false);
  }

  public final static class PTATY {
    public final static PointerAnalysis.PTATY Andersen_WPA = new PointerAnalysis.PTATY("Andersen_WPA");
    public final static PointerAnalysis.PTATY AndersenLCD_WPA = new PointerAnalysis.PTATY("AndersenLCD_WPA");
    public final static PointerAnalysis.PTATY AndersenHCD_WPA = new PointerAnalysis.PTATY("AndersenHCD_WPA");
    public final static PointerAnalysis.PTATY AndersenHLCD_WPA = new PointerAnalysis.PTATY("AndersenHLCD_WPA");
    public final static PointerAnalysis.PTATY AndersenSCD_WPA = new PointerAnalysis.PTATY("AndersenSCD_WPA");
    public final static PointerAnalysis.PTATY AndersenSFR_WPA = new PointerAnalysis.PTATY("AndersenSFR_WPA");
    public final static PointerAnalysis.PTATY AndersenWaveDiff_WPA = new PointerAnalysis.PTATY("AndersenWaveDiff_WPA");
    public final static PointerAnalysis.PTATY AndersenWaveDiffWithType_WPA = new PointerAnalysis.PTATY("AndersenWaveDiffWithType_WPA");
    public final static PointerAnalysis.PTATY CSCallString_WPA = new PointerAnalysis.PTATY("CSCallString_WPA");
    public final static PointerAnalysis.PTATY CSSummary_WPA = new PointerAnalysis.PTATY("CSSummary_WPA");
    public final static PointerAnalysis.PTATY FSDATAFLOW_WPA = new PointerAnalysis.PTATY("FSDATAFLOW_WPA");
    public final static PointerAnalysis.PTATY FSSPARSE_WPA = new PointerAnalysis.PTATY("FSSPARSE_WPA");
    public final static PointerAnalysis.PTATY FSCS_WPA = new PointerAnalysis.PTATY("FSCS_WPA");
    public final static PointerAnalysis.PTATY FSCSPS_WPA = new PointerAnalysis.PTATY("FSCSPS_WPA");
    public final static PointerAnalysis.PTATY ADAPTFSCS_WPA = new PointerAnalysis.PTATY("ADAPTFSCS_WPA");
    public final static PointerAnalysis.PTATY ADAPTFSCSPS_WPA = new PointerAnalysis.PTATY("ADAPTFSCSPS_WPA");
    public final static PointerAnalysis.PTATY TypeCPP_WPA = new PointerAnalysis.PTATY("TypeCPP_WPA");
    public final static PointerAnalysis.PTATY FieldS_DDA = new PointerAnalysis.PTATY("FieldS_DDA");
    public final static PointerAnalysis.PTATY FlowS_DDA = new PointerAnalysis.PTATY("FlowS_DDA");
    public final static PointerAnalysis.PTATY PathS_DDA = new PointerAnalysis.PTATY("PathS_DDA");
    public final static PointerAnalysis.PTATY Cxt_DDA = new PointerAnalysis.PTATY("Cxt_DDA");
    public final static PointerAnalysis.PTATY Default_PTA = new PointerAnalysis.PTATY("Default_PTA");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static PTATY swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + PTATY.class + " with value " + swigValue);
    }

    private PTATY(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private PTATY(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private PTATY(String swigName, PTATY swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static PTATY[] swigValues = { Andersen_WPA, AndersenLCD_WPA, AndersenHCD_WPA, AndersenHLCD_WPA, AndersenSCD_WPA, AndersenSFR_WPA, AndersenWaveDiff_WPA, AndersenWaveDiffWithType_WPA, CSCallString_WPA, CSSummary_WPA, FSDATAFLOW_WPA, FSSPARSE_WPA, FSCS_WPA, FSCSPS_WPA, ADAPTFSCS_WPA, ADAPTFSCSPS_WPA, TypeCPP_WPA, FieldS_DDA, FlowS_DDA, PathS_DDA, Cxt_DDA, Default_PTA };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
